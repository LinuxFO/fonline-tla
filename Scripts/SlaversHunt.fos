// FOS Server

///@ Property Critter Protected     uint8 NcrElizeSlvrsHunting Group = Quests Quest = 4246 Max = 7
///@ Property Critter PrivateServer uint  NcrElizeSlvrsHuntingStatus Max = 23

#define SLAVER_TYPE_COMBAT       (1)
#define SLAVER_TYPE_HEALER       (2)
#define SLAVER_TYPE_MELEE        (3)
#define SLAVER_TYPE_SNIPE        (4)
#define MSG_NUM_HEAL_ME          (10)
#define MSG_NUM_STOP             (12) // сообщение "срочно остановись!" используется нпц-хилерами, когда они хотят вылечить напарника
#define MSG_NUM_ATTACKED         (13) // атакован игрок
#define MSG_NUM_GALARM           (14) // ктото убит

#define PLANE_HEAL_SLAVER        (11)
#define PLANE_HEAL_PRIORITY      (101)
#define PLANE_STOP_PRIORITY      (102)

#define PHRASE_NUM_MEET_PLAYER   (1)
#define PHRASE_NUM_WAIT_FOR_HEAL (2)

#define STR_NUM_MAP_ENTER        (2700) // номер строки в файле FOTEXT.msg где хранится описание карты с работорговцами
#define STR_NUM_MAP_ITEM_USE     (2701) // строка при использовании итема "карта элизы"

// #define __DEBUG__		// Для отладки.

// координаты и допустимые типы поведения для гекса на карте
// в таком гексе может появиться один из типов работорговцев
class EncSpawnHexDescr
{
    uint HexX;
    uint HexY;

    EncSpawnHexDescr(uint hX, uint hY)
    {
        HexX = hX;
        HexY = hY;
    }

    int[] SlaverTypes = {};

    void PushSlaverType(int sType)
    {
        // уже назначен такой тип в разрешенных
        if (CheckSTypeAllow(sType)) {
            return;
        }

        SlaverTypes.insertLast(sType);
    }
    // проверка, можно ли поставить работорговца выбранного типа на данный гекс
    bool CheckSTypeAllow(int sType)
    {
        for (uint i = 0; i < SlaverTypes.length(); i++) {
            if (SlaverTypes[i] == sType) {
                return true;
            }
        }
        return false;
    }
}

// описание энкаунтера
class EncSlaversDescr
{
    uint MapPid;
    EncSpawnHexDescr[] Hexes = {};

    EncSlaversDescr()
    {
    }
}

EncSlaversDescr
GetEncDescr(uint mapPid)
{
    if (mapPid == Content::Location::desert_6)
        return Desert06Enc();
    else if (mapPid == Content::Location::desert_11)
        return Desert11Enc();
    else if (mapPid == Content::Location::desert_12)
        return Desert12Enc();
    return null;
}

// EDesert6 - дом в пустыне, есть брамины|||[Area 106] name=Desert 6 size=6 map_0=e_desert6 geck_enabled=1
// EDesert11 - дом в лесу, там где пять бутылок пива на полу |||[Area 111] name=Desert 11 size=6 map_0=e_desert11 geck_enabled=1
// EDesert12 - энк с большим фермерским домиком (джет в холодилнике)|||[Area 112] name=Desert 12 size=6 map_0=e_desert12 geck_enabled=1
EncSlaversDescr Desert06Enc()
{
    EncSlaversDescr eDescr = EncSlaversDescr();
    eDescr.MapPid = Content::Location::desert_6;

    eDescr.Hexes.insertLast(EncSpawnHexDescr(60, 38));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_SNIPE);
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    // 71/43
    eDescr.Hexes.insertLast(EncSpawnHexDescr(71, 43));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_HEALER);
    // 75/43
    eDescr.Hexes.insertLast(EncSpawnHexDescr(75, 43));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    // 72/44
    eDescr.Hexes.insertLast(EncSpawnHexDescr(72, 44));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    // 42/58 +h
    eDescr.Hexes.insertLast(EncSpawnHexDescr(42, 58));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_HEALER);
    // 41/65
    eDescr.Hexes.insertLast(EncSpawnHexDescr(41, 65));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    // 46/63 +h
    eDescr.Hexes.insertLast(EncSpawnHexDescr(46, 63));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_HEALER);
    // 29/53 +s
    eDescr.Hexes.insertLast(EncSpawnHexDescr(29, 53));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_SNIPE);
    // 32/66
    eDescr.Hexes.insertLast(EncSpawnHexDescr(32, 66));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    // 30/45
    eDescr.Hexes.insertLast(EncSpawnHexDescr(30, 45));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    // 39/42 +h +s
    eDescr.Hexes.insertLast(EncSpawnHexDescr(39, 42));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_SNIPE);
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_HEALER);
    // 110/74
    eDescr.Hexes.insertLast(EncSpawnHexDescr(110, 74));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);

    return eDescr;
}

EncSlaversDescr Desert11Enc()
{
    EncSlaversDescr eDescr = EncSlaversDescr();
    eDescr.MapPid = Content::Location::desert_11;
    // 59/42
    eDescr.Hexes.insertLast(EncSpawnHexDescr(59, 42));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_HEALER);
    // 57/47
    eDescr.Hexes.insertLast(EncSpawnHexDescr(57, 47));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    // 65/41
    eDescr.Hexes.insertLast(EncSpawnHexDescr(65, 41));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    // 64/49 +h
    eDescr.Hexes.insertLast(EncSpawnHexDescr(64, 49));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_HEALER);
    // 39/45
    eDescr.Hexes.insertLast(EncSpawnHexDescr(39, 45));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    // 41/46 +s
    eDescr.Hexes.insertLast(EncSpawnHexDescr(41, 46));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_SNIPE);
    // 41/53
    eDescr.Hexes.insertLast(EncSpawnHexDescr(41, 53));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    // 84/62
    eDescr.Hexes.insertLast(EncSpawnHexDescr(84, 62));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    // 97/57 +s
    eDescr.Hexes.insertLast(EncSpawnHexDescr(97, 57));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_SNIPE);
    // 98/53 +h
    eDescr.Hexes.insertLast(EncSpawnHexDescr(98, 53));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_HEALER);
    return eDescr;
}

EncSlaversDescr Desert12Enc()
{
    EncSlaversDescr eDescr = EncSlaversDescr();
    eDescr.MapPid = Content::Location::desert_12;
    // 70/22 +s
    eDescr.Hexes.insertLast(EncSpawnHexDescr(70, 22));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_SNIPE);
    // 52/34 s
    eDescr.Hexes.insertLast(EncSpawnHexDescr(52, 34));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_SNIPE);
    // 65/32 s
    eDescr.Hexes.insertLast(EncSpawnHexDescr(65, 32));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_SNIPE);
    // 72/50
    eDescr.Hexes.insertLast(EncSpawnHexDescr(72, 50));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    // 73/49
    eDescr.Hexes.insertLast(EncSpawnHexDescr(73, 49));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    // 84/30
    eDescr.Hexes.insertLast(EncSpawnHexDescr(84, 30));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    // 88/33h
    eDescr.Hexes.insertLast(EncSpawnHexDescr(88, 33));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_HEALER);
    // 92/33
    eDescr.Hexes.insertLast(EncSpawnHexDescr(92, 33));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    // 102/44
    eDescr.Hexes.insertLast(EncSpawnHexDescr(102, 44));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    // 112/55 s
    eDescr.Hexes.insertLast(EncSpawnHexDescr(112, 55));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_SNIPE);
    // 103/44 h
    eDescr.Hexes.insertLast(EncSpawnHexDescr(103, 44));
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_COMBAT);
    eDescr.Hexes[eDescr.Hexes.length() - 1].PushSlaverType(SLAVER_TYPE_HEALER);
    return eDescr;
}

bool _CheckRightGlobalZone(uint wX, uint wY)
{
    if (wX < 318 || wX > 542) {
        return false;
    }
    if (wY < 174 || wY > 325) {
        return false;
    }
    return true;
    // зона поисков Х: от 318 до 542
    // зона поисков У: от 174 до 325
}

bool e_OnPlayerInvite(Critter cr, Item car, uint encounterDescriptor, int combatMode, uint mapId, uint16 hexX, uint16 hexY, uint8 dir)
// Обработка глобальной карты для перехода на карту.
// При возвращении true - глобальный обработчик не запускается, false - запуск глобального обработчика. ~loadscript q_slavers_hunt
{
    Critter[] group = GlobalmapGroupExtended::GetGlobalGroup(cr);

    Worldmap::InviteToEncounter(group, null, encounterDescriptor, combatMode, mapId, hexX, hexY, dir);

    // проверяем, что у лидера есть нужный квест
    if (!cr.IsPlayer())
        return true;

    if (cr.NcrElizeSlvrsHuntingStatus < 1 || cr.NcrElizeSlvrsHuntingStatus > 21)
        return true;
    // состояние квеста правильное, идем дальше
    // потенциально мощный эксплоит для набора лута и экспы: группа заходит, ведомая человеком с квестом
    // человек с квестом никого не убивает, зато остальные бьют мобов, так они могут шариться бесконечно и мочить работорговцев
    // пока используется дубовый вариант: если в группе больше одного человека, лутать трупы слейверов нельзя и опыта за них не дается
    bool noLoot = false;

    if (group.length() > 1) {
        noLoot = true;
    }

    Map map = GetMap(mapId);
    int maxLvl = cr.Level;
    for (uint j = 0; j < group.length(); j++) {
        maxLvl = (group[j].Level > maxLvl) ? group[j].Level : maxLvl;
    }
    if (valid(map)) {
        Location loc = map.GetLocation();
        if (!valid(loc)) {
            return true;
        }
        // проверяем, что находимся в нужном регионе

        EncSlaversDescr d = GetEncDescr(loc.ProtoId);

        if (valid(d)) {
            if (!_CheckRightGlobalZone(loc.WorldX, loc.WorldY)) {
                return true;
#ifdef __DEBUG__
                Log("\nWRONG ZONE");
#endif
            }
            for (uint i = 0; i < CLAMP(group.length() + uint(Random(2, 8)), 4, d.Hexes.length()); i++) {
                Critter slaver = _GetSlaver(map, d.Hexes[i], maxLvl, noLoot);
            }
            // отправляем мессагу игроку
            cr.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_NUM_MAP_ENTER);
        }
    }

    return true;
}

Critter _GetSlaver(Map map, EncSpawnHexDescr hDesc, uint crLvl, bool noLoot)
{
    uint slaverPid = Content::Critter::Yakuza;
    uint type = SLAVER_TYPE_COMBAT;
    // приоритеты снайпер-лекарь-милишник-автоматчик
    if (hDesc.CheckSTypeAllow(SLAVER_TYPE_MELEE)) {
        slaverPid = Content::Critter::Yakuza;
        type = SLAVER_TYPE_MELEE;
    }
    if (hDesc.CheckSTypeAllow(SLAVER_TYPE_HEALER)) {
        slaverPid = Content::Critter::FemaleCombatSlave;
        type = SLAVER_TYPE_HEALER;
    }
    if (hDesc.CheckSTypeAllow(SLAVER_TYPE_SNIPE)) {
        slaverPid = Content::Critter::Slaver2;
        type = SLAVER_TYPE_SNIPE;
    }

    int[] props = {CritterProperty::DialogId,
                   slaverPid == Content::Critter::FemaleCombatSlave ? Content::Dialog::all_fslaver_elize_quest : Content::Dialog::all_mslaver_elize_quest,
                   CritterProperty::BagId,
                   type == SLAVER_TYPE_SNIPE ? Bags::RDRCGCaravanReactorGhoul + Random(0, 1) : Bags::AllSlavesMaleSlaver,
                   CritterProperty::TeamId,
                   Teams::Slaver,
                   CritterProperty::AiId,
                   Fallout2AIPackets::BountyHunter,
                   CritterProperty::Level,
                   crLvl + Random(4, 8)};
    Critter slaver = map.AddNpc(slaverPid, hDesc.HexX, hDesc.HexY, Random(1, 5), TlaExtended::GetCritPropsDict(props));
    slaver.SetScript(EncounterNpc::_NpcInit);
    if (not valid(slaver))
        return null;

    // чем выше уровень работорговцев, тем у них круче меткость
    switch (uint(crLvl / 5)) {
    case 2:
        slaver.SkillSmallGuns = 120;
        break;
    case 3:
        slaver.SkillSmallGuns = Random(150, 200);
        break;
    case 4:
        slaver.SkillSmallGuns = 250;
        break;
    case 5:
        slaver.SkillSmallGuns = 300;
        break;
    default:
        break;
    }
    if (noLoot) {
// борьба с эксплоитами
// группа не получит халявного лута и экспы..
#ifdef __DEBUG__
        Log("\nNoLoot mode on");
#endif
        slaver.IsNoBarter = true;
        slaver.IsNoSteal = true;
        slaver.KillExperience = Random(1, 3);
    }
    slaver.ReplicationTime = -1;
    slaver.NpcRole = type;
    slaver.ShowCritterDist1 = Random(10, 30); // проверить, мало это или много

    __EventCritterMessage.SubscribeToCritter(slaver, _SlaverMessage);

    switch (type) {
    case SLAVER_TYPE_HEALER:
        slaver.AddItem(Content::Item::stimpak, Random(4, 8));
        // у хилеров персональная обработка сообщений
        __EventCritterMessage.SubscribeToCritter(slaver, _SlaverHealerMessage);
        __EventNpcPlaneEnd.SubscribeToCritter(slaver, _SlaverHealerPlaneEnd);
        __EventCritterSomeCritterDead.SubscribeToCritter(slaver, _SlaverHealerSmthDead);
        slaver.IsNoHome = true;
        slaver.SkillSmallGuns = 150;
#ifdef __DEBUG__
        Log("Healer Added");
#endif
        break;
    case SLAVER_TYPE_SNIPE:
        slaver.ShowCritterDist1 = 50;
        slaver.SkillSmallGuns = 300;
        slaver.IsHide = true;
    default:
        break;
    }

    __EventCritterShowDist1.SubscribeToCritter(slaver, _SlaverShowCritterDist1);
    __EventCritterAttacked.SubscribeToCritter(slaver, _SlaverAttacked);
    __EventCritterDead.SubscribeToCritter(slaver, _SlaverDead);

    return slaver;
}

// CRITTER_EVENT_DEAD
void _SlaverDead(Critter cr, Critter killer)
{
    if (!valid(killer))
        return;
    SendMessage::SendMessage(cr, MSG_NUM_GALARM, killer.Id, MESSAGE_TO_ALL_ON_MAP);

    if (!killer.IsPlayer())
        return;
    // статус
    // квест не взят
    if (killer.NcrElizeSlvrsHuntingStatus < 1 || killer.NcrElizeSlvrsHuntingStatus > 20)
        return;
    // квестовая
    killer.NcrElizeSlvrsHuntingStatus += 1;
    switch (killer.NcrElizeSlvrsHuntingStatus) {
    case 2:
        killer.NcrElizeSlvrsHunting = 2;
        break;
    case 6:
        killer.NcrElizeSlvrsHunting = 3;
        break;
    case 11:
        killer.NcrElizeSlvrsHunting = 4;
        break;
    case 16:
        killer.NcrElizeSlvrsHunting = 5;
        break;
    case 21:
        killer.NcrElizeSlvrsHunting = 6;
        // отписываемся от события
        __EventGlobalMapInvite.UnsubscribeFromCritter(killer, e_OnPlayerInvite);
        break;
    default:
        // состояние квестовой переменной не изменилось
        return;
    }
}

// Появился новый криттер в дистанции определенной uint Critter::ShowCritterDistX.
// CRITTER_EVENT_SHOW_CRITTER_X
void _SlaverShowCritterDist1(Critter cr, Critter showCrit)
{
    if (showCrit.IsPlayer()) {
        // Log("distcnce "+GetCrittersDistantion(cr,showCrit) + " radius" + cr.ReactRadius);

        if (!EnemyStack::CheckEnemyInStack(cr, showCrit.Id)) {
            EnemyStack::AddEnemyToStack(cr, showCrit.Id);
            NpcPlanes::AddAttackPlane(cr, AI_PLANE_ATTACK_PRIORITY, showCrit.Id);
            cr.SayMsg(SAY_NORM_ON_HEAD, TEXTMSG_DLG, DLGSTR(cr.DialogId, PHRASE_NUM_MEET_PLAYER));
            // TODO: добавить удвоенный приоритет если игрок с квестом
        }
    }
}

// CRITTER_EVENT_SMTH_DEAD
// убили того, кого хотели полечить, нужно забыть про него
void _SlaverHealerSmthDead(Critter cr, Critter fromCr, Critter killer)
{
    if (fromCr.TeamId == Teams::Slaver) {
        NpcPlanes::NpcPlane[] planes = {};
        if (NpcPlanes::GetPlanes(cr, PLANE_HEAL_SLAVER, fromCr.Id, planes) > 0) {
            for (uint i = 0; i < planes.length(); i++) {
                if (planes[i].Identifier == PLANE_HEAL_SLAVER && planes[i].IdentifierExt == fromCr.Id) {
                    NpcPlanes::ErasePlane(cr, i);
                    return;
                }
            }
        }
    }
}

void _WaitForHeal(Critter cr)
{
    // ничего не делаем, главное постоять на месте 2 сек, чтобы подошел хилер
    return;
}

// CRITTER_EVENT_PLANE_END
bool _SlaverHealerPlaneEnd(Critter cr, int planeId, int reason, Critter someCr, Item someItem)
{
    NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(cr, planeId);

    if (plane.Identifier == PLANE_HEAL_SLAVER && reason == REASON_SUCCESS) {
        Critter toCr = GetCritter(plane.IdentifierExt);
        if (valid(toCr)) {
            // лечить особо нечего
            if (toCr.CurrentHp * 2 > toCr.MaxLife)
                return true;

            cr.SetDir(GetDirection(cr.HexX, cr.HexY, toCr.HexX, toCr.HexY));
            // uint GetCrittersDistantion(Critter cr1, Critter cr2) расстояние в гексах
            if (GetCrittersDistantion(cr, toCr) > 1) {
                cr.SayMsg(2 * Random(1, 2), TEXTMSG_DLG, DLGSTR(cr.DialogId, PHRASE_NUM_WAIT_FOR_HEAL));
                NpcPlanes::AddWalkPlane(cr,
                                        PLANE_HEAL_PRIORITY,
                                        PLANE_HEAL_SLAVER,
                                        toCr.Id,
                                        toCr.HexX,
                                        toCr.HexY,
                                        GetDirection(cr.HexX, cr.HexY, toCr.HexX, toCr.HexY),
                                        true,
                                        1);
                // одну игровую минут цель будет ждать на месте, пока подбежит лекарь
                NpcPlanes::AddMiscPlane(toCr, PLANE_STOP_PRIORITY, GetFullSecond() + 60, SlaversHunt::_WaitForHeal);

                return true;
            }

            Item item = Obsolete::GetSlotItem(cr, Content::Item::stimpak, -1);
            if (valid(item)) {
                Drugs::UseDrugOn(cr, toCr, item);
                _CritAnimateUse(cr);
            }
        }
    }
    return true;
}

// CRITTER_EVENT_MESSAGE
void _SlaverHealerMessage(Critter cr, Critter fromCr, int message, int value)
{
    if (message == MSG_NUM_HEAL_ME && fromCr.TeamId == Teams::Slaver) {
        // проверяем, что нет текущих планов кого-то полечить
        if (NpcPlanes::GetPlanes(cr, PLANE_HEAL_SLAVER, null) != 0) {
            return;
        }

        if (cr.CountItem(Content::Item::stimpak) == 0) {
            return;
        }

        // сам себя не лечит пока
        if (cr.Id == fromCr.Id) {
            return;
        }

        NpcPlanes::AddWalkPlane(cr,
                                PLANE_HEAL_PRIORITY,
                                PLANE_HEAL_SLAVER,
                                fromCr.Id,
                                fromCr.HexX,
                                fromCr.HexY,
                                GetDirection(cr.HexX, cr.HexY, fromCr.HexX, fromCr.HexY),
                                true,
                                1);
        return;
    }
}

// получение сообщений рядовым работорговцем
// если один из работорговцев атакован - к нему сползутся те, кто его видят
// если один из работорговцев убит - прибегут все на карте
void _SlaverMessage(Critter cr, Critter fromCr, int message, int value)
{
    if (message == MSG_NUM_ATTACKED || message == MSG_NUM_GALARM) {
        if (!EnemyStack::CheckEnemyInStack(cr, value)) {
            EnemyStack::AddEnemyToStack(cr, value);
            NpcPlanes::AddAttackPlane(cr, 0, value);
        }
    }
}

// GetDirection(cr.HexX, cr.HexY, fromCr.HexX, fromCr.HexY)
bool _SlaverAttacked(Critter cr, Critter attacker)
{
    // зовем хилера
    // if(	cr.Param[ST_CURRENT_HP]*2 <cr.Param[ST_MAX_LIFE])
    // {
    // проверка
    SendMessage::SendMessage(cr, MSG_NUM_HEAL_ME, cr.Id, MESSAGE_TO_ALL_ON_MAP);
    SendMessage::SendMessage(cr, MSG_NUM_ATTACKED, attacker.Id, MESSAGE_TO_WHO_SEES_ME);

    //	Log("Sent Message");
    // }

    return false;
}

// уидели игрока
void e_SlaverShowCritter(Critter cr, Critter showCrit)
{
}

// ~run q_slavers_hunt GG 1 0 0
void GG(Critter cr, int crId, int val, int)
{
    __EventGlobalMapInvite.SubscribeToCritter(cr, e_OnPlayerInvite);

    cr.NcrElizeSlvrsHuntingStatus = 1;
    _AddElizeSlaversMap(cr);
}

// добавление игроку карты расположения лагерей работорговцев
void _AddElizeSlaversMap(Critter player)
{
    if (!player.IsPlayer()) {
        return;
    }

    // проверяем что нет такой карты у игрока с таким инфо
    Item item = Obsolete::GetSlotItem(player, Content::Item::ranger_map, -1);
    if (valid(item) && item.Info == 2)
        return;

    if (player.NcrElizeSlvrsHuntingStatus < 1 || player.NcrElizeSlvrsHuntingStatus > 20)
        return;

    Item map = player.AddItem(Content::Item::ranger_map, 1);
    map.SetScript(_ElizeMapInit);
}

// инициализация карты элизы
void _ElizeMapInit(Item map, bool firstTime)
{
    // специальное описание для итема
    map.Info = 2;
    // возможность использования для итема
    map.IsCanUse = true;
    // подписываемся на событие использования итема
    __EventCritterUseItem.SubscribeToItem(map, e_ElizeMapUse);
}

// обработка
bool e_ElizeMapUse(Critter player, Item item, Critter onCritter, Item onItem, const Item onScenery, uint param)
{
    if (!player.IsPlayer())
        return false;

    if (player.NcrElizeSlvrsHuntingStatus < 1 || player.NcrElizeSlvrsHuntingStatus > 21)
        return false;

    player.SayMsg(SAY_NETMSG,
                  TEXTMSG_TEXT,
                  STR_NUM_MAP_ITEM_USE); // "Вы сверяетесь с картой Элизы.\nСкорее всего работорговцев нужно искать между Кламатом и Ямой. ");
    // подписываемся снова на событие входа на карту.
    __EventGlobalMapInvite.SubscribeToCritter(player, e_OnPlayerInvite);

    return true;
}

// выдача карты и подписка на CRITTER_EVENT_GLOBAL_INVITE из диалога с элизой
void r_GetMap(Critter player, Critter cr)
{
    _AddElizeSlaversMap(player);
    __EventGlobalMapInvite.SubscribeToCritter(player, e_OnPlayerInvite);
}
