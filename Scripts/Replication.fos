// FOS Server Sort 2
// Author: cvet

///@ Property Critter PrivateServer uint HellVisits
///@ Property Game PrivateServer uint[] PermanentDeath

const hstring HellMapPid = Content::Map::repl1; // TODO: вернуть ад Content::Map::repl_hell;
const hstring[] ReplicatorsMapPids = {Content::Map::repl1, Content::Map::repl2, Content::Map::repl3, Content::Map::repl4};
uint ReplicatorPos = 0;

bool IsPermanentDeath(uint id) // Export
{
    return GameInstance.PermanentDeath.exists(id);
}

void ClearPermanentDeath() // Export
{
    GameInstance.PermanentDeath = array<uint>();
}

void AddPermanentDeath(uint id)
{
    auto permanentDeath = GameInstance.PermanentDeath.clone();
    if (!permanentDeath.exists(id)) {
        permanentDeath.insertLast(id);
        GameInstance.PermanentDeath = permanentDeath;
    }
}

Map GetStartReplicatorMap()
{
    return GetMapByPid(ReplicatorsMapPids[0], 0);
}

Map GetNearReplicatorMap(Critter cr)
{
    Map nearMap = null;
    int nearDist = 0;
    for (uint i = 0, j = ReplicatorsMapPids.length(); i < j; i++) {
        Map map = GetMapByPid(ReplicatorsMapPids[i], 0);
        if (valid(map)) {
            Location loc = map.GetLocation();
            int dx = int(cr.WorldX) - int(loc.WorldX);
            int dy = int(cr.WorldY) - int(loc.WorldY);
            int dist = int(sqrt(dx * dx + dy * dy));

            // GameEventReplicator.fos Restrict replication4 when event is on
            if (loc.ProtoId == Content::Location::replication_4 && GameInstance.GEReplStationStatus)
                continue;

            if (not valid(nearMap) || dist < nearDist) {
                nearMap = map;
                nearDist = dist;
            }
        }
    }
    return nearMap;
}

void SetStartLocation(Critter cr) // Export
{
    Map replicator = GetStartReplicatorMap();
    if (not valid(replicator))
        return;

    // Hidden fog on default player position
    uint zoneX = cr.WorldX / __GlobalMapZoneLength;
    uint zoneY = cr.WorldY / __GlobalMapZoneLength;
    cr.SetFog(zoneX, zoneY, FOG_FULL);
    cr.SetFog(zoneX - 1, zoneY - 1, FOG_FULL);
    cr.SetFog(zoneX, zoneY - 1, FOG_FULL);
    cr.SetFog(zoneX + 1, zoneY - 1, FOG_FULL);
    cr.SetFog(zoneX - 1, zoneY, FOG_FULL);
    cr.SetFog(zoneX + 1, zoneY, FOG_FULL);
    cr.SetFog(zoneX - 1, zoneY + 1, FOG_FULL);
    cr.SetFog(zoneX, zoneY + 1, FOG_FULL);
    cr.SetFog(zoneX + 1, zoneY + 1, FOG_FULL);

    Obsolete::CritterTransitToMapEntire(cr, replicator.Id, ENTIRE_REPLICATION);

    Location::SetKnownLoc(cr, true, replicator.GetLocation().Id);
    Location::SetKnownLoc(cr, false, Content::Location::replication_hell);
    hstring replPid = replicator.GetLocation().ProtoId;
    if (replPid == Content::Location::replication_1) {
        Location::SetKnownLoc(cr, false, Content::Location::den);
        Location::SetKnownLoc(cr, false, Content::Location::klamath);
        Location::SetKnownLoc(cr, false, Content::Location::arroyo); // TODO: remove arroyo after test s
    }
    else if (replPid == Content::Location::replication_2) {
        Location::SetKnownLoc(cr, false, Content::Location::modoc);
    }
    else if (replPid == Content::Location::replication_3) {
        Location::SetKnownLoc(cr, false, Content::Location::redding);
    }
    else if (replPid == Content::Location::replication_4) {
        Location::SetKnownLoc(cr, false, Content::Location::broken_hills);
        Location::SetKnownLoc(cr, false, Content::Location::new_reno);
    }

    zoneX = cr.WorldX / __GlobalMapZoneLength;
    zoneY = cr.WorldY / __GlobalMapZoneLength;
    cr.SetFog(zoneX, zoneY, FOG_NONE);
    cr.SetFog(zoneX - 1, zoneY - 1, FOG_HALF);
    cr.SetFog(zoneX, zoneY - 1, FOG_HALF);
    cr.SetFog(zoneX + 1, zoneY - 1, FOG_HALF);
    cr.SetFog(zoneX - 1, zoneY, FOG_HALF);
    cr.SetFog(zoneX + 1, zoneY, FOG_HALF);
    cr.SetFog(zoneX - 1, zoneY + 1, FOG_HALF);
    cr.SetFog(zoneX, zoneY + 1, FOG_HALF);
    cr.SetFog(zoneX + 1, zoneY + 1, FOG_HALF);
}

void SetReplicationTime(Critter cr) // Export
{
    int replTime = cr.ReplicationTime;
    if (replTime < 0)
        return;        // No respawn
    if (replTime == 0) // Take default values
    {
        if (cr.IsPlayer())
            replTime = 3; // 3 minutes
        else
            replTime = Random(90, 120); // 90-120 minutes
    }
    replTime *= REAL_MINUTE(1);
    cr.TimeoutReplication = __FullSecond + replTime;
}

bool IsHellMap(hstring mapPid)
{
    return mapPid == HellMapPid;
}

void ReplicateCritter(Critter cr) // Export
{
    Map dieMap = cr.GetMap();
    Map map = null;
    uint16 hx = 0, hy = 0;

    // Check car
    Item[] cars = {};
    Obsolete::GetItemsByType(cr, ItemType::Car, cars);
    if (cars.length() > 0) {
        // Transit to random encounter
        bool transferred = false;
        uint encounterDescriptor = uint(-1);
        bool waitForAnswer = false;
        Worldmap::FindEncounter(GlobalmapGroupExtended::GetGlobalGroup(cr), cars[0], cr.WorldX, cr.WorldY, encounterDescriptor, waitForAnswer, true);
        if (encounterDescriptor != uint(-1)) {
            uint mapId = 0;
            uint16 hexX = 0;
            uint16 hexY = 0;
            uint8 dir = 0;
            Worldmap::InviteToEncounter(GlobalmapGroupExtended::GetGlobalGroup(cr), cars[0], encounterDescriptor, COMBAT_MODE_ANY, mapId, hexX, hexY, dir);
            if (mapId != 0 && Obsolete::CritterTransitToMapCoords(cr, mapId, hexX, hexY, dir))
                transferred = true;
        }

        // Encounter not founded or transfer fail, delete cars
        if (!transferred) {
            for (uint i = 0; i < cars.length(); i++)
                DeleteItem(cars[i]);
        }

        // Continue dead
        cr.TimeoutReplication = __FullSecond + REAL_MINUTE(1);
        return;
    }

    if (cr.IsPlayer()) {
        bool dieMapIsHell = (valid(dieMap) && IsHellMap(dieMap.ProtoId));
        bool customReplMap = false;
        if (cr.NextReplicationMap != 0) {
            // Нестандартная репликация в Чистилище
            Purgatory::NeedReplicateCritterToBattle(cr);
            customReplMap = true; // репликация на других картах
        }

        if (not customReplMap && cr.ReplicationMoney < 0) {
            map = GetMapByPid(HellMapPid, 0);

            if (not dieMapIsHell) {
                cr.HellVisits += 1;

                // Show hell video
                if (cr.HellVisits == 1)
                    Media::PlayVideo(cr, "TheLifeAfterHell.ogv|TheLifeAfterHell.ogg", false);

                // Permanent death
                if (__PermanentDeath > 0 && cr.HellVisits > __PermanentDeath) {
                    AddPermanentDeath(cr.Id);
                    cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrNetPermanentDeath);
                    cr.Disconnect();
                }
            }
        }
        else {
            if (customReplMap) {
                map = GetMap(cr.NextReplicationMap);
            }
            else
                map = GetNearReplicatorMap(cr);
        }

        if (not valid(map) || not Entire::GetEntireFreeHex(map, (customReplMap ? cr.NextReplicationEntire : ENTIRE_REPLICATION), hx, hy)) {
            // Continue dead
            cr.TimeoutReplication = __FullSecond + REAL_MINUTE(1);
            return;
        }

        if (_CritCanDropItemsOnDead(cr)) {
            Map dropMap = cr.GetMap();
            Item[] items = {};
            Obsolete::GetItems(cr, -1, items);

            // Disable drop of hidden items and delete gag items (sandbags)
            for (uint i = 0, j = items.length(); i < j; i++) {
                if (items[i].IsGag) {
                    DeleteItem(items[i]);
                    items[i] = null;
                }
                else if (items[i].IsHidden) {
                    items[i] = null;
                }
            }

            // Drop
            if (valid(dropMap))
                MoveItems(items, dropMap, cr.HexX, cr.HexY);
            else
                DeleteItems(items);
        }
        if (!customReplMap) {
            if (not dieMapIsHell) {
                cr.ReplicationMoney -= cr.ReplicationCost;
                _CritAddItem(cr, Content::Item::flower, 1);
                if (cr.ReplicationMoney >= 100)
                    _CritAddItem(cr, Content::Item::radio, 1); // Add radio
            }
            cr.ReplicationCount += 1;
        }
        else {
            // Очистка данных по нестандартной репликации
            cr.NextReplicationMap = 0;
            cr.NextReplicationEntire = 0;
        }
    }
    else {
        NpcPlanes::DropPlanes(cr);
        EnemyStack::ClearEnemyStackNpc(cr);
        cr.LastWeaponId = 0;
        map = cr.GetMap();
        if (not valid(map)) // On global, delete
        {
            DeleteNpc(cr);
            return;
        }
        hx = cr.HexX;
        hy = cr.HexY;

        if (cr.DeadBlockerId != 0) {
            Item block = GetItem(cr.DeadBlockerId);
            if (valid(block))
                DeleteItem(block);
            cr.DeadBlockerId = 0;
        }

        if (not map.IsHexPassed(hx, hy)) {
            bool founded = false;
            for (int x = -1; x <= 1; x++) {
                for (int y = -1; y <= 1; y++) {
                    if (x == 0 && y == 0)
                        continue; // Skip direct position

                    if (__MapHexagonal) {
                        if ((hx % 2) == 1 && ((x == -1 && y == 1) || (x == 1 && y == 1)))
                            continue;
                        if ((hx % 2) == 0 && ((x == -1 && y == -1) || (x == 1 && y == -1)))
                            continue;
                    }

                    if (map.IsHexPassed(hx + x, hy + y)) {
                        hx += x;
                        hy += y;
                        founded = true;
                        break;
                    }
                }
                if (founded)
                    break;
            }

            if (not founded) {
                // Continue dead
                cr.TimeoutReplication = __FullSecond + REAL_MINUTE(1);
                return;
            }
        }
    }

    Obsolete::CritterTransitToMapCoords(cr, map.Id, hx, hy, Random(0, 5));
    cr.IsDamagedEye = false;
    cr.IsDamagedRightArm = false;
    cr.IsDamagedLeftArm = false;
    cr.IsDamagedRightLeg = false;
    cr.IsDamagedLeftLeg = false;
    if (cr.NextCrType > 0) {
        // cr.ChangeCrType( cr.NextCrType );
        cr.ModelNameBase = cr.NextCrType;
        cr.NextCrType = 0;
    }
    CritterState::ToLife(cr);
    cr.CurrentHp = cr.MaxLife;
    cr.CurrentAp = cr.ActionPoints * AP_DIVIDER;
    Poison::DropPoison(cr);
    Radiation::DropRadiation(cr);
    if (cr.IsNpc() || map.ProtoId != HellMapPid)
        Drugs::DropDrugEffects(cr); // Note: This function clear effects of all active drugs/radiation/poison!
    GlobalmapGroupExtended::DropTimers(cr);
    for (uint i = 0; i < CritterPropertyTimeouts.length(); i++)
        if (CritterPropertyTimeouts[i] != CritterProperty::TimeoutKarmaVoting)
            cr.SetAsInt(CritterPropertyTimeouts[i], 0);
}

//
// Turret
//
void _TurretInit(Critter turret, bool firstTime)
{
    turret.PerceptionBase = 10;
    turret.SkillBigGuns = 300;
    turret.SkillEnergyWeapons = 300;
    turret.IsNoEnemyStack = true;
    turret.IsUnlimitedAmmo = true;
}

//
// Hubologist
//
void _HubologistInit(Critter hubologist, bool firstTime)
{
    hubologist.IsNoEnemyStack = true;
}
