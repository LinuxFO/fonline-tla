// FOS Common

// Game configuration, for server/client/mapper, call in start functions

#ifndef __COMPILER

// /
// / Server and client initialization
// /

#ifndef __MAPPER

void InitializeGame() // Export
{
    // / Init global vars
    __ScriptRunSuspendTimeout = 10000; // In milliseconds
    __ScriptRunMessageTimeout = 5000;  // In milliseconds
    __LoggingVars = false;
    __DisableTcpNagle = true;
    __DisableZlibCompression = false;
    __FloodSize = 2048; // In bytes
    // __BruteForceTick            = 100;   // In milliseconds
    __NoAnswerShuffle = false;
    __FixBoyDefaultExperience = 50;
    __SneakDivider = 6;
    __LevelCap = 666;
    __LevelCapAddExperience = true;
    __LookNormal = 20;
    __LookMinimum = 3;
    // __CritterIdleTick           = 10000;
    __Breaktime = 1200;
    __TimeoutTransfer = 0;
    __TimeoutBattle = REAL_SECOND(45);
    __ApRegeneration = 7000;
    __RtApCostCritterWalk = 0; // 1 AP == 100, maximim 255
    __RtApCostCritterRun = 0;  // 1 AP == 100, maximim 255
    __RtApCostMoveItemContainer = 0;
    __RtApCostMoveItemInventory = 2;
    __RtApCostPickItem = 4;
    __RtApCostDropItem = 1;
    __RtApCostReloadWeapon = 2;
    __RtApCostPickCritter = 1;
    __RtApCostUseItem = 3;
    __RtApCostUseSkill = 2;
    // __RtAlwaysRun               = false;
    __ApCostAimEyes = 1;
    __ApCostAimHead = 1;
    __ApCostAimGroin = 1;
    __ApCostAimTorso = 1;
    __ApCostAimArms = 1;
    __ApCostAimLegs = 1;
    __HitAimEyes = 60;
    __HitAimHead = 40;
    __HitAimGroin = 30;
    __HitAimTorso = 0;
    __HitAimArms = 30;
    __HitAimLegs = 20;
    __RunOnCombat = false;
    __RunOnTransfer = true;
    __GlobalMapWidth = 28;      // Maximum 100
    __GlobalMapHeight = 30;     // Maximum 100
    __GlobalMapZoneLength = 50; // Maximum 500
    __GlobalMapMoveTime = 250;
    __EncounterTime = 5000;
    __DeadHitPoints = -20;
    __BagRefreshTime = 60; // Real minutes
    __WisperDist = 2;
    __ShoutDist = 400;
    __RegistrationTimeout = 5 * 60; // In real seconds, 0 to disable
    __AccountPlayTime = 10 * 60;    // In real seconds, 0 to disable
    __TalkDistance = 3;
    __NpcMaxTalkers = 1;
    __MinNameLength = 4;  // Minimum 1
    __MaxNameLength = 12; // Maximum 30
    __PermanentDeath = 0; // Disable
    __DlgTalkMinTime = 100000;
    __DlgBarterMinTime = 50000;
    __MinimumOfflineTime = 180000; // 3 minutes
    __MainStoryLineActive = false;
    __NoPvpMaps = true;
    __MaxLifeLevelSoftCap = 36;
    // Look modifiers
    __LookChecks = 0; // See Look checks in _defines.fos
    // __LookChecks |= LOOK_CHECK_DIR; // Nerfe look by directions of look
    __LookDir0 = 0;  // Nerfe 0% of look radius with direct look
    __LookDir1 = 20; // Nerfe 20% of look radius with front side look
    __LookDir2 = 40; // Nerfe 40% of look radius with back side look
    __LookDir3 = 60; // Nerfe 60% of look radius with back look
    __LookDir4 = 60; // Nerfe 60% of look radius with back look (Square geometry)
    // __LookChecks |= LOOK_CHECK_SNEAK_DIR; // Nerfe opponent sneak by directions of look
    __LookSneakDir0 = 90;                    // Nerfe 90% of opponent sneak with direct look
    __LookSneakDir1 = 60;                    // Nerfe 60% of opponent sneak with front side look
    __LookSneakDir2 = 30;                    // Nerfe 30% of opponent sneak with back side look
    __LookSneakDir3 = 0;                     // Nerfe 0% of opponent sneak with back look
    __LookSneakDir4 = 0;                     // Nerfe 0% of opponent sneak with back look (Square geometry)
    __LookChecks |= LOOK_CHECK_SNEAK_WEIGHT; // Nerfe sneak by current weight
    __LookWeight = 10;                       // Lost 1 sneak point per 10 gramm
    // __LookChecks |= LOOK_CHECK_TRACE; // Tracing for wall aviablility
    // __LookChecks |= LOOK_CHECK_SCRIPT; // Allow bool check_look(...) in main.fos, all other defines ignored
    // __LookChecks |= LOOK_CHECK_ITEM_SCRIPT; // Allow bool check_trap_look(...) in main.fos, for items with ITEM_TRAP flag

    // Compare with >=
    __ReputationLoved = 30;
    __ReputationLiked = 15;
    __ReputationAccepted = 1;
    __ReputationNeutral = 0;
    __ReputationAntipathy = -14;
    __ReputationHated = -29;
    // Other is Vilified
    __Singleplayer = false;
    __AlwaysRun = false;
    // Registation values
    __StartSpecialPoints = 40;
    __StartTagSkillPoints = 3;

    // Skill modifiers
    __SkillMaxValue = 300;
    __SkillModAdd2 = 100;
    __SkillModAdd3 = 125;
    __SkillModAdd4 = 150;
    __SkillModAdd5 = 175;
    __SkillModAdd6 = 200;

// / Client specific definitions
#ifdef __CLIENT
    __RoofAlpha = 200;
    __HideCursor = false;
    //  __DisableLMenu          = false;
    __DisableMouseEvents = false;
    __DisableKeyboardEvents = false;
    __HidePassword = true;
    __PlayerOffAppendix = "|0x44ffffff  (off)";
    __SpritesZoomMax = 2.5f;
    __SpritesZoomMin = 0.2f;
    // __AlwaysRun Specifed in config
    __AlwaysRunMoveDist = 1;
    __AlwaysRunUseDist = 5;
    __CritterFidgetTime = 50000;
    __Anim2CombatBegin = Anim2Actions::BeginCombat;
    __Anim2CombatIdle = Anim2Actions::IdleCombat;
    __Anim2CombatEnd = Anim2Actions::EndCombat;
    __ConsoleHistorySize = 20;
    __DraggableCursor = CursorType::Hand;

    // Chosen lighting
    __ChosenLightColor = 0xFFFFFF;
    __ChosenLightDistance = 4;
    __ChosenLightIntensity = 50;
    __ChosenLightFlags = 0; // LIGHT_* in _defines.fos

    // 3d rendering
    __Enable3dRendering = false;
#endif

    // 814 sdk
    __TimeMultiplier = 20;

    // / Properties behavoiours
    SetPropertyGetCallback(CritterProperty::Strength, Parameters::CritterGetStrength);
    SetPropertyGetCallback(CritterProperty::Perception, Parameters::CritterGetPerception);
    SetPropertyGetCallback(CritterProperty::Endurance, Parameters::CritterGetEndurance);
    SetPropertyGetCallback(CritterProperty::Charisma, Parameters::CritterGetCharisma);
    SetPropertyGetCallback(CritterProperty::Intellect, Parameters::CritterGetIntellegence);
    SetPropertyGetCallback(CritterProperty::Agility, Parameters::CritterGetAgility);
    SetPropertyGetCallback(CritterProperty::Luck, Parameters::CritterGetLuck);
    SetPropertyGetCallback(CritterProperty::MaxLife, Parameters::CritterGetMaxLife);
    SetPropertyGetCallback(CritterProperty::ActionPoints, Parameters::CritterGetActionPoints);
    SetPropertyGetCallback(CritterProperty::IsOverweight, Parameters::CritterGetIsOverweight);
    SetPropertyGetCallback(CritterProperty::CarryWeight, Parameters::CritterGetCarryWeight);
    SetPropertyGetCallback(CritterProperty::MeleeDamage, Parameters::CritterGetMeleeDamage);
    SetPropertyGetCallback(CritterProperty::Sequence, Parameters::CritterGetSequence);
    SetPropertyGetCallback(CritterProperty::HealingRate, Parameters::CritterGetHealingRate);
    SetPropertyGetCallback(CritterProperty::CriticalChance, Parameters::CritterGetCriticalChance);
    SetPropertyGetCallback(CritterProperty::MaxCritical, Parameters::CritterGetMaxCritical);
    SetPropertyGetCallback(CritterProperty::ArmorClass, Parameters::CritterGetArmorClass);
    SetPropertyGetCallback(CritterProperty::DamageResistance, Parameters::CritterGetDamageResistance);
    SetPropertyGetCallback(CritterProperty::NormalResistance, Parameters::CritterGetNormalResistance);
    SetPropertyGetCallback(CritterProperty::PoisonResistance, Parameters::CritterGetPoisonResistance);
    SetPropertyGetCallback(CritterProperty::RadiationResistance, Parameters::CritterGetRadiationResistance);
    SetPropertyGetCallback(CritterProperty::DamageThreshold, Parameters::CritterGetDamageThreshold);
    SetPropertyGetCallback(CritterProperty::IsInjured, Parameters::CritterGetIsInjured);
    SetPropertyGetCallback(CritterProperty::IsAddicted, Parameters::CritterGetIsAddicted);
    SetPropertyGetCallback(CritterProperty::TagSkills, Parameters::CritterGetTagSkills);
    SetPropertyGetCallback(CritterProperty::LookDistance, Parameters::CritterGetLookDistance);

    SetPropertyGetCallback(CritterProperty::CrTypeAlias, CritterTypes::CritterGetCrTypeAlias);

    AddPropertySetCallback(CritterProperty::HandsItemProtoId, Parameters::CritterSetHandsItemProtoId, false);
    AddPropertySetCallback(CritterProperty::HandsItemMode, Parameters::CritterSetHandsItemMode, false);

    SetPropertyGetCallback(CritterProperty::ItemsWeight, Parameters::CritterGetItemsWeight);

#ifndef __CLIENT
    SetPropertyGetCallback(CritterProperty::SneakCoefficient, Parameters::CritterGetSneakCoefficient);
    SetPropertyGetCallback(CritterProperty::BarterCoefficient, Parameters::CritterGetBarterCoefficient);
    AddPropertySetCallback(CritterProperty::Experience, Parameters::CritterSetExperience, false);
    AddPropertySetCallback(CritterProperty::IsHide, Parameters::CritterSetHide, true);
    AddPropertySetCallback(CritterProperty::IsTraitFastShot, Parameters::CritterSetFastShot, true);
    for (uint i = 0; i < CritterPropertyPerks.length(); i++)
        AddPropertySetCallback(CritterPropertyPerks[i], Parameters::CritterSetPerks, false);
    AddPropertySetCallback(CritterProperty::KnownLocations, Parameters::CritterSetKnownLocations, true);
#endif
#ifdef __CLIENT
    AddPropertySetCallback(CritterProperty::Level, Parameters::CritterSetLevel, false);
    AddPropertySetCallback(CritterProperty::Experience, Parameters::CritterSetExperience, false);
    for (uint i = 0; i < CritterPropertyQuests.length(); i++)
        AddPropertySetCallback(CritterPropertyQuests[i], Parameters::CritterSetPropertyQuests, false);
#endif
#ifdef __SERVER
    // / Registration properties
    PlayerRegistration::AddRegistrationProperty(CritterProperty::StrengthBase);
    PlayerRegistration::AddRegistrationProperty(CritterProperty::PerceptionBase);
    PlayerRegistration::AddRegistrationProperty(CritterProperty::EnduranceBase);
    PlayerRegistration::AddRegistrationProperty(CritterProperty::CharismaBase);
    PlayerRegistration::AddRegistrationProperty(CritterProperty::IntellectBase);
    PlayerRegistration::AddRegistrationProperty(CritterProperty::AgilityBase);
    PlayerRegistration::AddRegistrationProperty(CritterProperty::LuckBase);
    PlayerRegistration::AddRegistrationProperty(CritterProperty::TagSkill1);
    PlayerRegistration::AddRegistrationProperty(CritterProperty::TagSkill2);
    PlayerRegistration::AddRegistrationProperty(CritterProperty::TagSkill3);
    for (uint i = 0; i < CritterPropertyTraits.length(); i++)
        PlayerRegistration::AddRegistrationProperty(CritterPropertyTraits[i]);
    PlayerRegistration::AddRegistrationProperty(CritterProperty::Age);
    PlayerRegistration::AddRegistrationProperty(CritterProperty::Gender);
#endif
    // / Enable slots
    AllowSlot(SLOT_INV, false);
    AllowSlot(SLOT_HAND1, true);
    AllowSlot(SLOT_HAND2, false);
    AllowSlot(SLOT_ARMOR, true);

    // Valid name letters
    __ValidNameLettersCommon = "_ .-1234567890";
    __ValidNameLettersCulture1 = "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz";
    __ValidNameLettersCulture2 = "АаБбВвГгДдЕеЁёЖжЗзИиЙйКкЛлМмНнОоПпРрСсТтУуФфХхЦцЧчШшЩщЪъЫыЬьЭэЮюЯя";

    // / Geometry
    InitializeGeometry();
}

#endif // !__MAPPER

// /
// / Mapper initialization
// /

#ifdef __MAPPER

void InitializeGame() // Export
{
    __RoofAlpha = 200;
    __SpritesZoomMax = 10.0f;
    __SpritesZoomMin = 0.2f;
    __Anim2CombatBegin = Anim2Actions::BeginCombat;
    __Anim2CombatIdle = Anim2Actions::IdleCombat;
    __Anim2CombatEnd = Anim2Actions::EndCombat;
    __SplitTilesCollection = true;
    __ConsoleHistorySize = 100;

    // 3d rendering
    __Enable3dRendering = false;

    InitializeGeometry();
}

#endif // __MAPPER

// /
// / Geometry
// /

void InitializeGeometry()
{
    // __MapHexagonal     true - hexagonal, false - square;
    // __MapHexWidth      hex/square width;
    // __MapHexHeight     hex/square height;
    // __MapHexLineHeight hex/square line height;
    // __MapTileOffsX/Y   tile default offsets;
    // __MapRoofOffsX/Y   roof default offsets;
    // __MapRoofSkipSize  default length (in hexes/squares) of roof tiles;
    // __MapCameraAngle   angle for 3d critters rendering;
    // __MapSmoothPath    enable pathfinding path smoothing;
    // __MapDataPrefix    path and prefix for names used for geometry sprites.

    __MapHexagonal = true;
    __MapHexWidth = 32;
    __MapHexHeight = 16;
    __MapHexLineHeight = 12;
    __MapTileOffsX = -8;
    __MapTileOffsY = 34;
    __MapTileStep = 2;
    __MapRoofOffsX = -8;
    __MapRoofOffsY = -64;
    __MapRoofSkipSize = 2;
    __MapCameraAngle = 25.7f;
    __MapSmoothPath = true;
    __MapDataPrefix = "art/geometry/fallout_";
}
