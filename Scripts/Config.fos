// FOS Server Client

#ifndef __COMPILER

void InitializeGame()
{
    // Todo: move settings setup to cmake
    /*
    // / Init global vars
    Settings.ScriptRunSuspendTimeout = 10000; // In milliseconds
    Settings.ScriptRunMessageTimeout = 5000;  // In milliseconds
    Settings.LoggingVars = false;
    
    Settings.DisableTcpNagle = true;
    Settings.DisableZlibCompression = false;
    Settings.FloodSize = 2048; // In bytes
    Settings.NoAnswerShuffle = false;
    Settings.SneakDivider = 6;
    Settings.LookMinimum = 3;
    Settings.TimeoutTransfer = 0;
    Settings.TimeoutBattle = REAL_SECOND(45);
    
    Settings.FixBoyDefaultExperience = 50;
    Settings.LevelCap = 666;
    Settings.LevelCapAddExperience = true;
    Settings.LookNormal = 20;
    Settings.CritterIdleTick = 10000;
    Settings.Breaktime = 1200;
    Settings.ApRegeneration = 7000;
    Settings.RtApCostCritterWalk = 0; // 1 AP == 100, maximim 255
    Settings.RtApCostCritterRun = 0;  // 1 AP == 100, maximim 255
    Settings.RtApCostMoveItemContainer = 0;
    Settings.RtApCostMoveItemInventory = 2;
    Settings.RtApCostPickItem = 4;
    Settings.RtApCostDropItem = 1;
    Settings.RtApCostReloadWeapon = 2;
    Settings.RtApCostPickCritter = 1;
    Settings.RtApCostUseItem = 3;
    Settings.RtApCostUseSkill = 2;
    // Settings.RtAlwaysRun               = false;
    Settings.ApCostAimEyes = 1;
    Settings.ApCostAimHead = 1;
    Settings.ApCostAimGroin = 1;
    Settings.ApCostAimTorso = 1;
    Settings.ApCostAimArms = 1;
    Settings.ApCostAimLegs = 1;
    Settings.HitAimEyes = 60;
    Settings.HitAimHead = 40;
    Settings.HitAimGroin = 30;
    Settings.HitAimTorso = 0;
    Settings.HitAimArms = 30;
    Settings.HitAimLegs = 20;
    
    Settings.RunOnCombat = false;
    Settings.RunOnTransfer = true;
    Settings.GlobalMapWidth = 28;      // Maximum 100
    Settings.GlobalMapHeight = 30;     // Maximum 100
    Settings.GlobalMapZoneLength = 50; // Maximum 500
    
    Settings.GlobalMapMoveTime = 250;
    Settings.EncounterTime = 5000;
    
    Settings.DeadHitPoints = -20;
    Settings.BagRefreshTime = 60; // Real minutes
    Settings.WisperDist = 2;
    Settings.ShoutDist = 400;
    Settings.RegistrationTimeout = 5 * 60; // In real seconds, 0 to disable
    Settings.AccountPlayTime = 10 * 60;    // In real seconds, 0 to disable
    Settings.TalkDistance = 3;
    Settings.NpcMaxTalkers = 1;
    Settings.MinNameLength = 4;  // Minimum 1
    Settings.MaxNameLength = 12; // Maximum 30
    Settings.PermanentDeath = 0; // Disable
    Settings.DlgTalkMinTime = 100000;
    Settings.DlgBarterMinTime = 50000;
    Settings.MinimumOfflineTime = 180000; // 3 minutes
    Settings.MainStoryLineActive = false;
    Settings.NoPvpMaps = true;
    Settings.MaxLifeLevelSoftCap = 36;
    // Look modifiers
    Settings.LookChecks = 0; // See Look checks in _defines.fos
    // Settings.LookChecks |= LOOK_CHECK_DIR; // Nerfe look by directions of look
    Settings.LookDir0 = 0;  // Nerfe 0% of look radius with direct look
    Settings.LookDir1 = 20; // Nerfe 20% of look radius with front side look
    Settings.LookDir2 = 40; // Nerfe 40% of look radius with back side look
    Settings.LookDir3 = 60; // Nerfe 60% of look radius with back look
    Settings.LookDir4 = 60; // Nerfe 60% of look radius with back look (Square geometry)
    // Settings.LookChecks |= LOOK_CHECK_SNEAK_DIR; // Nerfe opponent sneak by directions of look
    Settings.LookSneakDir0 = 90;                    // Nerfe 90% of opponent sneak with direct look
    Settings.LookSneakDir1 = 60;                    // Nerfe 60% of opponent sneak with front side look
    Settings.LookSneakDir2 = 30;                    // Nerfe 30% of opponent sneak with back side look
    Settings.LookSneakDir3 = 0;                     // Nerfe 0% of opponent sneak with back look
    Settings.LookSneakDir4 = 0;                     // Nerfe 0% of opponent sneak with back look (Square geometry)
    Settings.LookChecks |= LOOK_CHECK_SNEAK_WEIGHT; // Nerfe sneak by current weight
    Settings.LookWeight = 10;                       // Lost 1 sneak point per 10 gramm
    // Settings.LookChecks |= LOOK_CHECK_TRACE; // Tracing for wall aviablility
    // Settings.LookChecks |= LOOK_CHECK_SCRIPT; // Allow bool check_look(...) in main.fos, all other defines ignored
    // Settings.LookChecks |= LOOK_CHECK_ITEM_SCRIPT; // Allow bool check_trap_look(...) in main.fos, for items with ITEM_TRAP flag

    // Compare with >=
    Settings.ReputationLoved = 30;
    Settings.ReputationLiked = 15;
    Settings.ReputationAccepted = 1;
    Settings.ReputationNeutral = 0;
    Settings.ReputationAntipathy = -14;
    Settings.ReputationHated = -29;
    // Other is Vilified
    Settings.Singleplayer = false;
    Settings.AlwaysRun = false;
    // Registation values
    Settings.StartSpecialPoints = 40;
    Settings.StartTagSkillPoints = 3;

    // Skill modifiers
    Settings.SkillMaxValue = 300;
    Settings.SkillModAdd2 = 100;
    Settings.SkillModAdd3 = 125;
    Settings.SkillModAdd4 = 150;
    Settings.SkillModAdd5 = 175;
    Settings.SkillModAdd6 = 200;

    // / Client specific definitions
#ifdef __CLIENT
    Settings.RoofAlpha = 200;
    Settings.HideCursor = false;
    //  Settings.DisableLMenu          = false;
    Settings.DisableMouseEvents = false;
    Settings.DisableKeyboardEvents = false;
    Settings.HidePassword = true;
    Settings.PlayerOffAppendix = "|0x44ffffff  (off)";
    Settings.SpritesZoomMax = 2.5f;
    Settings.SpritesZoomMin = 0.2f;
    // Settings.AlwaysRun Specifed in config
    Settings.AlwaysRunMoveDist = 1;
    Settings.AlwaysRunUseDist = 5;
    Settings.CritterFidgetTime = 50000;
    Settings.Anim2CombatBegin = Anim2Actions::BeginCombat;
    Settings.Anim2CombatIdle = Anim2Actions::IdleCombat;
    Settings.Anim2CombatEnd = Anim2Actions::EndCombat;
    Settings.ConsoleHistorySize = 20;
    Settings.DraggableCursor = CursorType::Hand;

    // Chosen lighting
    Settings.ChosenLightColor = 0xFFFFFF;
    Settings.ChosenLightDistance = 4;
    Settings.ChosenLightIntensity = 50;
    Settings.ChosenLightFlags = 0; // LIGHT_* in _defines.fos

    // 3d rendering
    Settings.Enable3dRendering = false;
#endif

    // Valid name letters
    Settings.ValidNameLettersCommon = "_ .-1234567890";
    Settings.ValidNameLettersCulture1 = "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz";
    Settings.ValidNameLettersCulture2 = "АаБбВвГгДдЕеЁёЖжЗзИиЙйКкЛлМмНнОоПпРрСсТтУуФфХхЦцЧчШшЩщЪъЫыЬьЭэЮюЯя";

    // / Enable slots
    Settings.CritterSlotEnabled[SLOT_INV] = false;
    Settings.CritterSlotEnabled[SLOT_HAND1] = false;
    Settings.CritterSlotEnabled[SLOT_HAND2] = false;
    Settings.CritterSlotEnabled[SLOT_ARMOR] = false;
    
    // 814 sdk
    Settings.TimeMultiplier = 20;
    */

    // Todo: improve new property callback hooks
    /*
    // / Properties behavoiours
    SetPropertyGetCallback(CritterProperty::Strength, Parameters::CritterGetStrength);
    SetPropertyGetCallback(CritterProperty::Perception, Parameters::CritterGetPerception);
    SetPropertyGetCallback(CritterProperty::Endurance, Parameters::CritterGetEndurance);
    SetPropertyGetCallback(CritterProperty::Charisma, Parameters::CritterGetCharisma);
    SetPropertyGetCallback(CritterProperty::Intellect, Parameters::CritterGetIntellegence);
    SetPropertyGetCallback(CritterProperty::Agility, Parameters::CritterGetAgility);
    SetPropertyGetCallback(CritterProperty::Luck, Parameters::CritterGetLuck);
    SetPropertyGetCallback(CritterProperty::MaxLife, Parameters::CritterGetMaxLife);
    SetPropertyGetCallback(CritterProperty::ActionPoints, Parameters::CritterGetActionPoints);
    SetPropertyGetCallback(CritterProperty::IsOverweight, Parameters::CritterGetIsOverweight);
    SetPropertyGetCallback(CritterProperty::CarryWeight, Parameters::CritterGetCarryWeight);
    SetPropertyGetCallback(CritterProperty::MeleeDamage, Parameters::CritterGetMeleeDamage);
    SetPropertyGetCallback(CritterProperty::Sequence, Parameters::CritterGetSequence);
    SetPropertyGetCallback(CritterProperty::HealingRate, Parameters::CritterGetHealingRate);
    SetPropertyGetCallback(CritterProperty::CriticalChance, Parameters::CritterGetCriticalChance);
    SetPropertyGetCallback(CritterProperty::MaxCritical, Parameters::CritterGetMaxCritical);
    SetPropertyGetCallback(CritterProperty::ArmorClass, Parameters::CritterGetArmorClass);
    SetPropertyGetCallback(CritterProperty::DamageResistance, Parameters::CritterGetDamageResistance);
    SetPropertyGetCallback(CritterProperty::NormalResistance, Parameters::CritterGetNormalResistance);
    SetPropertyGetCallback(CritterProperty::PoisonResistance, Parameters::CritterGetPoisonResistance);
    SetPropertyGetCallback(CritterProperty::RadiationResistance, Parameters::CritterGetRadiationResistance);
    SetPropertyGetCallback(CritterProperty::DamageThreshold, Parameters::CritterGetDamageThreshold);
    SetPropertyGetCallback(CritterProperty::IsInjured, Parameters::CritterGetIsInjured);
    SetPropertyGetCallback(CritterProperty::IsAddicted, Parameters::CritterGetIsAddicted);
    SetPropertyGetCallback(CritterProperty::TagSkills, Parameters::CritterGetTagSkills);
    SetPropertyGetCallback(CritterProperty::LookDistance, Parameters::CritterGetLookDistance);

    SetPropertyGetCallback(CritterProperty::CrTypeAlias, CritterTypes::CritterGetCrTypeAlias);

    AddPropertySetCallback(CritterProperty::HandsItemProtoId, Parameters::CritterSetHandsItemProtoId, false);
    AddPropertySetCallback(CritterProperty::HandsItemMode, Parameters::CritterSetHandsItemMode, false);

    SetPropertyGetCallback(CritterProperty::ItemsWeight, Parameters::CritterGetItemsWeight);

#ifndef __CLIENT
    SetPropertyGetCallback(CritterProperty::SneakCoefficient, Parameters::CritterGetSneakCoefficient);
    SetPropertyGetCallback(CritterProperty::BarterCoefficient, Parameters::CritterGetBarterCoefficient);
    AddPropertySetCallback(CritterProperty::Experience, Parameters::CritterSetExperience, false);
    AddPropertySetCallback(CritterProperty::IsHide, Parameters::CritterSetHide, true);
    AddPropertySetCallback(CritterProperty::IsTraitFastShot, Parameters::CritterSetFastShot, true);
    for (uint i = 0; i < CritterPropertyPerks.length(); i++)
        AddPropertySetCallback(CritterPropertyPerks[i], Parameters::CritterSetPerks, false);
    AddPropertySetCallback(CritterProperty::KnownLocations, Parameters::CritterSetKnownLocations, true);
#endif
#ifdef __CLIENT
    AddPropertySetCallback(CritterProperty::Level, Parameters::CritterSetLevel, false);
    AddPropertySetCallback(CritterProperty::Experience, Parameters::CritterSetExperience, false);
    for (uint i = 0; i < CritterPropertyQuests.length(); i++)
        AddPropertySetCallback(CritterPropertyQuests[i], Parameters::CritterSetPropertyQuests, false);
#endif
    */

#ifdef __SERVER
    // / Registration properties
    PlayerRegistration::AddRegistrationProperty(CritterProperty::StrengthBase);
    PlayerRegistration::AddRegistrationProperty(CritterProperty::PerceptionBase);
    PlayerRegistration::AddRegistrationProperty(CritterProperty::EnduranceBase);
    PlayerRegistration::AddRegistrationProperty(CritterProperty::CharismaBase);
    PlayerRegistration::AddRegistrationProperty(CritterProperty::IntellectBase);
    PlayerRegistration::AddRegistrationProperty(CritterProperty::AgilityBase);
    PlayerRegistration::AddRegistrationProperty(CritterProperty::LuckBase);
    PlayerRegistration::AddRegistrationProperty(CritterProperty::TagSkill1);
    PlayerRegistration::AddRegistrationProperty(CritterProperty::TagSkill2);
    PlayerRegistration::AddRegistrationProperty(CritterProperty::TagSkill3);
    for (uint i = 0; i < CritterPropertyTraits.length(); i++)
        PlayerRegistration::AddRegistrationProperty(CritterPropertyTraits[i]);
    PlayerRegistration::AddRegistrationProperty(CritterProperty::Age);
    PlayerRegistration::AddRegistrationProperty(CritterProperty::Gender);
#endif
}
