// FOS Server


/*
   Автомат нюка-колы
   Игрок может использовать монету на автомате, в этом случае, если пройдет проверку по удаче получит одну бутылку нюка-колы.
   Если проверка не пройдена, автомат выстрелит в него бутылкой. Бутылка летит на HIT_RANGE гексов в направлении игрока.
   Если игрок не пройдет проверку на ловкость, получит от MIN_DMG до MAX_DMG повреждений.
   Если на пути бутылки стоит другой криттер, получить повреждения может он. Игрок, использовавший монетку будет считаться атакующим.
 */

#pragma property Critter PrivateServer uint NukeStock
#pragma property Critter PrivateServer uint NukeRestockTime

#define ONE_GAME_WEEK          ( 60 * 60 * 24 * 7 )
#define MAX_STOCK              ( 10 )
#define HIT_RANGE              ( 3 )                                   // расстояние, на которое "стреляет" автомат
#define MIN_DMG                ( 1 )
#define MAX_DMG                ( 75 )

#define STR_USE_CAPS           ( 101 )
#define STR_GET_NUKE           ( 102 )
#define STR_HITTED             ( 103 )
#define STR_DODGE              ( 104 )
#define STR_SOMEBODY_DODGE     ( 105 )
#define STR_EMPTY              ( 106 )

#define PLAYERS_SRCH_RADIUS    ( 10 )

#define NPC_NAME               # (dialogId)            ( ( dialogId ) * 1000 + 100 ) // поиск имени НПЦ в файле FODLG.msg
#define _CheckStat             # ( cr, stat, bonus )( Random( 1, 10 ) < cr.GetAsInt( stat ) + bonus )

////import void InjureCritter0( Critter cr, uint dmg, uint dmgType, uint8 dir, uint attackerId ) from "Combat";

bool _UseCapsOnNukeMachine( Critter player, Item scenery, int skill, Item item )
{
    if( !valid( item ) || item.ProtoId != Content::Item::bottle_caps )
        return false;

    if( player.NukeRestockTime < __FullSecond )
    {
        player.NukeStock = uint( Random( MAX_STOCK / 2, MAX_STOCK ) );
        player.NukeRestockTime = __FullSecond + ONE_GAME_WEEK;
    }

    if( player.NukeStock > 0 )
    {
        _CritDeleteItem( player, Content::Item::bottle_caps, 1 );

        player.NukeStock -= 1;
        player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_USE_CAPS );

        if( _CheckStat( player, CritterProperty::Luck, 0 ) )
        {
            _CritAddItem( player, Content::Item::nuka_cola, 1 );
            player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_GET_NUKE );
            return true;

        }
        else
        {
            TryHitSomeOne( player, scenery );
            return true;
        }
    }
    else
    {
        player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_EMPTY );
        return true;
    }
}

void TryHitSomeOne( Critter player, Item nukeMashine )
{
    Map map = player.GetMap();
    if( !valid( map ) )
        return;

    uint16 x0 = nukeMashine.HexX;
    uint16 y0 = nukeMashine.HexY;

    uint16 x1 = x0;
    uint16 y1 = y0;

    uint   dir = GetDirection( x0, y0, player.HexX, player.HexY );
    bool   targetHitted = false;

    map.MoveHexByDir( x1, y1, dir, 3 );
    map.RunFlyEffect( Content::Item::flying_knife, null, null, x0, y0, x1, y1 );

    for( uint i = 0; i < HIT_RANGE; i++ )
    {
        map.MoveHexByDir( x0, y0, dir, 1 );
        Critter target = map.GetCritter( x0, y0 );
        if( valid( target ) && !targetHitted )
        {
            if( target.IsLife() )
            {
                if( _CheckStat( target, CritterProperty::Agility, 0 ) )
                {
                    target.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_DODGE );
                    _CritAnimate( target, Anim2Actions::DodgeFront );

                    Critter[] critters = {};
                    if( Obsolete::GetCrittersHex ( map,  target.HexX, target.HexY, PLAYERS_SRCH_RADIUS, FIND_ALL | FIND_ONLY_PLAYERS,   critters  ) > 0 )
                    {
                        string lexems = "$name " + ( target.IsPlayer() ? Obsolete::GetPlayerName( target.Id ) : ( target.DialogId > 0 ? "@msg DLG " + NPC_NAME( target.DialogId ) + " @" : "" ) );
                        for( uint j = 0; j < critters.length(); j++ )
                            if( critters[ j ].Id != target.Id )
                                critters[ j ].SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SOMEBODY_DODGE, lexems );
                    }
                }
                else
                {
                    target.SayMsg( SAY_SHOUT, TEXTMSG_TEXT, STR_HITTED );
                    targetHitted = true;
                    Combat::InjureCritter( target, Random( MIN_DMG, MAX_DMG ), DamageTypes::Normal, dir, player.Id );
                    map.AddItem( x0, y0, Content::Item::nuka_cola, 1 );
                    break;
                }
            }
        }
    }
}
