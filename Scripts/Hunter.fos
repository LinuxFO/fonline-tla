// FOS Server Sort 2
// Author: rifleman17
// Квесты цепочки "Лучший охотник Пустоши."

#pragma property Critter Protected     uint8 BarterLourensRats1          Group = Quests, Quest = 5200, Max = 4
#pragma property Critter Protected     uint8 ModLourenceRatsFlute        Group = Quests, Quest = 3317, Max = 3
#pragma property Critter PrivateServer uint8 BarterLourensRatBodycount   Max = 11
#pragma property Critter PrivateServer uint  ModHoughRatsFluteTimeout
#pragma property Critter PrivateServer uint  ModLourenceToxinTimeout
#pragma property Critter PrivateServer uint  ModLourenceRatsFluteCounter Max = 5
#pragma property Critter PrivateServer uint  ModLourenceLureActive

#pragma property Item PrivateServer uint  QHunterCountFluteUse

#define MSG_COM2ME    ( 33 )

// #define DL            # (s) ( Log( "" + s ) )
#define DL            # ( s )

// Часть первая: Тестовое задание

void dlg_Colorize( Critter player, Critter npc, string lexems )
{
    if( !IS_DIALOG_GENERATED( lexems ) )
        return;
    lexems = "$colorHugh" + "|" + COLOR_TEXT + " $colorLourence" + "|" + COLOR_CONTOUR_YELLOW + " ";
}

void OnCritterKilled( Critter cr, Critter killer )
{
    if( valid( killer ) && cr.IsNpc() && killer.IsPlayer() && cr.ModelNameBase == CRTYPE_MOLESKIN_RAT_BIG && killer.BarterLourensRats1 == 1 )
    {
        if( killer.BarterLourensRatBodycount < 10 )
            killer.BarterLourensRatBodycount += 1;
        else
            killer.BarterLourensRats1 = 2;
    }
}

void r_Explode( Critter player, Critter npc )
{
    if( valid( npc ) )
    {
        SendMessage::SendMessage( npc,  MSG_COM2ME, player.Id, MESSAGE_TO_ALL_ON_MAP  );
        npc.AddTimeEvent( cte_Explode, REAL_SECOND( 3 ), 0 );
    }
}

uint cte_Explode( Critter cr, int identifier, uint& rate )
{
    Map map = cr.GetMap();
    if( valid( map ) )
    {
        Explode::Explode( cr.GetMap(), cr.HexX, cr.HexY, null, Content::Item::active_dynamite, cr.Var4, Random( 0, 50 ), Random( 0, 1 ) );
        cr.AddTimeEvent( cte_Comment, REAL_SECOND( 2 ), 0 );

    }
    return 0;
}

uint cte_Comment( Critter cr, int identifier, uint& rate )
{
    cr.SayMsg( SAY_NORM, TEXTMSG_DLG, DLGSTR( cr.DialogId, 1 ) );
    return 0;
}

////import void _TraderInit0( Critter trader, bool firstTime ) from "Trader";

// Скрипт торговли для Хьюза
void _HoughInit( Critter cr, bool firstTime )
{
    Trader::_TraderInit( cr, firstTime );
    __EventCritterBarter.SubscribeToTrader( cr, _HoughBarter );
    cr.MaxTalkers       = 1;
    cr.IsBarterOnlyCash = true;
    cr.IsNoBarter       = false;
    cr.IsNoDrop         = true;
    cr.IsNoSteal        = true;
    cr.IsNoLoot         = true;
    __EventCritterMessage.SubscribeToCritter( cr, _HoughMessage );
    __EventNpcPlaneEnd.SubscribeToCritter( cr, _HoughPlaneEnd );
}

void _HoughMessage( Critter cr, Critter fromCr, int message, int value )
{
    if( message == MSG_COM2ME )
    {
        NpcPlanes::AddWalkPlane( cr, 17, fromCr.HexX, fromCr.HexY, GetDirection( cr.HexX, cr.HexY, fromCr.HexX, fromCr.HexY ), false, 1 );
    }
}

bool _HoughPlaneEnd( Critter cr, int planeId, int reason, Critter someCr, Item someItem )
{
	NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(cr, planeId);

    if( plane.Priority == 17 && reason == REASON_SUCCESS )
    {
        DL( "moing end" );
        NpcPlanes::AddMiscPlane( cr, 0, __FullSecond + REAL_SECOND( 3 ), null );
    }
    return true;
}

bool _HoughBarter( Critter cr, Critter barterCr, bool attach, uint barterCount )
{
    if( attach )
    {
        uint[] values = { cr.Id };
        // Сюда добавить добавление в инвентарь различных девайсов
        // 1. Дудка
        Item flute =  _CritGetItem( cr, Content::Item::lourence_flute );
        Item fluteBarter = _CritGetItem( barterCr, Content::Item::lourence_flute );
        if( !valid( flute ) && !valid( fluteBarter ) )
        {
            if( barterCr.ModHoughRatsFluteTimeout < __FullSecond && barterCr.ModHoughRatsFluteTimeout > 0 )
            {
                barterCr.ModHoughRatsFluteTimeout = __FullSecond + REAL_HOUR( Random( 12, 28 ) - barterCr.Luck );
                flute = cr.AddItem( Content::Item::lourence_flute, 1 );
                if( valid( flute ) )
                    values.insertLast( flute.Id );
            }
        }
        // 2. Cупертоксин
        if( barterCr.ModLourenceFloater > 0 )
        {
            if( barterCr.ModLourenceToxinTimeout < __FullSecond && barterCr.ModLourenceToxinTimeout > 0 )
            {
                if( barterCr.ModLourenceToxinRecipe == 1 )
                {
                    Item toxine =  _CritGetItem( cr, Content::Item::danton_poison );
                    Item toxineBarter = _CritGetItem( barterCr, Content::Item::danton_poison );
                    if( !valid( toxine ) && !valid( toxineBarter ) )
                    {
                        barterCr.ModLourenceToxinTimeout = __FullSecond + REAL_HOUR( Random( 12, 28 ) - barterCr.Luck );
                        toxine = cr.AddItem( Content::Item::danton_poison, 5 );
                        if( valid( toxine ) )
                            values.insertLast( toxine.Id );
                    }
                }
                Item sToxine =  _CritGetItem( cr, Content::Item::supertoxine );
                Item sToxineBarter = _CritGetItem( barterCr, Content::Item::supertoxine );
                if( !valid( sToxine ) && !valid( sToxineBarter ) )
                {
                    barterCr.ModLourenceToxinTimeout = __FullSecond + CLAMP( REAL_HOUR( Random( 10, 15 ) - barterCr.Luck ), 1, 30 );
                    sToxine = cr.AddItem( Content::Item::supertoxine, 1 );
                    if( valid( sToxine ) )
                        values.insertLast( sToxine.Id );
                }
            }

        }

        // После всех проверок
        if( values.length() > 1 )
            DeferredCall( MINUTE_TICKS( 10 ), DeleteItemsHough, values );
    }
    else
    {
        Item money = _CritGetItem( cr, Content::Item::bottle_caps );
        if( valid( money ) )
            DeleteItem( money );

    }
    return true;
}

void DeleteItemsHough( uint[] values )
{
    Critter cr = GetCritter( values[ 0 ] );
    if( valid( cr ) )
    {
        for( uint i = 1, l = values.length(); i < l; i++ )
        {
            Item item = GetItem( values[ i ] );
            if( valid( item ) && item.CritId == cr.Id )
                DeleteItem( item );
        }
    }
}

// Скрипт лоуренса
void _LourenceInit( Critter cr, bool firstTime )
{
    cr.MaxTalkers       = 1;
    cr.IsBarterOnlyCash = true;
    cr.IsNoBarter       = false;
    cr.IsNoDrop         = true;
    cr.IsNoSteal        = true;
    cr.IsNoLoot         = true;
    hash[] sellItems = { Content::Item::lighter, Content::Item::water_flask, Content::Item::blue_condom, Content::Item::cosmetic_case, Content::Item::deck_of_cards, Content::Item::mirror_shades, Content::Item::necklace, Content::Item::watch };
    hash[] buyItems = { Content::Item::brahmin_skin, Content::Item::meat, Content::Item::gecko_pelt, Content::Item::golden_gecko_pelt, Content::Item::radscorpion_parts };
    LimitedBarter::SaveBarterLimit( cr.Id, sellItems, buyItems );
}


// Вертиберд
void _VertiberdInit( Item item, bool firstTime )
{
    item.CarIsNoLockpick = true;
    __EventCritterUseItem.SubscribeToItem( item, _VertiberdUse );
    __EventCritterUseSkill.SubscribeToOnItem( item, _VertiberdSkill );
    item.Info = 2;
}

bool _VertiberdUse( Critter critter, Item item, Critter onCritter, Item onItem, const Item onScenery, uint param )
{
    critter.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrUseNothing );
    return true;
}

bool _VertiberdSkill( Critter critter, CritterProperty skill, Critter onCritter, Item onItem, const Item onScenery )
{
    critter.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrUseNothing );
    return true;
}

// Ультразвуковой свисток
void _FluteInit( Item item, bool firstTime )
{
    if( firstTime )
    {
        item.QHunterCountFluteUse = 10;
        item.Info = 2;
        item.Lexems = "$count" + item.QHunterCountFluteUse;
    }
    __EventCritterUseItem.SubscribeToItem( item, _FluteUse );
}

#define STR_RAT_CATCHED    ( 27 ) // Вы применили ультразвуковой гипнотизатор на мутировавшую крысу. Теперь ее можно положить себе в рюкзак. Если, конечно, она не очухается.
#define STR_EMPTY          ( 28 ) // В свистке закончились заряды. При последнем неаккуратном применении прибор был уничтожен.
#define STR_WRONGRAT       ( 29 ) // Крыса не реагирует на воздействие гипнотизатора. Попробуйте найти менее устойчивый экземпляр, где-нибудь в Пустоши.

bool _FluteUse( Critter cr, Item item, Critter onCritter, Item onItem, const Item onScenery, uint param )
{
    if( valid( onCritter ) && onCritter.IsNpc() &&
        onCritter.ModelNameBase == CRTYPE_RAT && onCritter.IsLife() )
    {
        item.QHunterCountFluteUse -= 1;
        item.Lexems = "$count" + item.QHunterCountFluteUse;
        Map map = onCritter.GetMap();
        if( valid( map ) )
        {
            Location loc = map.GetLocation();
            if( valid( loc ) && loc.AutoGarbage )
            {
                Item rat = map.AddItem( onCritter.HexX, onCritter.HexY, Content::Item::rat_grenade, 1 );
                if( valid( rat ) )
                    rat.SetScript( RatGrenade::_RatGrenadeInit );
                DeleteNpc( onCritter );
                cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_RAT_CATCHED );
                if( cr.ModLourenceRatsFlute == 1 && cr.ModLourenceRatsFluteCounter < 5 )
                {
                    cr.ModLourenceRatsFluteCounter += 1;
                    if( cr.ModLourenceRatsFluteCounter == 5 )
                        cr.ModLourenceRatsFlute = 2;
                }
            }
            else
            {
                cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_WRONGRAT );
            }
        }
        if( item.QHunterCountFluteUse <= 0 )
        {
            DeleteItem( item );
            cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_EMPTY );
        }
        return true;
    }
    return false;
}

// Диалоги, установка переменных, отвечающих за частоту появления разных предметов в инвентаре Хьюза
void r_SetTO( Critter player, Critter npc, int timeoutNum, int realHours )
{
    player.SetAsInt( CritterProperty( timeoutNum ), __FullSecond + REAL_HOUR( realHours ) );
    DL( "" + ( __FullSecond + REAL_HOUR( realHours ) ) );
}

// Сдача крыс лоуренсу при выполнении квеста "пляши под мою дудку"
void r_AwakeRats( Critter cr, Critter npc )
{
    if( valid( npc ) && NpcPlanes::IsNoPlanes( npc ) )
    {
        Map map = npc.GetMap();
        if( valid( map ) )
        {
            for( uint i = 0; i < 5; i++ )
            {
                uint16 x = npc.HexX;
                uint16 y = npc.HexY;
                if( Caravan::GetFreeHex( map, 2, x, y ) )
                {
                    uint8    dir = GetDirection( x, y, npc.HexX, npc.HexY );
                    Critter rat = map.AddNpc( Content::Critter::RegularRat, x, y, dir, null);
        rat.SetScript( RatGrenade::_RatInit );
                    if( valid( rat ) )
                    {
                        NpcPlanes::AddAttackPlane( rat, 0, npc );
                    }
                }
            }
            npc.AddTimeEvent( cte_Comment1, REAL_SECOND( 3 ), 0 );
        }
    }
}

uint cte_Comment1( Critter cr, int identifier, uint& rate )
{
    cr.SayMsg( SAY_NORM, TEXTMSG_DLG, DLGSTR( cr.DialogId, 2 ) );
    return 0;
}

// Приманка лоуренса

#define STR_WRONG_PLACE    ( 33 )  // Неудачно выбрано место для использования приманки.
#define STR_SUCCESS        ( 34 )  // Вы открываете крышку и у вас кружится голова от ужасной вони. Вы выливаете содержимое банки на свою одежду. Теперь остается только ждать, пока появятся крысы.
#define STR_FOO            ( 35 )  // Фу!!! Чем это от тебя воняет, lex name??!!Ну и вонища!!!Проклятье! lex name!! Отойди от меня на другую сторону улицы. Или лучше вали куда подальше!Дерьмо! Кто-то навалил в штаны?Буэ... Меня сейчас вырвет! lex name, пошел вон!Что это за ужасный запах?!Что это за невыносимая вонь?*Зажимает ноздри пальцами*Уберите это дерьмо от меня!!
#define ENTIRE_SPAWN       ( 17 )
#define ENTIRE_MOVETO      ( 18 )

void _LureInit( Item item, bool firstTime )
{
    __EventCritterUseItem.SubscribeToItem( item, _LureUse );
}

bool _LureUse( Critter cr, Item item, Critter onCritter, Item onItem, const Item onScenery, uint param )
{
    if( valid( onCritter ) || valid( onItem ) || valid( onScenery ) )
        return false;
    Map map = cr.GetMap();
    if( valid( map ) && map.ProtoId == Content::Map::q_rats_out && Scenery::GetMapSceneries( map,  cr.HexX, cr.HexY, 1, 4777  ).length() > 0 )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_SUCCESS );
        DeleteItem( item );
        SavedDeferredCall( SECOND_TICKS( 10 ), MoveRat, map.GetLocation().Id );
        cr.ModLourenceLureActive = __FullSecond + REAL_HOUR( 3 );
        cr.AddTimeEvent( cte_Lure, REAL_SECOND( 30 ), 0 );
    }
    cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_WRONG_PLACE );
    return true;
}

uint cte_Lure( Critter cr, int identifier, uint& rate )
{
    if( cr.ModLourenceLureActive > __FullSecond )
    {
        Map map = cr.GetMap();
        if( valid( map ) )
        {
            Critter[] npc = {};
            if( Obsolete::GetCrittersHex ( map,  cr.HexX, cr.HexY, 5, FIND_LIFE | FIND_ONLY_NPC, npc  ) > 0 )
            {
                Critter crit = npc[ Random( 0, npc.length() - 1 ) ];
                if( valid( crit ) )
                    crit.SayMsg( SAY_NORM, TEXTMSG_TEXT, STR_FOO, "$name" + Obsolete::GetPlayerName( cr.Id ) );
            }
        }
        return REAL_MINUTE( 2 );
    }
    return 0;
}

void MoveRat( uint value )
{
    Location loc = GetLocation( value );
    if( valid( loc ) )
    {
        Map map = loc.GetMapByIndex( 1 );
        Map mapTo = loc.GetMapByIndex( 0 );
        if( valid( map ) && valid( mapTo ) )
        {
            Critter[] rats = {};
            Critter[] allies = {};
            Obsolete::GetCritters( map,  0, FIND_ALL, allies  );
            if( Obsolete::GetCritters( map,  0, FIND_ALL | FIND_ONLY_NPC, rats  ) > 0 )
            {
                for( uint i = 0, l = rats.length(); i < l && i < 5; i++ )
                {
                    Critter cr = rats[ i ];
                    if( valid( cr ) )
                    {
                        uint16 x = 0;
                        uint16 y = 0;
                        Entire::MapGetEntireCoords( mapTo,  ENTIRE_SPAWN, 0, x, y  );
                        if( Caravan::GetFreeHex( mapTo, 3, x, y ) )
                        {
                            Obsolete::CritterTransitToMapCoords( cr, mapTo.Id, x, y, Random( 0, 5 )  );
                            cr.IsNoHome = true;
                            cr.AddTimeEvent( cte_move, REAL_SECOND( 30 ), 0 );
                            for( uint j = 0, k = allies.length(); j < k; j++ )
                            {
                                Critter crit = allies[ j ];
                                if( valid( crit ) )
                                {
                                    if( crit.IsPlayer() || crit.NpcRole == 401 )
                                    {
                                        NpcPlanes::AddAttackPlane( cr, 0, crit );
                                        EnemyStack::AddEnemyToStack( cr,  crit.Id  );
                                    }
                                }
                            }
                        }
                    }
                }
                SavedDeferredCall( SECOND_TICKS( Random( 1, 3 ) ), MoveRat, value );
            }
        }
    }
}

uint cte_move( Critter cr, int identifier, uint& rate )
{
    if( cr.IsDead() )
        return 0;
    if( NpcPlanes::IsNoPlanes( cr ) )
    {
        Map   map = cr.GetMap();
        uint16 x = cr.HexX;
        uint16 y = cr.HexY;
        if( valid( map ) && Entire::MapGetEntireCoords( map,  ENTIRE_MOVETO, 0, x, y  ) )
        {
            if( Caravan::GetFreeHex( map, 15, x, y ) )
            {
                NpcPlanes::AddWalkPlane( cr, 17, x, y, Random( 0, 5 ), false, 0 );
            }
        }
    }
    return REAL_SECOND( 30 );
}
