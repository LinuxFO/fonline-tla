// FOS Server Sort 3
// Author: rifleman17

#pragma property Critter Protected uint8 GEReplExplodeTank Group = Quests, Quest = 1826, Max = 4
#pragma property Critter Protected uint8 GEReplNopasaran   Group = Quests, Quest = 1829, Max = 7
#pragma property Critter Protected uint8 GEReplFindstation Group = Quests, Quest = 1827, Max = 2

#pragma property Critter PrivateServer uint8 GEReplNotifictions            Max = 3
#pragma property Critter PrivateServer uint  GEReplEntireZombie
#pragma property Critter PrivateServer uint  GEReplLastOrder
#pragma property Critter PrivateServer bool  GEReplIsAddedAttackPlane

#pragma content Critter Zombie // Прототип критттера-зомби

#define PHASE_NOT_STARTED      ( 0 )
#define PHASE_STATE_RUNNING    ( 1 )
#define PHASE_STOPPED          ( 2 )

#define ENTIRE_0			   ( 0 )
#define ENTIRE_QGIVER          ( 140 )
#define ENTIRE_GUARD           ( 141 )
#define ENTIRE_SCIENTIST       ( 142 )
#define ENTIRE_DEAD_GUARD      ( 143 )
#define ENTIRE_DEAD_ZOMBIE     ( 144 )
#define ENTIRE_ZOMBIE_0        ( 145 ) // Место спавна и первоначальных брожений
#define ENTIRE_ZOMBIE_1        ( 146 ) // Первая точка, к которой идут гули
#define ENTIRE_ZOMBIE_2        ( 147 ) // Вторая точка
#define ENTIRE_ZOMBIE_3        ( 148 ) // Третья, после этого гули выбираются на поверхность
#define ENTIRE_SPECIAL		   ( 288 ) 
#define ENTIRE_ZOMBIE_EXIT     ( 289 ) // Гекс, с которого гули выходят на глобал

#define EVENT_ZOMBIE_STOP      ( 12 )

#define ENTIRE_SMOLETT         ( 300 )
#define ENTIRE_SCIENTIST       ( 301 )
#define ENTIRE_HUB             ( 302 )

#define ENTIRE_WARIOR          ( 303 )
#define ENTIRE_LOOK_TO         ( 304 )
#define NPC_ROLE_DEF           ( 304 )              // Роль для всех временных нпц на поверхности

#define TIME_MOVE              ( REAL_MINUTE( 1 ) ) // Время, после которого гули меняют свое положение

#define MSG_ALARM              ( 300 )              // Номер сообщения, на которое зомби реагируют

#define EVENT_ZOMBIE           ( 11 )
#define ROLE_ZOMBIE            ( 123 )
//#define COLOR_RGB               # ( r, g, b )( uint( ( 0xFF << 24 ) | ( ( ( r )  0xFF ) << 16 ) | ( ( ( g )  0xFF ) << 8 ) | ( ( b )  0xFF ) ) )

#define DL                     # (s) ( Log( "GE: " + s ) )
//#define DL                     # ( s )

const uint[] colorsReplicator =
{
    25599, 25500, COLOR_RGB( 0, 0xFF, 0x99 ), COLOR_RGB( 0, 0xFF, 0x99 ), COLOR_RGB( 0x33, 0xCC, 0xCC ),
    COLOR_RGB( 0x99, 0x99, 0xff ), COLOR_RGB( 0, 0xCC, 0x66 )
};

const uint[][] entiresSandbags =
{
    { 149, 158 },
    { 158, 162 },
    { 163, 167 },
    { 170, 177 }
};


// GameEvent
void BeginEvent()
{
    SetReplicationAbandoned();
}

void e_StopEvent()
{
    // Остановка эвента
    StopEvent();
}

void SetReplicationAbandoned()
{
    Globals.GEReplStationStatus = true;
    Location loc = GetLocationByPid( Content::Location::replication_4, 0 );
    if( valid( loc ) )
    {
        Map map = loc.GetMapByIndex( 0 );
        if( valid( map ) )
        {
            // Расположение укреплений из мешков
            for( uint i = 0, l = entiresSandbags.length(); i < l; i++ )
                for( uint j = entiresSandbags[ i ][ 0 ], k = entiresSandbags[ i ][ 1 ]; j <= k; j++ )
                {
                    if( j > entiresSandbags[ i ][ 0 ] )
                        PlaceSandbags( map, j - 1, j, 3 );
                }

        }
        // Расстановка нпц
        // Смоллет
        uint16 xC = 0;
        uint16 yC = 0;
        Entire::GetEntireFreeHex( map, ENTIRE_LOOK_TO, xC, yC );

        uint16 hx = 0;
        uint16 hy = 0;
        if( Entire::GetEntireFreeHex( map, ENTIRE_SMOLETT, hx, hy ) )
        {
            int[] props =
            {
                CritterProperty::ReplicationTime, 5, CritterProperty::DialogId, Content::Dialog::repl_smallet,
                CritterProperty::NpcRole, NPC_ROLE_DEF, CritterProperty::TeamId, Teams::ReplictionHubb,
                CritterProperty::BagId, Bags::VaultCityMilitary, CritterProperty::IsNoLoot, 1
            };
            map.AddNpc( Content::Critter::BlackArmoredRebel, hx, hy, GetDirection( hx, hy, xC, yC ), TlaExtended::GetCritPropsDict(props));
        }
        Entire::Entire[] entires = {};
        if( Obsolete::ParseEntires( map, entires, ENTIRE_WARIOR ) > 0 )
        {
            for( uint i = 0, l = entires.length(); i < l; i++ )
            {
                int[] props =
                {
                    CritterProperty::ReplicationTime, 5, CritterProperty::DialogId, Content::Dialog::repl_ewarrior,
                    CritterProperty::NpcRole, NPC_ROLE_DEF, CritterProperty::TeamId, Teams::ReplictionHubb,
                    CritterProperty::BagId, 42, CritterProperty::IsNoLoot, 1
                };
                map.AddNpc( Content::Critter::CaveRobber_male_3, entires[ i ].HexX, entires[ i ].HexY, GetDirection( entires[ i ].HexX, entires[ i ].HexY, xC, yC ), TlaExtended::GetCritPropsDict(props));
            }
        }
        entires.clear();
        if( Obsolete::ParseEntires( map, entires, ENTIRE_HUB ) > 0 )
        {
            for( uint i = 0, l = entires.length(); i < l; i++ )
            {
                int[] props =
                {
                    CritterProperty::ReplicationTime, 5, CritterProperty::DialogId, Content::Dialog::repl_ehub,
                    CritterProperty::NpcRole, NPC_ROLE_DEF, CritterProperty::TeamId, Teams::ReplictionHubb,
                    CritterProperty::BagId, Bags::NavarroEnclavePatrolMale2, CritterProperty::IsNoLoot, 1
                };
                map.AddNpc( Content::Critter::Critter_485, entires[ i ].HexX, entires[ i ].HexY, GetDirection( entires[ i ].HexX, entires[ i ].HexY, xC, yC ), TlaExtended::GetCritPropsDict(props));
            }
        }
        if( Entire::GetEntireFreeHex( map, ENTIRE_SCIENTIST, hx, hy ) )
        {
            int[] props =
            {
                CritterProperty::ReplicationTime, 5, CritterProperty::DialogId, Content::Dialog::repl_escientist,
                CritterProperty::NpcRole, NPC_ROLE_DEF, CritterProperty::TeamId, Teams::ReplictionHubb,
                CritterProperty::BagId, Bags::NavarroEnclavePatrolMale2, CritterProperty::IsNoLoot, 1
            };
            map.AddNpc( Content::Critter::ShiLabTech, hx, hy, GetDirection( hx, hy, xC, yC ), TlaExtended::GetCritPropsDict(props));
        }
        map = loc.GetMapByIndex( 2 );
        if( valid( map ) )
        {
            PlaceReplicatorTanks( map );
            map.SetScript ( _MapInit );
        }
    }
}

void PlaceSandbags( Map map, uint eFrom, uint eTo, uint sandbagCount )
{
    Entire::Entire entireFrom = Entire::GetEntire( map, eFrom, 0 );
    Entire::Entire entireTo = Entire::GetEntire( map, eTo, 0 );
    if( valid( entireFrom ) && valid( entireTo ) )
    {
        uint16 x = entireFrom.HexX, y = entireFrom.HexY;
        uint8  dir = GetDirection( x, y, entireTo.HexX, entireTo.HexY );
        int    distantion = GetDistantion( x, y, entireTo.HexX, entireTo.HexY );
        for( int i = 0; i < distantion; i++ )
        {
            map.MoveHexByDir( x, y, dir, 1 );

            hash pid = Content::Item::sandbag_empty;
            if( sandbagCount == 1 )
                pid = Content::Item::sandbag_1;
            else if( sandbagCount == 2 )
                pid = Content::Item::sandbag_2;
            else if( sandbagCount == 3 )
                pid = Content::Item::sandbag_3;
            else if( sandbagCount == 4 )
                pid = Content::Item::sandbag_4;
            else if( sandbagCount == 5 )
                pid = Content::Item::sandbag_5;

            map.AddItem( x, y, pid, 1 );
        }
    }
}

void PlaceReplicatorTanks( Map map )
{
    Item[] items = {};
    Item item;
    Item tank;
    if( Obsolete::GetItems( map, Content::Item::replicator_tank_broken, items ) > 0 )
    {
        for( uint i = 0, l = items.length(); i < l; i++ )
        {
            item = items[ i ];
            if( valid( item ) )
            {
                tank = map.AddItem( item.HexX, item.HexY, Content::Item::replicator_tank, 1 );
                if( valid( tank ) )
                {
                    tank.SetScript ( _ReplTankInit );
                    DeleteItem( item );
                }
            }
        }
    }
}

// Остановка эвента
void StopEvent()
{
    Globals.GEReplStationStatus = false;
    Location loc = GetLocationByPid( Content::Location::replication_4, 0 );
    if( valid( loc ) )
    {
        Map map = loc.GetMapByIndex( 0 );
        if( valid( map ) )
            SavedDeferredCall( GAME_HOUR_TO_TICK( 1 ), DeleteSandbags, map.Id );
        map = loc.GetMapByIndex( 2 );
        Critter[] zombies = {};
        if( Obsolete::GetCritters( map,  0, FIND_ONLY_NPC | FIND_ALL, zombies  ) > 0 )
        {
            for( uint i = 0, l = zombies.length(); i < l; i++ )
            {
                Critter cr = zombies[ i ];
                if( valid( cr ) && cr.IsNpc() && cr.NpcRole ==  ROLE_ZOMBIE )
                    DeleteNpc( cr );
            }
        }
		__EventMapLoop1.UnsubscribeFromMap( map, _MapLoop0 );
		__EventMapLoop2.UnsubscribeFromMap( map, _MapLoop1 );
		__EventMapLoop3.UnsubscribeFromMap( map, _MapLoop2 );
    }
}

void DeleteSandbags( uint value )
{
    Map map = GetMap( value );
    if( valid( map ) )
    {
        // Перенос игроков на глобал
        Critter[] critters = {};
        if( Obsolete::GetCritters( map,  0, FIND_ONLY_PLAYERS | FIND_LIFE, critters  ) > 0 )
        {
            for( uint i = 0, l = critters.length(); i < l; i++ )
            {
                Critter cr = critters[ i ];
                if( valid( cr ) && valid( cr.GetMap() ) )
                    cr.TransitToGlobal();
            }
        }
        // удаление мешков
        Item[] items = {};
        Obsolete::GetItems( map, Content::Item::sandbag_1, items );
        Obsolete::GetItems( map, Content::Item::sandbag_2, items );
        Obsolete::GetItems( map, Content::Item::sandbag_3, items );
        Obsolete::GetItems( map, Content::Item::sandbag_4, items );
        Obsolete::GetItems( map, Content::Item::sandbag_5, items );
        for( uint i = 0, l = items.length(); i < l; i++ )
        {
            Item item = items[ i ];
            if( valid( item ) )
                DeleteItem( item );
        }
        // удаление зомби
        // удаление хабологов
        critters.clear();
        if( Obsolete::GetCritters( map,  0, FIND_ONLY_NPC | FIND_ALL, critters  ) > 0 )
        {
            for( uint i = 0, l = critters.length(); i < l; i++ )
            {
                Critter npc = critters[ i ];
                if( valid( npc ) && npc.IsNpc()  &&( npc.NpcRole == ROLE_ZOMBIE || npc.NpcRole == NPC_ROLE_DEF ) )
                    DeleteNpc( npc );
            }
        }
		
    }
}

// Скрипт люка
void t_ReplDoor( Critter player, const Item trigger, bool entered, uint8 dir )
{
    if( player.IsPlayer() )
    {
        if( Globals.GEReplStationStatus )
        {
            Location loc = player.GetMap().GetLocation();
            if( loc.ProtoId == Content::Location::replication_4 )
            {
                Map map = loc.GetMapByIndex( 2 );
                if( valid( map ) )
                    Obsolete::CritterTransitToMapEntire( player, map.Id, HASHI( ENTIRE_0 ) );
            }
        }
    }
}

void t_Attack( Critter player, const Item trigger, bool entered, uint8 dir )
{
    if( player.IsPlayer() && entered )
    {
        Critter[] critters = {};
        Map map = player.GetMap();
        if( valid( map ) && Obsolete::GetCrittersHex ( map,  player.HexX, player.HexY, 20, FIND_LIFE | FIND_ONLY_NPC, critters  ) > 0 )
        {
            for( uint i = 0, l = critters.length(); i < l; i++ )
            {
                Critter cr = critters[ i ];
                if( valid( cr ) && cr.IsNpc() && cr.NpcRole == ROLE_ZOMBIE )
                {
                    NpcPlanes::AddAttackPlane( cr, 0, player );
                    if( Random( 1, 3 ) == 2 )
                        cr.SayMsg( SAY_SHOUT, TEXTMSG_TEXT, 4001 );
                }
            }
        }
    }
}

bool s_ReplDoor( Critter player, Item scenery, CritterProperty skill, Item item )
{
    if( Globals.GEReplStationStatus )
    {
        DL( "Check ok" );
        Location loc = player.GetMap().GetLocation();
        if( loc.ProtoId == Content::Location::replication_4 )
        {
            Map map = loc.GetMapByIndex( 2 );
            if( valid( map ) )
            {
                Obsolete::CritterTransitToMapEntire( player, map.Id, HASHI( ENTIRE_0 ) );
                DL( "transit" );
                return true;
            }
        }
    }
    return false;
}

// Скрипт карты
void _MapInit( Map map, bool firstTime )
{
    __EventMapLoop1.SubscribeToMap( map, _MapLoop0 );
    __EventMapLoop2.SubscribeToMap( map, _MapLoop1 );   // Появление мобов
    __EventMapLoop3.SubscribeToMap( map, _MapLoop2 );
    map.LoopTime1 =  5000 ;
    map.LoopTime2 =  60000 ;
    map.LoopTime3 =  30000 ;
}

// Случайная подсветка репликатора, чтобы было понятно какой взрывать

void _MapLoop0( Map map )
{
    Item[] items = {};
    Item item;
    if( Obsolete::GetItems( map, Content::Item::replicator_tank, items ) > 0 )
    {
        for( uint i = 0, l = items.length(); i < l; i++ )
        {
            item = items[ i ];
            if( valid( item ) && Random( 1, 2 ) == 2 )
            {
                item.LightIntensity = Random( 30, 80 );
                item.LightColor = colorsReplicator[ Random( 0, colorsReplicator.length() - 1 ) ];
                item.LightDistance = Random( 2, 6 );
                item.IsLight = true;
            }
        }
    }
}

// Генерация мобов, если их меньше 20
void _MapLoop1( Map map )
{
    if( !GameEvent::CheckEventStatus( EVENT_ZOMBIE, PHASE_STATE_RUNNING ) )
    {
        // DL("loop 1---- убрать");
        // return;
    }
    if( Obsolete::GetCritters( map,  Content::Critter::Zombie, FIND_LIFE_AND_KO | FIND_ONLY_NPC, null  ) < 20 )
    {
        Item[] replicators = {};
        uint numRepl = Obsolete::GetItems( map, Content::Item::replicator_tank, replicators );
        if( numRepl == 0 )
        {
            // Остановка события
            GameEvent::RunGameEvent( EVENT_ZOMBIE_STOP );
            map.SetScript( null );
            return;
        }
        else
        {
            uint16   hX = 0, hY = 0;
            Item    replicator;
            Critter cr;
            for( uint i = 0; i < numRepl; i++ )
            {
                replicator = replicators[ i ];
                if( valid( replicator ) && Random( 1, 3 ) > 1 )
                {
                    hX = replicator.HexX;
                    hY = replicator.HexY;
                    if( Caravan::GetFreeHex( map, 7, hX, hY ) )
                    {
                        // в GEReplEntireZombie записываем текущий ближайший гекс, рядом с которым он крутится
                        // в GEReplLastOrder - время спавна
                        int[] props =
                        {
                            CritterProperty::TeamId, Teams::Mob1, CritterProperty::GEReplEntireZombie, ENTIRE_ZOMBIE_0,
                            CritterProperty::GEReplLastOrder, __FullSecond, CritterProperty::NpcRole, ROLE_ZOMBIE
                        };
                        Critter zmb = map.AddNpc( Content::Critter::Zombie, hX, hY, 6, TlaExtended::GetCritPropsDict(props));
						zmb.SetScript ( _ZombieInit );
                        map.SetTextMsg( replicator.HexX, replicator.HexY, COLOR_GREEN, TEXTMSG_TEXT, 4003 );
                    }
                }
            }
        }
    }
}

// Перемещение мобов на следующий пункт сбора
void _MapLoop2( Map map )
{
    Critter[] zombies = {};
    Critter  cr;
    uint16    hX = 0;
    uint16    hY = 0;
    Location loc = map.GetLocation();
    Map      mapGround = loc.GetMapByIndex( 0 );
    Obsolete::GetCritters( map,  Content::Critter::Zombie, FIND_LIFE | FIND_ONLY_NPC, zombies  );
    for( uint i = 0, l = zombies.length(); i < l; i++ )
    {
        cr = zombies[ i ];
        if( valid( cr ) )
        {
            uint entire = cr.GEReplEntireZombie;
            uint lastOrder = cr.GEReplLastOrder;
            if( NpcPlanes::IsNoPlanes( cr ) && lastOrder + TIME_MOVE < __FullSecond )
            {
                hX = cr.HexX;
                hY = cr.HexY;
                switch( entire )
                {
                case ENTIRE_ZOMBIE_EXIT:
                    // TODO:// Здесь нужно переключить счетчик сбежавших омбей
                    DeleteNpc( cr );
                    return;
                case ENTIRE_ZOMBIE_0:
                    DL( "0-" );
                case ENTIRE_ZOMBIE_1:
                case ENTIRE_ZOMBIE_2:
                    if( Entire::GetEntireFreeHex( map, HASHI( cr.GEReplEntireZombie + 1 ), hX, hY ) )
                    {
                        if( Caravan::GetFreeHex( map, 7, hX, hY ) )
                        {
                            cr.GEReplLastOrder = __FullSecond;
                            cr.GEReplEntireZombie += 1;
                            cr.HomeMapId = map.Id;
                            cr.HomeHexX = hX;
                            cr.HomeHexY = hY;
                            cr.HomeDir = Random( 0, 5 );
                        }
                    }
                    break;
                case ENTIRE_ZOMBIE_3:
                    if( valid( mapGround ) )
                    {
                        if( Obsolete::CritterTransitToMapEntire( cr, mapGround.Id, HASHI( ENTIRE_SPECIAL ) ) )
                        {
                            cr.SetScript ( _ZombieOutInit );
                        }
                    }
                    break;
                }
            }
        }
    }
}

// Cкрипт репликатора. Если у игрока взят квест, при применении взрывчатки на репликатор устанавливается таймер на взрыв.

#define STATUS_QVAR_ACTIVE      ( 1 )                           // Взорвите репликационный чан, который вышел из строя.
#define STATUS_QVAR_SETUP       ( 2 )                           // Взрывчатка установлена. Уносите ноги, пока пластид не разнес к чертям все вокруг!
#define STATUS_QVAR_EXECUTED    ( 3 )                           // Вы взорвали один из репликационных чанов, производящих полчища безумных гулей. Возвращайтесь на поверхность и требуйте награду.
#define TOUT_EXPLODE            ( REAL_SECOND( 5 ) )            // Время до взрыва после установки взрывчатки

void _ReplTankInit( Item item, bool firstTime )
{
    __EventCritterUseItem.SubscribeToOnItem( item, _ReplTankUseOnMe );
}

////import void Explode0( Map map, uint16 hexX, uint16 hexY, Critter cr, hash explodePid, uint ownerId, int bonusDamage, int bonusRadius ) from "Explode0";
////import void SmokeBlast0( Map map, uint16 hexX, uint16 hexY, hash smokePid, uint ownerId ) from "SmokeGrenade";

bool _ReplTankUseOnMe( Critter cr, Item usedItem, Critter onCritter, Item item, const Item onScenery, uint param  )
{
    if( ( usedItem.ProtoId == Content::Item::plastic_explosives || usedItem.ProtoId == Content::Item::active_plastic_explosive ) && cr.GEReplExplodeTank == STATUS_QVAR_ACTIVE )
    {
        DeleteItem( usedItem );
        // Создаем событие взрыва и сообщаем игроку о том, что надо убегать
        cr.GEReplExplodeTank = STATUS_QVAR_SETUP;
        uint mapId = 0;
        Map map = cr.GetMap();
        if( valid( map ) )
        {
            mapId = map.Id;
        }
        uint[] values = { cr.Id, item.Id, mapId };
        SavedDeferredCall( GAME_SECOND_TO_TICK( TOUT_EXPLODE ), ExplodeReplTank, values );
        return true;
    }
    return false;
}

void ExplodeReplTank( uint[] values )
{
    uint     crId = values[ 0 ];
    uint     itemId = values[ 1 ];
    uint     mapId = values[ 2 ];

    Critter cr = GetCritter( crId );
    Item    item = GetItem( itemId );
    Map     map;
    if( mapId > 0 )
        map = GetMap( mapId );

    if( valid( cr ) && valid( item ) )
    {
        if( cr.GEReplExplodeTank == STATUS_QVAR_SETUP )
        {
            // Сообщение о выполнении квеста
            cr.GEReplExplodeTank = STATUS_QVAR_EXECUTED;
            Stdlib::SkillUp( cr, CritterProperty::SkillTraps );
        }
        if( valid( map ) )
        {
            Explode::Explode( map, item.HexX, item.HexY, null, Content::Item::active_plastic_explosive, 0, 300, Random( 1, 5 ) );
            map.AddItem( item.HexX, item.HexY, Content::Item::replicator_tank_broken, 1 );
            DeleteItem( item );
            SmokeGrenade::SmokeBlast( map, item.HexX, item.HexY, Content::Item::mustard_gas, crId );
        }
    }
}

// Скрипт зомби на поверхности
void _ZombieOutInit( Critter cr, bool firstTime )
{
    cr.ReplicationTime = -1;
    __EventCritterDead.SubscribeToCritter( cr, _OnZombieDead );
    // При атаке на зомби, все остальные тоже сходят с ума
    __EventCritterAttacked.SubscribeToCritter( cr, _OnZombieAttackedGround );
    __EventCritterMessage.SubscribeToCritter( cr, _OnZombieMessage );
    __EventCritterIdle.SubscribeToCritter( cr, _OnZombieIdleGround );
    __EventNpcPlaneEnd.SubscribeToCritter( cr, _OnZombiePlaneEnd );

}

bool _OnZombieAttackedGround( Critter cr, Critter attacker )
{

    SendMessage::SendMessage( cr,  MSG_ALARM,  attacker.Id, MESSAGE_TO_I_SEE  );
    if( Random( 1, 11 ) > 10 )
    {
        cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, 4001 );
        return false;
    }
    if( not cr.GEReplIsAddedAttackPlane )
    {
        Critter[] critters = {};
        Map map = cr.GetMap();
        if( valid( map ) && Obsolete::GetCritters( map,  0, FIND_LIFE_AND_KO | FIND_ALL, critters  ) > 0 )
        {
            for( uint i = 0, l = critters.length(); i < l; i++ )
            {
                Critter target = critters[ i ];
                if( valid( target ) && target.NpcRole != cr.NpcRole )
                {
                    NpcPlanes::AddAttackPlane( cr, 0, target );
                }
            }
            cr.SayMsg( SAY_SHOUT, TEXTMSG_TEXT, 4001 );
        }
        cr.GEReplIsAddedAttackPlane = true;
    }
    return false;
}

void _OnZombieIdleGround( Critter cr )
{
    if( !cr.IsLife() )
        return;
    Map   map = cr.GetMap();
    uint16 hX = cr.HexX;
    uint16 hY = cr.HexY;
    if( Entire::GetEntireFreeHex( map, ENTIRE_ZOMBIE_EXIT, hX, hY ) )
    {
        if( GetDistantion( cr.HexX, cr.HexY, hX, hY ) < 6 )
        {
            // Выход на глобал
            DeleteNpc( cr );
            return;
        }
        cr.GEReplEntireZombie = ENTIRE_ZOMBIE_EXIT;
        if( Caravan::GetFreeHex( map, 3, hX, hY ) )
        {
            cr.GEReplLastOrder = __FullSecond;
            cr.GEReplEntireZombie = ENTIRE_ZOMBIE_EXIT;
            cr.HomeMapId = map.Id;
            cr.HomeHexX = hX;
            cr.HomeHexY = hY;
            cr.HomeDir = Random( 0, 5 );
        }
    }
}
// Скрипт зомби в подземелье
void _ZombieInit( Critter cr, bool firstTime )
{
    cr.ReplicationTime = -1;
    __EventCritterDead.SubscribeToCritter( cr, _OnZombieDead );
    // При атаке на зомби, все остальные тоже сходят с ума
    __EventCritterAttacked.SubscribeToCritter( cr, _OnZombieAttacked );
    __EventCritterMessage.SubscribeToCritter( cr, _OnZombieMessage );
    __EventCritterIdle.SubscribeToCritter( cr, _OnZombieIdle );
    __EventNpcPlaneEnd.SubscribeToCritter( cr, _OnZombiePlaneEnd );
}



bool _OnZombiePlaneEnd( Critter cr, int planeId, int reason, Critter someCr, Item someItem )
{
	NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(cr, planeId);

    if( reason != REASON_SUCCESS && cr.IsLife() )
    {
        // Проверяем, не домой ли он шел
        Map map = cr.GetMap();
        if( plane.Type == AI_PLANE_WALK &&
            plane.Walk_HexX == cr.HomeHexX &&
            plane.Walk_HexY == cr.HomeHexY &&
            plane.Walk_Dir == cr.HomeDir &&
            map.GetPathLength( cr.HexX, cr.HexY, cr.HomeHexX, cr.HomeHexY, 0 ) == 0 )
        {
            // Застрял
            DL( "Homepos gag" );
            uint16 hx = 0, hy = 0;
            if( Entire::GetEntireFreeHex( map, HASHI( cr.GEReplEntireZombie ), hx, hy ) && Caravan::GetFreeHex( map, 7, hx, hy ) )
            {
                cr.HomeMapId = map.Id;
                cr.HomeHexX = hx;
                cr.HomeHexY = hy;
                cr.HomeDir = Random( 0, 5 );
            }
        }
        return false;
    }
    return true;
}

#define STR_IDLE       ( 4002 )
#define RADIUS_ATTACK( 10 )
void _OnZombieIdle( Critter cr )
{
    if( cr.IsDead() )
        return;
    Map map = cr.GetMap();
    if( valid( map ) && map.ProtoId == Content::Map::repl4a && Random( 1, 3 ) == 3 )
    {
        Critter[] critters = {};
        if( Obsolete::GetCrittersHex ( map,  cr.HexX, cr.HexY, RADIUS_ATTACK, FIND_LIFE | FIND_ONLY_PLAYERS, critters  ) > 0 )
        {
            for( uint i = 0, l = critters.length(); i < l; i++ )
            {
                Critter target = critters[ i ];
                if( valid( target ) )
                {
                    NpcPlanes::AddAttackPlane( cr, 0, target );
                    EnemyStack::AddEnemyToStack( cr,  cr.Id  );
                }
            }
            cr.SayMsg( SAY_SHOUT, TEXTMSG_TEXT, 4001 );
            return;
        }
    }
    if( cr.IsLife() && NpcPlanes::IsNoPlanes( cr )&&  Random( 0, 3 ) == 1 )
    {
        MoveRandom::CritterMoveRandom( cr );
        if( Random( 1, 12 ) == 1 )
            cr.SayMsg( SAY_EMOTE, TEXTMSG_TEXT, 4002 );
    }
}

void _OnZombieMessage( Critter cr, Critter fromCr, int message, int value )
{
    if( message == MSG_ALARM && cr.IsNpc() && NpcPlanes::GetPlanes( cr, null ) == 0 )
    {
        Critter target = GetCritter( value );
        if( valid( target ) )
        {
            NpcPlanes::AddAttackPlane( cr, 0, target );
            EnemyStack::AddEnemyToStack( cr,  value  );
        }
    }

}

bool _OnZombieAttacked( Critter cr, Critter attacker )
{
    // if(attacker.IsPlayer())
    // {
    SendMessage::SendMessage( cr,  MSG_ALARM,  attacker.Id, MESSAGE_TO_ALL_ON_MAP  );
    // }
    return false;
}

void _OnZombieDead( Critter cr, Critter killer )
{
    uint killerId = 0;
    if( valid( killer ) )
    {
        killerId = killer.Id;
        if( killer.GEReplNopasaran > 0 && killer.GEReplNopasaran < 6 )
            killer.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 4005 );
    }
    cr.AddTimeEvent( cte_RespawnZombie, REAL_SECOND( Random( 30, 90 ) ), killerId );
    // TODO: добавить счетчик убитых зомби сюда
}

#define STR_RESPAWN    ( 4000 )
#define STR_COUNTER    (
uint cte_RespawnZombie( Critter cr, int identifier, uint& rate )
{
    DL( "respawn/ Anim:" + cr.Anim2Dead );
    uint8    qStatus = 0;
    Critter killer;
    if( identifier > 0 )
    {
        killer = GetCritter( identifier );
        qStatus = killer.GEReplNopasaran;
    }

    if( cr.IsDead() && cr.Anim2Dead < Anim2Actions::DeadBloodySingle )
    {
        cr.CurrentHp = cr.MaxLife / 2;
        CritterState::ToLife( cr );
        cr.SayMsg( SAY_EMOTE_ON_HEAD, TEXTMSG_TEXT, STR_RESPAWN );
        DL( "success" );
        if( valid( killer ) && qStatus > 0 && qStatus < 6 )
            killer.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 4007 );
    }
    else if( valid( killer ) && qStatus > 0 && qStatus < 6 )
    {
        killer.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 4006 );
        killer.GEReplNopasaran += 1;
    }
    return 0;
}

// Хабологи-торговцы на репл. станциях

void t_Notify( Critter player, const Item trigger, bool entered, uint8 dir )
{
    if( entered && player.IsPlayer() && player.Level > 9 )
    {
        if( Globals.GEReplStationStatus )
        {
            if( player.GEReplNotifictions < 3 && player.GEReplFindstation == 0 )
            {
                Critter[] critters = {};
                Map map = player.GetMap();
                if( valid( map ) && Obsolete::GetCritters( map,  0, FIND_ONLY_NPC | FIND_LIFE, critters  ) > 0 )
                {
                    for( uint i = 0, l = critters.length(); i < l; i++ )
                    {
                        Critter cr = critters[ i ];
                        if( valid( cr ) && cr.DialogId == Content::Dialog::repl_trader )
                        {
                            cr.SayMsg( SAY_NORM, TEXTMSG_TEXT, 4004, "$player" + Obsolete::GetPlayerName( player.Id ) );
                            player.GEReplNotifictions += 1;
                            return;
                        }
                    }
                }
            }
        }
    }
}


// debug
// ~run debug ToMapEntire 224 0 3
// ~run GameEventReplicator Stop 0 0 0
void Run( Critter cr, int, int, int )
{
    SetReplicationAbandoned();
}
void Stop( Critter cr, int, int, int )
{
    StopEvent();
}
