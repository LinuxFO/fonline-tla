// FOS Common  Sort -7
#ifdef __SERVER
// Недостающие события
///@ Event CritterSomeCritterDead(Critter critter, Critter killed, Critter killer) Deferred
///@ Event CritterSomeCritterUseSkill(Critter critter, Critter fromCr, CritterProperty skill, Critter onCritter, Item onItem, const Item onScenery) Deferred
///@ Event CritterSomeCritterUseItem(Critter critter, Critter fromCr, Item item, Critter onCritter, Item onItem, const Item onScenery, uint param) Deferred
///@ Event CritterSomeCritterDropItem(Critter critter, Critter fromCr, Item item)
///@ Event CritterSomeCritterMoveItem(Critter critter, Critter fromCr, const Item item, uint8 itemMode)
///@ Event CritterSomeCritterAttack(Critter critter, Critter attacker, Critter target, Item weapon, uint8 weaponMode, const Item ammo)
///@ Event CritterSomeCritterStealing(Critter critter, Critter thief, Critter fromCr, Item, uint)
///@ Event CritterSomeCritterAttacked(Critter critter, Critter target, Critter attacker)
// Не хватает объявления криттера

///@ Event MapCritterOutEx(Map map, Critter critter)
///@ Event CritterAttacked(Critter critter, Critter attacker)
///@ Event GlobalMapProcess(int, Critter critter, Item, float, float, float, float, float, uint, bool)

// 645
///@ Event GlobalMapInvite(Critter critter, Item, uint, int, uint, uint16, uint16, uint8)
///@ Event LocationEnter(Location location, Critter[] group, uint8 entrance)


#endif

// SayTypeExtended
const hash SayEncounterAny = 14;                                               // Activate dialog box on global map, using before encounter
const hash SayEncounterRt = 15;                                                // Activate dialog box on global map, using before encounter
#define SAY_ENCOUNTER_TB            ( 16 )                                     // Activate dialog box on global map, using before encounter
#define SAY_FIX_RESULT              ( 17 )
const hash SayDialogboxText = 18;
#define SAY_DIALOGBOX_BUTTON        # (b)                       ( 19 + ( b ) ) // Max 20 buttons (0..19)
const hash SaySayTitle = 39;
const hash SaySayText = 40;

// excluded valid
#define valid                       # (smth) ( smth !is null )

// EventMapLoops
///@ Event MapLoop1(Map map)
///@ Event MapLoop2(Map map)
///@ Event MapLoop3(Map map)
///@ Event MapLoop4(Map map)
///@ Event MapLoop5(Map map)

///@ Event MapCritterDead(Map map, Critter critter, Critter killer)

// Dialogboxes

const hash DialogboxNcrIllBrahmin = 1;   // диалог из NcrCommon
const hash DialogboxPurgatoryInvite = 2; // Диалог Чистилища

// Tactics
#define CRTYPE_TACTICS_RHUMANOID    ( GetStrHash( "RHumanoid" ) )
//	Line 368:   460    RHumanoid             316  0  2  1  1  1  0  1   1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0    400  200   0  0  RHumanoidU

// Fix boy function call states
const hash FixboyList = 0;
const hash FixboyButton = 1;
const hash FixboyCraft = 2;

// Fix boy craft results
#define FIXBOY_ALLOW_CRAFT          ( 0x0001 )
#define FIXBOY_CHECK_TIMEOUT        ( 0x0002 )
#define FIXBOY_SET_TIMEOUT          ( 0x0004 )
#define FIXBOY_CHECK_PARAMS         ( 0x0008 )
#define FIXBOY_CHECK_MATERIALS      ( 0x0010 )
#define FIXBOY_CHECK_TOOLS          ( 0x0020 )
#define FIXBOY_SUB_MATERIALS        ( 0x0040 )
#define FIXBOY_ADD_CRAFT_ITEMS      ( 0x0080 )
#define FIXBOY_ADD_EXPERIENCE       ( 0x0100 )
#define FIXBOY_SEND_SUCC_MESSAGE    ( 0x0200 )
#define FIXBOY_SEND_FAIL_MESSAGE    ( 0x0400 )
#define FIXBOY_DEFAULT              ( 0xFFFF )

// Global map events
const hash GlobalProcessMove = 0;          // Called every __GlobalMapMoveTime
const hash GlobalProcessEnter = 1;
const hash GlobalProcessStartFast = 2;
const hash GlobalProcessStart = 3;
const hash GlobalProcessSetMove = 4;
const hash GlobalProcessStopped = 5;
const hash GlobalProcessNpcIdle = 6;          // Called every __CritterIdleTick
const hash GlobalProcessKick = 7;
#define GLOBAL_MAP_BASE_SPEED       ( 2.4f )  // Base speed, 2.4 pixels per second

// Global map walk types
const hash GmWalkGround = 0;
const hash GmWalkFly = 1;
const hash GmWalkWater = 2;

// Клиент реорганизация

#ifdef __CLIENT

///@ Event CritterSneak(Critter critter)

// 6 uint parameters, separated by commas
// Chosen actions
# define CHOSEN_NONE                ( 0 ) //
const hash ChosenMove = 1;                // HexX, HexY, Is run, Cut path, Wait double click, Double click tick
const hash ChosenMoveToCrit = 2;          // Critter id, None, Is run, Cut path, Wait double click, Double click tick
const hash ChosenDir = 3;                 // 0 (CW) or 1 (CCW)
const hash ChosenUseItem = 6;             // Item id, Item pid, Target type (see below), Target id, Item mode (see below), Some param (timer)
const hash ChosenMoveItem = 7;            // Item id, Item count, To slot, Is barter container, Is second try
const hash ChosenMoveItemCont = 8;        // From container, Item id, Count
const hash ChosenTakeAll = 9;             //
const hash ChosenPutAll = 10;             //
const hash ChosenUseSklOnCritter = 11;    // Skill, Critter id
const hash ChosenUseSklOnItem = 12;       // Is inventory, Skill index (SK_*), Item id
const hash ChosenUseSklOnScen = 13;       // Skill, Pid, HexX, HexY
const hash ChosenTalkNpc = 14;            // Critter id
const hash ChosenPickItem = 15;           // Pid, HexX, HexY
const hash ChosenPickCrit = 16;           // Critter id, (loot - 0, push - 1)
const hash ChosenSneak = 17;

#endif

int[] GetCritPropArray( dict< CritterProperty, int > props )
{
    int[] propsArr = {};
    for( uint i = 0, l = props.length(); i < l; i++ )
    {
        propsArr.insertLast( props.getKey( i ) );
        propsArr.insertLast( props.getValue( i ) );
    }
    return propsArr;
}

dict< CritterProperty, int > GetCritPropsDict( int[] props )
{
    dict< CritterProperty, int > propsDict = {};

    for( uint i = 0, l = props.length(); i < l; i++ )
    {
        propsDict[ CritterProperty( props[ i ] ) ] = props[ i + 1 ];
        i++;
    }

    return propsDict;
}

#define REAL_MS                     # (x) ( Time::RealMs( x ) )
#define REAL_SECOND                 # (x) ( Time::RealSecond( x ) )
#define REAL_MINUTE                 # (x) ( Time::RealMinute( x ) )
#define REAL_HOUR                   # (x) ( Time::RealHour( x ) )
#define REAL_DAY                    # (x) ( Time::RealDay( x ) )
#define REAL_MONTH                  # (x) ( Time::RealMonth( x ) )
#define REAL_YEAR                   # (x) ( Time::RealYear( x ) )
