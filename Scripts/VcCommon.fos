// FOS Server

#pragma property Critter Protected     uint8 VCAmandaHelpJoshua Group = Quests, Quest = 8836, Max = 9
#pragma property Critter PrivateServer uint8 VCMailRemembered       Max = 1
#pragma property Critter PrivateServer uint8 VCBeautyHoloRemembered Max = 1
#pragma property Critter PrivateServer uint  VCityCommonBarkusTimeSay

#pragma property Item PrivateServer bool VCityCommonIsMail
#pragma property Item PrivateServer uint VCityCommonMailOwnerId

#pragma property Map PrivateServer uint VCLastBarDialog

// Квест "Семья". Вэлери
#define LOC_NAME             # (locId)               ( ( locId + 100 ) * 1000 )    // поиск названия локации в файле FOGM.msg
#define NPC_NAME             # (dialogId)            ( ( dialogId ) * 1000 + 100 ) // поиск имени НПЦ в файле FODLG.msg
#define STR_LOW_SPEECH       ( 5800 )                                              // Строка при чтении письма - низкая речь.
#define STR_HIGH_SPEECH      ( 5801 )                                              // Строка при чтении письма - высокая речь.
#define STR_HIGH_SPEECH2     ( 5802 )                                              // Чтобы сократить объем текста - выводим за два приема.
#define MIN_SPEECH           ( 100 )                                               // Минимальная речь для того, чтобы прочесть письмо.

void r_GiveMail( Critter cr, Critter npc )
{
    Item item = cr.AddItem( Content::Item::postman_letter, 1 );
    if( valid( item ) )
    {
        item.Lexems = "$reciever@msg DLG " + NPC_NAME( Content::Dialog::klam_vic ) + " @$location@msg GM " + LOC_NAME( Content::Location::klamath ) + " @";
        item.SetScript ( _ValeryMailInit );
        item.VCityCommonIsMail = true;
        item.VCityCommonMailOwnerId = cr.Id;
    }
}

void _ValeryMailInit( Item item, bool firstTime )
{
    __EventCritterUseItem.SubscribeToItem( item, _MailUse );
}

bool _MailUse( Critter cr, Item item, Critter onCritter, Item onItem, const Item onScenery, uint param )
{
    if( valid( onItem ) || valid( onCritter ) || valid( onScenery ) || cr.Id != item.VCityCommonMailOwnerId )
        return false;

    if( cr.SkillSpeech < MIN_SPEECH )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_LOW_SPEECH );
    }
    else
    {
        if( cr.VCMailRemembered == 0 )
        {
            cr.VCMailRemembered = 1;
            cr.Experience += 500;
        }
        cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_HIGH_SPEECH );
        cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_HIGH_SPEECH2 );
    }
    return true;
}

bool d_HasMail( Critter cr, Critter npc )
{
    Item[] items = {};
    if( Obsolete::GetItems( cr, -1, items ) > 0 )
        for( uint i = 0, l = items.length(); i < l; i++ )
            if( items[ i ].ProtoId == Content::Item::postman_letter && items[ i ].VCityCommonIsMail )
                return true;

    return false;
}

bool d_NoMail( Critter cr, Critter npc )
{
    return ( !d_HasMail( cr, npc ) );
}

// Квест, "Свет мой, Зеркальце". ГУ, Хелен Трой
#define HOLO_MSG_ID          ( 55 )
#define STR_LOW_SCIENCE      ( 5805 )
#define STR_HIGH_SCIENCE     ( 5806 )
#define MIN_SCIENCE          ( 100 )
#define MIN_DOCTOR           ( 80 )

void r_WriteHolodisk( Critter player, Critter npc, int val )
{
    if( player.CountItem( Content::Item::holodisk ) == 0 )
    {
        return;
    }
    player.DeleteItem( Content::Item::holodisk, 1 );
    Item holo = player.AddItem( Content::Item::holodisk, 1 );
    holo.SetScript ( _HoloInit );
}

void _HoloInit( Item holo, bool firstTime )
{
    holo.HolodiskNum = HOLO_MSG_ID;
    __EventCritterUseItem.SubscribeToItem( holo, _HoloUse );
    __EventCritterUseSkill.SubscribeToOnItem( holo, _HoloSkill );
}

bool _HoloSkill( Critter critter, CritterProperty skill, Critter onCritter, Item onItem, const Item onScenery )
{
    return false;
}

bool _HoloUse( Critter cr, Item item, Critter onCritter, Item onItem, const Item onScenery, uint param )
{
    if( valid( onItem ) || valid( onScenery ) )
        return true;
    if( cr.Gender == 0 )
        return true;
    if( cr.SkillScience >= MIN_SCIENCE && cr.SkillDoctor >= MIN_DOCTOR )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_HIGH_SCIENCE );
        if( cr.VCBeautyHoloRemembered == 0 )
            cr.VCBeautyHoloRemembered = 1;
    }
    else
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_LOW_SCIENCE );
    }
    return true;
}

// Клиника для доктора Блэка.
#define BLACK_JACK_PID       ( 267 )
////import void CancelMerc0( Critter merc ) from "Merc";

void r_CancelDoctorMerc( Critter player, Critter npc )
{
    if( !valid( npc ) )
        return;
    Merc::CancelMerc( npc );
    npc.SetScript( MapGeckCity::_GeckTraderInit );
}

bool d_CheckIsBlackHere( Critter player, Critter npc )
{
    if( !valid( npc ) )
        return false;
    Map map = npc.GetMap();
    if( !valid( map ) )
        return false;
    return ( Obsolete::GetCritters( map,  BLACK_JACK_PID, FIND_LIFE | FIND_ONLY_NPC, null  ) > 0 );
}

bool d_CheckNotBlackHere( Critter player, Critter npc )
{
    return ( !d_CheckIsBlackHere( player, npc ) );
}

// Проказник Баркус
#define STR_BARKUS_MALE      ( 1 )
#define STR_BARKUS_FEMALE    ( 2 )
void _BarkusInit( Critter cr, bool firstTime )
{
    cr.ShowCritterDist1 = 8;
    __EventCritterShowDist1.SubscribeToCritter( cr, _BarkusShowCr );
}

void _BarkusShowCr( Critter cr, Critter showCrit )
{
    if( cr.VCityCommonBarkusTimeSay < __FullSecond && showCrit.IsPlayer() && showCrit.IsLife() )
    {
        if( showCrit.VCAmandaHelpJoshua >= 7 )
        {
            cr.SayMsg( SAY_NORM, TEXTMSG_TEXT, DLGSTR( cr.DialogId, ( cr.Gender == 0 ? STR_BARKUS_MALE : STR_BARKUS_FEMALE ) ) );
            cr.VCityCommonBarkusTimeSay = __FullSecond + __TimeMultiplier * 30;  // Не чаще двух раз в минуту
        }
    }
}


// Диалог посетителей бара у стойки
#define ROLE_BAR_TALKER      ( 56 )     // Роль говорунов

////import void BeginDialog0( Critter cr, int dialog ) from "NpcDialog";
////import void _NpcMessage0( Critter cr, Critter fromCr, int message, int value ) from "NpcDialog";

void _BarTalkerInit( Critter cr, bool firstTime )
{
    cr.NpcDialogTimeWait = 4;
    __EventCritterMessage.SubscribeToCritter( cr, NpcDialog::_NpcMessage );
}

void t_RunNpcDialog( Critter player, const Item trigger, bool entered, uint8 dir )
{
    if( !entered || !player.IsPlayer() )
        return;
    Map map = player.GetMap();
    if( !valid( map ) )
        return;
    if( __FullSecond >= map.VCLastBarDialog )
    {
        map.VCLastBarDialog = __FullSecond + REAL_MINUTE( 30 );
        Critter cr = map.GetNpc( ROLE_BAR_TALKER, FIND_LIFE | FIND_ONLY_NPC, 0 );
        if( valid( cr ) )
            NpcDialog::BeginDialog( cr, 5 );
    }
}
