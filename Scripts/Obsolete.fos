// FOS Server Client

#ifdef __SERVER

Item GetItemCar(Critter cr)
{
    Item[] items = cr.GetItems(function(i) { return i.Type == ItemType::Car; });
    if (items.length() > 0)
        return items[0];
    return null;
}

Item FindAmmoForWeapon(Critter npc, AbstractItem weapon)
{
    auto ammo = npc.GetItemByPid(weapon.AmmoPid);
    if (ammo != null)
        return ammo;

    ammo = npc.GetItemByPid(weapon.Weapon_DefaultAmmoPid);
    if (ammo != null)
        return ammo;

    auto otherAmmo = npc.GetItems(function(i) { return i.Type == ItemType::Ammo; });
    for (uint i = 0; i < otherAmmo.length(); i++) {
        ammo = otherAmmo[i];
        if (ammo.Ammo_Caliber == weapon.Weapon_Caliber)
            return ammo;
    }

    return null;
}

bool CritterTransitToMapCoords(Critter cr, uint mapId, uint16 hexX, uint16 hexY, uint8 dir)
{
    int[] params = {mapId, cr.Id, hexX, hexY, dir};

    DeferredCall(0, CritterTransitToMapCoordsSuccess, params);

    Yield(0);

    return cr.MapId == mapId && cr.HexX == hexX && cr.HexY == hexY && cr.Dir == dir;
}

void CritterTransitToMapCoordsSuccess(int[] values)
{
    Map map = GetMap(values[0]);
    Critter cr = GetCritter(values[1]);

    cr.TransitToMap(map, values[2], values[3], values[4]);
}

bool CritterTransitToMapEntry(Critter cr, uint mapId, hstring entry)
{
    Map map = GetMap(mapId);
    if (valid(cr) && valid(map)) {
        int entries = Entrance::MapCountEntry(map, entry);
        if (entries > 0) {
            int skip = Random(0, entries - 1);
            uint16 hexX = 0;
            uint16 hexY = 0;
            if (Entrance::MapGetEntryCoords(map, entry, skip, hexX, hexY)) {
                cr.TransitToMap(map, hexX, hexY, Random(0, 5));
                return true;
            }
        }
    }
    Log("CritterTransitToMapEntry failed");
    return false;
}

uint ParseEntries(Map map, Entrance::Entry[] entries, hstring name)
{
    Entrance::Entry[] entriesParsed = Entrance::ParseEntries(map, name);
    if (entriesParsed.isEmpty())
        return 0;
    for (int i = 0, l = entriesParsed.length(); i < l; i++) {
        entries.insertLast(entriesParsed[i]);
    }
    return entriesParsed.length();
}

uint GetItems(Critter cr, int slot, Item[] items)
{
    if (valid(cr)) {
        if (slot < 0) {
            Item[] critterItems = cr.GetItems();
            uint len = 0;
            for (int i = 0, l = critterItems.length(); i < l; i++) {
                Item item = critterItems[i];
                if (valid(item)) {
                    if (valid(items))
                        items.insertLast(item);
                    len++;
                }
            }
            return len;
        }
        else {
            Item[] critterItems = cr.GetItemsBySlot(slot);
            uint len = 0;
            for (int i = 0, l = critterItems.length(); i < l; i++) {
                Item item = critterItems[i];
                if (valid(item)) {
                    if (valid(items))
                        items.insertLast(item);
                    len++;
                }
            }
            return len;
        }
    }
    return 0;
}

uint GetItems(Map map, hstring pid, Item[] items)
{
    if (valid(map)) {
        Item[] mapItems = map.GetItemsByPid(pid);
        int len = 0;
        for (int i = 0, l = mapItems.length(); i < l; i++) {
            Item item = mapItems[i];
            if (valid(item)) {
                if (valid(items)) {
                    items.insertLast(item);
                }
                len++;
            }
        }
        return len;
    }
    return 0;
}
// map.GetItems( ent.HexX, ent.HexY, null )
// map.GetItems( hx, hy, containers )
uint GetItems(Map map, uint16 hexX, uint16 hexY, Item[] items)
{
    if (valid(map)) {
        Item[] mapItems = map.GetItems(hexX, hexY);
        int len = 0;
        for (int i = 0, l = mapItems.length(); i < l; i++) {
            Item item = mapItems[i];
            if (valid(item)) {
                if (valid(items)) {
                    items.insertLast(item);
                }
                len++;
            }
        }
        return len;
    }
    return 0;
}

// map.GetItems( crX, crY, radius, Content::Item::sandbag_1, gagItems )
uint GetItems(Map map, uint16 hexX, uint16 hexY, uint radius, hstring pid, Item[] items)
{
    if (valid(map)) {
        Item[] mapItems = map.GetItems(hexX, hexY, radius, pid);
        int len = 0;
        for (int i = 0, l = mapItems.length(); i < l; i++) {
            Item item = mapItems[i];
            if (valid(item)) {
                if (valid(items)) {
                    items.insertLast(item);
                }
                len++;
            }
        }
        return len;
    }
    return 0;
}
// cont.GetItems( player.Id, items )
uint GetItems(Item container, int stackId, Item[] items)
{
    if (valid(container)) {
        Item[] containerItems = container.GetItems(stackId);
        int len = 0;
        for (int i = 0, l = containerItems.length(); i < l; i++) {
            Item item = containerItems[i];
            if (valid(item)) {
                if (valid(items)) {
                    items.insertLast(item);
                }
                len++;
            }
        }
        return len;
    }
    return 0;
}

// Map::GetCrittersHex(uint16, uint16, uint8&, uint, Critter@[]@&)
// Critter@[]@ Map::GetCrittersHex(uint16 hexX, uint16 hexY, uint radius, int findType)
uint GetCrittersHex(Map map, uint16 hexX, uint16 hexY, uint radius, int findType, Critter[] critters)
{
    if (valid(map)) {
        Critter[] foundedCritters = map.GetCrittersHex(hexX, hexY, radius, findType);
        int founded = 0;
        for (int i = 0, l = foundedCritters.length(); i < l; i++) {
            Critter cr = foundedCritters[i];
            if (valid(cr)) {
                founded++;
                critters.insertLast(cr);
            }
        }
        return founded;
    }

    return 0;
}

Item GetSlotItem(Critter cr, hstring pid, int slot)
{
    if (valid(cr)) {
        if (pid == 0 && slot >= 0)
            return cr.GetItemBySlot(slot);
        else
            return cr.GetItemByPid(pid);
    }
    return null;
}

uint GetItemsByType(Critter cr, ItemType type, Item[] items)
{
    if (valid(cr)) {
        Item[] foundedItems = cr.GetItems();
        uint founded = foundedItems.length();
        for (uint i = 0; i < founded; i++) {
            Item item = foundedItems[i];
            if (valid(item) && item.Type == type)
                items.insertLast(foundedItems[i]);
        }
        return founded;
    }
    return 0;
}

uint GetItemsByType(Map map, ItemType type, Item[] items)
{
    if (valid(map)) {
        Item[] foundedItems = map.GetItems();
        uint founded = foundedItems.length();
        for (uint i = 0; i < founded; i++) {
            Item item = foundedItems[i];
            if (valid(item) && item.Type == type)
                items.insertLast(foundedItems[i]);
        }
        return founded;
    }
    return 0;
}

string GetPlayerName(uint crId)
{
    Critter cr = GetCritter(crId);
    if (valid(cr) && cr.IsPlayer()) {
        return cr.Name;
    }

    return "";
}

uint GetCrittersPath(Map map, uint16 fromHx, uint16 fromHy, uint16 toHx, uint16 toHy, float angle, uint dist, int findType, Critter[] critters)
{
    if (valid(map)) {
        Critter[] foundedCritters = map.GetCrittersPath(fromHx, fromHy, toHx, toHy, angle, dist, findType);
        uint founded = foundedCritters.length();
        if (critters != null) {
            for (uint i = 0; i < founded; i++) {
                critters.insertLast(foundedCritters[i]);
            }
        }
        return founded;
    }
    return 0;
}

uint GetCrittersPath(Map map, uint16 fromHx, uint16 fromHy, uint16 toHx, uint16 toHy, float angle, uint dist, int findType, Critter[] critters,
                     uint16& preBlockHx, uint16& preBlockHy, uint16& blockHx, uint16& blockHy)
{
    if (valid(map)) {
        Critter[] foundedCritters = map.GetCrittersPath(fromHx, fromHy, toHx, toHy, angle, dist, findType, preBlockHx, preBlockHy, blockHx, blockHy);
        uint founded = foundedCritters.length();
        if (critters != null) {
            for (uint i = 0; i < founded; i++) {
                critters.insertLast(foundedCritters[i]);
            }
        }
        return founded;
    }
    return 0;
}

Item GetMapCar(Map map, uint16 hexX, uint16 hexY)
{
    Item[] items = map.GetItems(hexX, hexY);

    for (int i = 0, l = items.length(); i < l; i++) {
        Item item = items[i];
        if (valid(item) && item.Type == ItemType::Car)
            return item;
    }

    return null;
}

Item MapGetDoor(Map map, uint16 hexX, uint16 hexY)
{
    if (valid(map)) {
        Item[] items = map.GetItems(hexX, hexY);

        if (!items.isEmpty())
            for (int i = 0, l = items.length(); i < l; i++) {
                Item item = items[i];
                if (valid(item) && item.Type == ItemType::Door)
                    return item;
            }
    }
    return null;
}

#endif

ItemProto GetConstItemBySlot(Critter cr, int slot)
{
    ItemProto item = cr.GetItemBySlot(slot);
    if (!valid(item)) {
        if (slot == SLOT_ARMOR)
            item = GetItemProto(hstring("default_armor"));
        if (slot == SLOT_HAND1 || slot == SLOT_HAND2)
            item = GetItemProto(hstring("default_weapon"));
    }
    return item;
}
