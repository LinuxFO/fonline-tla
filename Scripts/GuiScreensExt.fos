// FOS Client Sort 2

void TryExit()
{
    Gui::Screen screen = Gui::GetActiveScreen();
    if (false) // screen.IsHardcoded )
    {
        CustomCall("TryExit");
        return;
    }

    switch (screen.Index) {
    case CLIENT_SCREEN_NONE:
        break;

    case CLIENT_MAIN_SCREEN_LOGIN:
        __Quit = true;
        break;
    case CLIENT_MAIN_SCREEN_REGISTRATION:
        ShowScreen(CLIENT_MAIN_SCREEN_LOGIN);
        break;
    case CLIENT_MAIN_SCREEN_WAIT:
        CustomCall("NetDisconnect");
        break;
    case CLIENT_MAIN_SCREEN_GLOBAL_MAP:
    case CLIENT_MAIN_SCREEN_GAME:
        if (__Cursor == CursorType::UseItem || __Cursor == CursorType::UseWeapon || __Cursor == CursorType::UseSkill)
            __Cursor = CursorType::Default;
        else
            ShowScreen(CLIENT_SCREEN_MENU);
        break;

    default:
        if (!screen.IsMain)
            HideScreen(screen.Index);
        break;
    }
}

void NextCursor()
{
    switch (__Cursor) {
    case CursorType::Default:
        __Cursor = CursorType::Move;
        break;
    case CursorType::Move: {
        Critter chosen = GetChosen();
        const Item i = Obsolete::GetConstItemBySlot(chosen, SLOT_HAND1);
        if (chosen !is null && !IS_TIMEOUT(chosen.TimeoutBattle) && Obsolete::GetConstItemBySlot(chosen, SLOT_HAND1).Type == ItemType::Weapon)
            __Cursor = CursorType::UseWeapon;
        else
            __Cursor = CursorType::Default;
    } break;
    case CursorType::UseItem:
        __Cursor = CursorType::Default;
        break;
    case CursorType::UseWeapon:
        __Cursor = CursorType::Default;
        break;
    case CursorType::UseSkill:
        __Cursor = CursorType::Move;
        break;
    default:
        __Cursor = CursorType::Default;
        break;
    }
}
