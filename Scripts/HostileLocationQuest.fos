// FOS Server Sort 2
// Author: rifleman17
// Скрипт для реализации квестов, целью которых является зачистка некоей локации от мобов
// Особенности:
//   - локация видна одному игроку
//   - если игрок убит, локация не исчезает
//   - если погибли все мобы, локация удаляется, переключается квестовая переменная "выполнено"
//   - на карте может быть несколько нпц-союзников, ведется отсчет погибших, может использоваться в квесте
//   - если игрок погиб, союзники сбрасывают планы атаки "Отступаем! Смена позиции" и уходят на исходную позицию
//   - противники и союзники ставятся на карте маппером, не скриптом, у них указывается соответствующий NPC_ROLE
//   - противникам и союзникам присваевается свой скрипт
//   - все параметры локации и карт прописываются в Maps.cfg, Locations.cfg
//   - все поля и свойства квеста сериализуются
//   - при атаке игроком мобов, защитники присоединяются, если даже игрок с ними не поговорил
//   - удаление локации контролируется таймаутом, при создании карты добавляется таймевент. Через два реальных дня локация будет удалена, статус квестовой переменной будет переключен.
//   - внимание! для всех карт в локации устанавливается специфический скрипт
//   - для каждой карты в локации заняты Map::HostileLQPlayerId - код игрока, выполняющего квест; и Map::HostileLQVarNum - номер квестовой переменной. Чтобы в контексте карты иметь доступ к описанию квеста.
// TODO:
//   - изменить на групповой квест
//   - обработать убийство игроком союзников после того, как задача квеста выполнена
//   - изменть реализацию поведения криттеров, чтобы они допускали использование своих скриптов

#pragma property Critter PrivateServer bool HostileLQIsStoped
#pragma property Critter PrivateServer dict< uint, uint8[] > HostileLQData
#pragma property Map PrivateServer uint HostileLQPlayerId
#pragma property Map PrivateServer uint HostileLQVarNum

#define NPC_ROLE_HOSTILE          ( 400 )
#define NPC_ROLE_ALLY             ( 401 )
#define QUEST_ACTIVE              ( 1 )             // Квест получен
#define QUEST_FAIL_LOC_DELETED    ( 2 )             // Квест провален, удалена локация - истекло время на квест.
#define QUEST_COMPLETE            ( 3 )             // Квест выполнен, все враждебные нпц уничтожены, локация удалена.
#define TIME_RESET                ( REAL_DAY( 2 ) ) // Время автоматического удаления локации и приведения квестовой переменной в состояние QUEST_FAIL_LOC_DELETED
#define MSG_KILL_EM               ( 144 )

#define _GetPlayerId              # (map)         ( map.HostileLQPlayerId )
#define _GetVarNum                # (map)         ( map.HostileLQVarNum )
#define _SetPlayerId              # ( map, crId )( map.HostileLQPlayerId = crId )
#define _SetVarNum                # ( map, varNum )( map.HostileLQVarNum = varNum )
#define _InfoFromMap              # (map)         ( HostileLocationInfo( _GetPlayerId( map ), _GetVarNum( map ) ) )
#define _InfoFromCr               # (cr)          ( valid( cr.GetMap() ) ? HostileLocationInfo( _GetPlayerId( cr.GetMap() ), _GetVarNum( cr.GetMap() ) ) : null )

// #define DL #(s) (Log(s))
#define DL                        # ( s )

class HostileLocationInfo
{
    HostileLocationInfo()
    {
        LocCreated = false;
    }

    HostileLocationInfo( int playerId, int varNum )
    {
        LocCreated = false;
        PlayerId = playerId;
        QVarNum = varNum;
    }

    uint PlayerId;                   // Id игрока выполняющего квест
    uint QVarNum;                    // Номер квестовой переменной, связанной с квестом
    uint CVarNum;                    // Номер локальной переменной для игрока - счетчика смертей союзников, если равна = 0, подсчет не происходит
    uint LocId;                      // Id локации
    uint LocPid;                     // Код прототипа локации
    uint LocX;                       // Положение локации на глобальной карте по оси икс
    uint LocY;                       // Положение локации на глобальной карте по оси игрек
    uint CoordDelta;                 // Относительное смещение по координатным осям глобальной карты, на которое может быть смещена точка положения локации
    bool LocCreated;                 // Признак: Локация уже создана

    bool Serialized()
    {
        return GetCritter( PlayerId ).HostileLQData.exists( QVarNum );
    }

    void Save()
    {
        auto save = Serializator::Serializator();
        save.Set( PlayerId );
        save.Set( QVarNum );
        save.Set( CVarNum );
        save.Set( LocId );
        save.Set( LocPid );
        save.Set( LocX );
        save.Set( LocY );
        save.Set( CoordDelta );
        save.Set( LocCreated );
        auto hostileLQData = GetCritter( PlayerId ).HostileLQData.clone();
        hostileLQData[ QVarNum ] = save.GetData();
        GetCritter( PlayerId ).HostileLQData = hostileLQData;
    }

    void Load()
    {
        auto load = Serializator::Serializator();
        if( load.SetData( GetCritter( PlayerId ).HostileLQData.get( QVarNum, array< uint8 >() ) ) == 0 )
            return;
        load.Get( PlayerId );
        load.Get( QVarNum );
        load.Get( CVarNum );
        load.Get( LocId );
        load.Get( LocPid );
        load.Get( LocX );
        load.Get( LocY );
        load.Get( CoordDelta );
        load.Get( LocCreated );
    }

    void Erase()
    {
        dict< uint, uint8[] > hostileLQData = GetCritter( PlayerId ).HostileLQData.clone();
        hostileLQData.remove( QVarNum );
        GetCritter( PlayerId ).HostileLQData = hostileLQData;
    }

    bool CreateHostileLocation()
    {
        if( PlayerId == 0 || LocCreated || LocPid == 0 )
            return false;             // Игрок неизвестен или локация создана ранее, или код прототипа неизвестен
        Critter player = GetCritter( PlayerId );
        if( !valid( player ) )
            return false;             // Не найден игрок
        LocId = CreateLocation( LocPid, LocX + Random( -1 * int(CoordDelta), CoordDelta ), LocY + Random( -1 * int(CoordDelta), CoordDelta ), null ).Id;
        if( LocId == 0 )
            return false;             // Ошибка при создании локации
        DL( "Location created ok. LocId = " + LocId );
        LocCreated = true;
        Save();
        Location::SetKnownLoc( player, true, LocId );
        // Прописывание скриптов для карт локации, а также сохранение ключевой информации о квесте в Map::Data
        Location loc = GetLocation( LocId );
        if( valid( loc ) )
        {
            for( uint i = 0, l = loc.GetMapCount(); i < l; i++ )
            {
                Map map = loc.GetMapByIndex( i );
                if( valid( map ) )
                {
                    _SetPlayerId( map, PlayerId );
                    _SetVarNum( map, QVarNum );
                    map.SetScript ( _HostileMapInit );
                }
            }
        }
        // Событие удаления локации через какое-то время, если игрок не успел выполнить квест
        uint[] values = { PlayerId, QVarNum };
        SavedDeferredCall( GAME_SECOND_TO_TICK( TIME_RESET ), ResetHostileLoc, values );
        // Сериализация описания квеста и локации
        Save();
        return true;
    }

    uint GetNpc( Critter[] critters, bool ally, int findType )
    {
        uint len = critters.length();         // Первоначальная длина массива
        if( LocId == 0 )
            return 0;
        DL( "Locvald? LocId" + LocId );
        Location loc = GetLocation( LocId );
        if( !valid( loc ) )
            return 0;
        for( uint i = 0, l = loc.GetMapCount(); i < l; i++ )
        {
            DL( "Map#" + i );
            Map map = loc.GetMapByIndex( i );
            if( valid( map ) )
                for( uint j = 0, m = map.GetNpcCount( ( ally ? NPC_ROLE_ALLY : NPC_ROLE_HOSTILE ), findType ); j < m; j++ )
                {
                    DL( "j =" + j );
                    Critter cr = map.GetNpc( ( ally ? NPC_ROLE_ALLY : NPC_ROLE_HOSTILE ), findType, j );
                    if( valid( cr ) )
                        critters.insertLast( cr );
                }
        }
        DL( "array length" + ( critters.length() - len ) );
        return ( critters.length() - len );
    }

    uint DeadPercent( bool ally )
    {
        Critter[] critters = {};
        uint all = GetNpc( critters, ally, FIND_ALL | FIND_ONLY_NPC );
        uint dead = GetNpc( critters, ally, FIND_KO_AND_DEAD | FIND_ONLY_NPC );
        DL( "perce" + ( dead == 0 ? 0 : uint( 100 * dead / all ) ) + "dead:" + dead + "; all:" + all );
        return ( dead == 0 ? 0 : uint( 100 * dead / all ) );
    }

    void ResetQuest()
    {
        Critter player = GetCritter( PlayerId );
        if( valid( player ) )
        {
            player.SetAsInt( CritterProperty( QVarNum ), QUEST_FAIL_LOC_DELETED );

            if( CVarNum != 0 )                   // Сброс счетчика, если назначен
                player.SetAsInt( CritterProperty( CVarNum ), 0 );
        }
        Location loc = GetLocation( LocId );
        if( valid( loc ) )
            loc.AutoGarbage = true;
        Erase();
    }

    void CompleteQuest()
    {
        DL( "complete quest called" );
        Critter player = GetCritter( PlayerId );
        if( valid( player ) )
        {
            player.SetAsInt( CritterProperty( QVarNum ), QUEST_COMPLETE );
            DL( "counter quest called" );
            if( CVarNum != 0 && player.GetAsInt( CritterProperty( CVarNum ) ) == 0 )             // Установка счетчика, если назначен
            {
                Critter[] critters = {};
                uint count = GetNpc( critters, true, FIND_DEAD | FIND_ONLY_NPC );
                player.SetAsInt( CritterProperty( CVarNum ), count );
            }
        }
        Location loc = GetLocation( LocId );
        if( valid( loc ) )
            loc.AutoGarbage = true;
        Critter[] critters = {};
        GetNpc( critters, true, FIND_ALL | FIND_ONLY_NPC );
        GetNpc( critters, false, FIND_ALL | FIND_ONLY_NPC );
        for( uint i = 0, l = critters.length(); i < l; i++ )
            critters[ i ].SetScript( null );
        Erase();
    }
}

void ResetHostileLoc( uint[] values ) // Очистка
{
    HostileLocationInfo info = HostileLocationInfo( values[ 0 ], values[ 1 ] );
    if( valid( info ) && info.Serialized() )
    {
        info.Load();
        info.ResetQuest();
    }
}

void _HostileMapInit( Map map, bool firstTime )
{
    DL( "map init. Pid:" + map.ProtoId );
    __EventMapCritterDead.SubscribeToMap( map, _HostileMapCritterDead );
    __EventMapCritterIn.SubscribeToMap( map, _HostileMapInCritter );
    HostileLocationInfo info = _InfoFromMap( map );
    if( !valid( info ) || !info.Serialized() )
        return;
    info.Load();
    Critter[] allies = {};
    if( info.GetNpc( allies, true, FIND_LIFE_AND_KO | FIND_ONLY_NPC ) > 0 )
    {
        for( uint i = 0, l = allies.length(); i < l; i++ )
        {
            DL( "Ally script set" );
            allies[ i ].SetScript ( _AllyInit );
        }
    }
    Critter[] hostiles = {};
    if( info.GetNpc( hostiles, false, FIND_LIFE_AND_KO | FIND_ONLY_NPC ) > 0 )
    {
        for( uint i = 0, l = hostiles.length(); i < l; i++ )
        {
            hostiles[ i ].SetScript ( _HostileInit );
        }
    }
}

void _HostileMapInCritter( Map map, Critter cr )
{}

void _HostileMapCritterDead( Map map, Critter cr, Critter killer )
{
    HostileLocationInfo info = _InfoFromMap( map );
    if( !valid( info ) || !info.Serialized() )
        return;
    info.Load();
    Critter[] hostiles = {};
    if( info.GetNpc( hostiles, false, FIND_LIFE_AND_KO | FIND_ONLY_NPC ) == 0 ) // Все мобы мертвы
    {
        DL( "completed" );
        info.CompleteQuest();
        map.SetScript( null );
		__EventMapCritterDead.UnsubscribeFromMap( map, _HostileMapCritterDead );
		__EventMapCritterIn.UnsubscribeFromMap( map, _HostileMapInCritter );
        return;
    }
    if( cr.IsPlayer() && cr.Id == info.PlayerId )   // Убит игрок. Союзники возвращаются на домашнюю позицию.
    {
        for( uint i = 0, l = hostiles.length(); i < l; i++ )
        {
            NpcPlanes::DropPlanes( hostiles[ i ] );
        }
        Critter[] allies = {};
        if( info.GetNpc( allies, true, FIND_LIFE_AND_KO | FIND_ONLY_NPC ) > 0 )
        {
            for( uint i = 0, l = allies.length(); i < l; i++ )
            {
                if( valid( allies[ i ] ) )
                    SendAllyHome( allies[ i ] );
            }
        }
    }

}

// Скрипты союзника
void _AllyInit( Critter cr, bool firstTime )
{
    DL( "Ally init" );
    cr.HostileLQIsStoped = true;
    cr.IsNoHome = false;
    __EventCritterIdle.SubscribeToCritter( cr, _AllyIdle );
    __EventCritterSomeCritterAttacked.SubscribeToCritter( cr, _AllySmthAttacked );
    __EventCritterShow.SubscribeToCritter( cr, _AllyShowCritter );
}

void _AllyIdle( Critter cr )
{
    if( cr.HostileLQIsStoped || !valid( cr.GetMap() ) )
        return;
    HostileLocationInfo info = _InfoFromCr( cr );
    if( !valid( info ) || !info.Serialized() )
        return;
    info.Load();
    Critter player = GetCritter( info.PlayerId );
    if( !valid( player ) )
    {
        SendAllyHome( cr );
        return;
    }
    Map map = player.GetMap();
    if( !valid( map ) )
    {
        SendAllyHome( cr );
        return;
    }
    Location loc = map.GetLocation();
    if( !valid( loc ) || loc.Id != info.LocId )
    {
        SendAllyHome( cr );
        return;
    }
    if( map.Id == cr.GetMap().Id )
    {
        if( GetCrittersDistantion( cr, player ) > 20 )
            NpcPlanes::AddWalkPlane( cr, 0, player.HexX, player.HexY, Random( 0, 5 ), true, 3 );
    }
    else
    {
        uint16 hX = player.HexX;
        uint16 hY = player.HexY;
        if( Caravan::GetFreeHex( map, 4, hX, hY ) )
        {
            Obsolete::CritterTransitToMapCoords( cr, map.Id, hX, hY, Random( 0, 5 )  );
        }
    }
}

void SendAllyHome( Critter cr )
{
    NpcPlanes::DropPlanes( cr );
    cr.HostileLQIsStoped = true;
    cr.IsNoHome = false;
    Obsolete::CritterTransitToMapCoords( cr, cr.HomeMapId, cr.HomeHexX, cr.HomeHexY, cr.HomeDir );
}

void _AllySmthAttacked( Critter cr, Critter fromCr, Critter attacker )
{
    if( cr.HostileLQIsStoped )
        return;
}

void _AllyShowCritter( Critter cr, Critter showCrit )
{
    DL( "Show critter" );
    HostileLocationInfo info = _InfoFromCr( cr );
    if( !valid( info ) && !info.Serialized() )
        return;
    info.Load();
    DL( "Info loaded" );
    if( cr.HostileLQIsStoped )
    {
        if( showCrit.IsPlayer() && showCrit.Id == info.PlayerId )
        {
            DL( "Player remembered" );
            cr.HostileLQIsStoped = false;
            cr.IsNoHome = true;
        }
        else
        {
            return;
        }
    }
}

// Диалоги с союзниками
// val = 1, следовать, val = 0, стоять на месте
void r_SetFollow( Critter player, Critter npc, int val )
{
    if( valid( npc ) )
    {
        npc.HostileLQIsStoped = ( val == 0 );
        npc.IsNoHome = val != 0;
    }
}

// Скрипты противника
void _HostileInit( Critter cr, bool firstTime )
{
    __EventCritterIdle.SubscribeToCritter( cr, _AllyIdle );
    __EventCritterAttacked.SubscribeToCritter( cr, _HostileAttacked );
    __EventCritterShowDist1.SubscribeToCritter( cr, _HostileShowCritter );
    __EventCritterDead.SubscribeToCritter( cr, _HostileDead );
    __EventCritterMessage.SubscribeToCritter( cr, _HostileMessage );
    cr.ShowCritterDist1 = 10;
}

void _HostileMessage( Critter cr, Critter fromCr, int message, int value )
{
    if( message == MSG_KILL_EM && fromCr.NpcRole == cr.NpcRole )
    {
        NpcPlanes::AddAttackPlane( cr, 0, value );
    }
}

void _HostileShowCritter( Critter cr, Critter showCrit )
{
    if( showCrit.IsPlayer() || showCrit.NpcRole == NPC_ROLE_ALLY )
    {
        NpcPlanes::AddAttackPlane( cr, 0, showCrit.Id );
    }
}

bool _HostileAttacked( Critter cr, Critter attacker )
{
    if( attacker.IsPlayer() || attacker.NpcRole == NPC_ROLE_ALLY )
    {
        SendMessage::SendMessage( cr,  MSG_KILL_EM, attacker.Id, MESSAGE_TO_WHO_SEES_ME  );
    }
    return false;
}

void _HostileDead( Critter cr, Critter killer )
{
    bool                 toAll = false;
    HostileLocationInfo info = _InfoFromCr( cr );
    if( valid( info ) && info.Serialized() )
    {
        info.Load();
        if( info.DeadPercent( false ) > 20 )
            toAll = true;
    }
    if( valid( killer ) )
    {
        SendMessage::SendMessage( cr,  MSG_KILL_EM, killer.Id, ( toAll ? MESSAGE_TO_ALL_ON_MAP : MESSAGE_TO_WHO_SEES_ME  ) );
    }
}

// Диалог
void r_ShowLocation( Critter player, Critter npc, int qVar, int counterVar, int locPid, int locX, int locY )
{
    HostileLocationInfo info = HostileLocationInfo( player.Id, qVar );
    if( !valid( info ) )
        return;
    info.CVarNum = counterVar;
    info.LocPid = locPid;
    info.LocX = locX;
    info.LocY = locY;
    info.CoordDelta = 0;
    info.Save();
    info.CreateHostileLocation();
}

// То же, но с рандомным смещением в пределах одной координатной зоны
void r_ShowLocation2( Critter player, Critter npc, int qVar, int counterVar, int locPid, int locX, int locY )
{
    HostileLocationInfo info = HostileLocationInfo( player.Id, qVar );
    if( !valid( info ) )
        return;
    info.CVarNum = counterVar;
    info.LocPid = locPid;
    info.LocX = locX;
    info.LocY = locY;
    info.CoordDelta = __GlobalMapZoneLength;
    info.Save();
    info.CreateHostileLocation();
}
