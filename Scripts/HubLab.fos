// FOS Server
// Author: rifleman17
// Скрипты для квестовой локации "лаборатория хабологов".

///@ Property Critter Protected     uint8 SFAhs7Escort Group = Quests Quest = 4434 Max = 3
///@ Property Critter PrivateServer uint  SFHonomerPlayerId
///@ Property Critter PrivateServer uint  SFEscortLocation
///@ Property Critter PrivateServer uint8 SFLabFailed Max = 1
///@ Property Critter PrivateServer bool  QHubLabIsDialogRun

///@ Property Map PrivateServer bool SFLabHonomerInside

#define ENTIRE_HONOMER     (HASHI(43)) // Место спавна проводника.
#define ENTIRE_LAB_ENTER   (HASHI(1))  // Место, куда приходит нпц с сопровождающим
#define CTE_CLEAR_FOLLOWER (121)
#define LAB_WORLD_X        (532)
#define LAB_WORLD_Y        (1435)
#define DIALOG_GUARD       (2)
#define ROLE_GUARD         (18)
#define ENTIRE_DOOR_NEAR   (HASHI(19)) // Гекс перед дверью, на котором будет переходить хономер перед ее открытием
#define ENTIRE_REPAIR      (HASHI(20)) // Гекс на котором Хономер останавливается для ремонта
#define ENTIRE_DOOR        (HASHI(21)) // Гекс под дверью
#define MSG_DIALOG_END     (4023)
#define ROLE_START_DIALOG  (22) // Роль нпц, который затевает обсуждение произошедшего
#define STR_ALARM          (8030)
#define STR_OPEN           (8031)
#define MSG_OPEN           (4024)
#define ENTIRE_HELL        (HASHI(242))

// #define DL #(s) (Log("" + s))
#define DL #(s)

// Квест "Секретная лаборатория хабологов".
bool d_IsHonomerNear(Critter player, Critter npc)
{
    Map map = player.GetMap();
    Critter[] critters = {};
    if (Obsolete::GetCritters(map, Content::Critter::ElronologistFemale, FIND_LIFE | FIND_ONLY_NPC, critters) > 0) {
        for (uint i = 0, l = critters.length(); i < l; i++) {
            if (critters[i].DialogId == Content::Dialog::sf_honomer)
                return true;
        }
    }
    return false;
}

bool d_NoHonomerNear(Critter player, Critter npc)
{
    return !d_IsHonomerNear(player, npc);
}

// Добавление проводника на карту sf_hubb.
void AddNewHonomer()
{
    Map map = GetMapByPid(Content::Map::sf_hubb, 0);
    uint16 hx = 0;
    uint16 hy = 0;
    if (valid(map) && Entire::GetNearEntire(map, ENTIRE_HONOMER, hx, hy)) {
        Critter[] critters = {};
        Obsolete::GetCritters(map, Content::Critter::ElronologistFemale, FIND_ALL | FIND_ONLY_NPC, critters);
        for (uint i = 0, l = critters.length(); i < l; i++) {
            if (critters[i].DialogId == Content::Dialog::sf_honomer)
                return;
        }
        int[] props = {CritterProperty::DialogId, Content::Dialog::sf_honomer};
        Critter npc = map.AddNpc(Content::Critter::ElronologistFemale, hx, hy, Random(0, 5), Tla::GetCritPropsDict(props));
        npc.SetScript(_HonomerInit);
    }
}

void _HonomerInit(Critter cr, bool firstTime)
{
    GameInstance.OnGlobalMapProcess.SubscribeToCritter(cr, _HonomerGlobalProcess);
    GameInstance.OnCritterFinish.SubscribeToCritter(cr, _HonomerFinish);
    GameInstance.OnCritterDead.SubscribeToCritter(cr, _HonomerDead);
    GameInstance.OnCritterIdle.SubscribeToCritter(cr, _HonomerIdle);
    GameInstance.OnCritterMessage.SubscribeToCritter(cr, _HonomerMessage);
    GameInstance.OnNpcPlaneEnd.SubscribeToCritter(cr, _HonomerPlaneEnd);
}

void _HonomerMessage(Critter cr, Critter fromCr, int message, int value)
{
    if (value == 2 || value == 4) {
        NpcDialog::_NpcMessage(cr, fromCr, message, value);
    }
}

bool _HonomerPlaneEnd(Critter cr, int planeId, int reason, Critter someCr, Item someItem)
{
    NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(cr, planeId);

    if (NpcPlanes::IsNoPlanes(cr) && d_HonomerInLab(cr, cr)) {
        uint16 hx = 0, hy = 0;
        Map map = cr.GetMap();
        if (valid(map) && Entire::MapGetEntireCoords(map, ENTIRE_DOOR_NEAR, 0, hx, hy)) {
            if (hx == cr.HexX && hy == cr.HexY) {
                // Хономер стоит перед дверью
                // Открываем дверь и даем план на продвижение к компу
                Entire::MapGetEntireCoords(map, ENTIRE_DOOR, 0, hx, hy);
                Item door = map.GetItem(hx, hy, Content::Item::door_2019);
                if (valid(door)) {
                    Lockers::SwitchLocker(door, true);
                    SavedDeferredCall(10000, Item::AutoCloseDoor, door.Id);
                }
                if (Entire::MapGetEntireCoords(map, ENTIRE_REPAIR, 0, hx, hy)) {
                    cr.HomeMapId = map.Id;
                    cr.HomeHexX = hx;
                    cr.HomeHexY = hy;
                    cr.HomeDir = 0;
                }
                return true;
            }
        }
        if (valid(map) && Entire::MapGetEntireCoords(map, ENTIRE_REPAIR, 0, hx, hy)) {
            if (plane.Type != AI_PLANE_MISC) {
                if (hx == cr.HexX && hy == cr.HexY) {
                    NpcDialog::BeginDialog(cr, 4);
                }
            }
            else {
                if (Random(1, 3) == 1)
                    _CritAnimateUse(cr);
            }
        }
    }
    return true;
}

void _HonomerDead(Critter cr, Critter killer)
{
    _HonomerIdle(cr);
}

bool _HonomerGlobalProcess(int type, Critter cr, Item car, float x, float y, float toX, float toY, float speed, uint encounterDescriptor, bool waitForAnswer)
{
    if (type != Tla::GlobalProcessStartFast && type != Tla::GlobalProcessStart) {
        bool ok = false;
        Critter[] group = GlobalmapGroupExtended::GetGlobalGroup(cr);
        // Проверка что игрок в группе с нпц
        Critter player = GetCritter(cr.SFHonomerPlayerId);
        if (valid(player)) {
            for (uint i = 0, l = group.length(); i < l; i++) {
                if (group[i].Id == player.Id) {
                    ok = true;
                    break;
                }
            }
        }

        if (!ok) {
            // Нет игрока в группе
            DeleteNpc(cr);
            return true;
        }
    }

    if (type != Tla::GlobalProcessMove) {
        if (cr.SFEscortLocation != 0) {
            Location loc = GetLocation(cr.SFEscortLocation);
            if (valid(loc)) {
                if (loc.WorldX == uint(x) && loc.WorldY == uint(y)) {
                    Map map = loc.GetMapByIndex(1);
                    Obsolete::CritterTransitToMapEntire(cr, map.Id, ENTIRE_LAB_ENTER);
                    loc.AutoGarbage = true;
                    GameInstance.OnCritterIdle.SubscribeToCritter(cr, _HonomerIdle);
                    if (cr.SFHonomerPlayerId > 0) {
                        Critter player = GetCritter(cr.SFHonomerPlayerId);
                        if (valid(player) && player.SFAhs7Escort == 2) {
                            player.SFAhs7Escort = 3;
                            player.Experience += 1000;
                        }
                    }
                    NpcDialog::BeginDialog(cr, DIALOG_GUARD);
                }
                else {
                    speed = GLOBAL_MAP_BASE_SPEED;
                    toX = loc.WorldX;
                    toY = loc.WorldY;
                }
                return true;
            }
        }
        // не найдена локация или переменная
        // такого произойти не может, но на всякий случай...
        DeleteNpc(cr);
        return true;
    }
    return false;
}

void _HonomerIdle(Critter cr)
{
    if (valid(cr.GetMap()) && cr.GetMap().Id != cr.HomeMapId) {
        cr.HomeMapId = cr.GetMap().Id;
        cr.HomeHexX = cr.HexX;
        cr.HomeHexY = cr.HexY;
        cr.HomeDir = 0;
    }
    GameInstance.OnCritterIdle.UnsubscribeFromCritter(cr, _HonomerIdle);
}

void _HonomerFinish(Critter cr)
{
    AddNewHonomer();
}

bool d_HonomerInLab(Critter player, Critter npc)
{
    Map map = npc.GetMap();
    return (valid(map) && (map.GetLocation().ProtoId == Content::Location::hubologists_lab));
}

bool d_NotHonomerInLab(Critter player, Critter npc)
{
    return !d_HonomerInLab(player, npc);
}

bool d_IsMyFollower(Critter player, Critter npc)
{
    return valid(npc) && npc.SFHonomerPlayerId == player.Id;
}

bool d_NotMyFollower(Critter player, Critter npc)
{
    return !d_IsMyFollower(player, npc);
}

void r_SetFollower(Critter player, Critter npc)
{
    if (not valid(npc))
        return;

    npc.SFHonomerPlayerId = player.Id;
    // Через игровой день сбрасываем Id
    if (npc.GetTimeEvents(CTE_CLEAR_FOLLOWER, null, null, null) > 0)
        npc.EraseTimeEvents(CTE_CLEAR_FOLLOWER);
    npc.AddTimeEvent(cte_ClearFollower, 60 * 60 * 24, CTE_CLEAR_FOLLOWER, 0);
}

uint cte_ClearFollower(Critter cr, int identifier, uint& rate)
{
    cr.SFHonomerPlayerId = 0;
    return 0;
}

void r_Travel(Critter player, Critter npc)
{
    Location loc;
    if (player.SFEscortLocation > 0)
        loc = GetLocation(player.SFEscortLocation);
    if (not valid(loc)) {
        loc = CreateLocation(Content::Location::hubologists_lab, LAB_WORLD_X, LAB_WORLD_Y, null);
        if (!valid(loc))
            return;
        loc.Hidden = true;
        loc.AutoGarbage = false;
    }
    npc.SFEscortLocation = loc.Id;
    player.SFEscortLocation = loc.Id;
    Critter[] grp = {};
    grp.insertLast(npc);
    grp.insertLast(player);
    npc.TransitToGlobal();
}

void AttackPlayer(Critter target)
{
    Map map = target.GetMap();
    if (!valid(map))
        return;
    Location loc = map.GetLocation();
    uint maps = loc.GetMapCount();
    for (uint i = 0; i < maps; i++) {
        map = loc.GetMapByIndex(i);
        Critter[] critters = {};
        Obsolete::GetCritters(map, 0, FIND_ALL | FIND_ONLY_NPC, critters);
        for (uint j = 0; j < critters.length(); j++) {
            Critter cr = critters[j];
            if (valid(cr) && NpcRevenge::IsLocalNpc(cr, map) && !EnemyStack::CheckEnemyInStack(cr, target.Id)) {
                EnemyStack::AddEnemyToStack(cr, target.Id);
                NpcPlanes::AddAttackPlane(cr, 0, target);
            }
        }
    }
}

// Охранник лабы
void _DoorGuardInit(Critter cr, bool firstTime)
{
    GameInstance.OnCritterMessage.SubscribeToCritter(cr, _DoorGuardMessage);
    GameInstance.OnCritterAttacked.SubscribeToCritter(cr, _HubAttacked);
    cr.NpcRole = ROLE_GUARD;
}
bool _HubAttacked(Critter cr, Critter attacker)
{
    AttackPlayer(cr);
    return false;
}
void _DoorGuardMessage(Critter cr, Critter fromCr, int message, int value)
{
    if (value == 2)
        NpcDialog::_NpcMessage(cr, fromCr, message, value);

    if (message == MSG_DIALOG_END && value == 2) {
        uint16 hx = 0, hy = 0;
        if (Entire::MapGetEntireCoords(cr.GetMap(), ENTIRE_DOOR_NEAR, 0, hx, hy) && hx > 0 && hy > 0 && hx != fromCr.HomeHexX && hy != fromCr.HomeHexY) {
            fromCr.HomeHexX = hx;
            fromCr.HomeHexY = hy;
        }
    }
}

// Дверь
void _DoorInit(Item item, bool firstTime)
{
    GameInstance.OnCritterUseSkill.SubscribeToOnItem(item, _DoorSkill);
}
/// Event CritterUseSkill(Critter critter, CritterProperty skill, Critter onCritter, Item onItem, const Item onScenery)

bool _DoorSkill(Critter cr, CritterProperty skill, Critter onCritter, Item onItem, const Item onScenery)
{
    if (cr.IsPlayer() && !cr.IsHide)
        return Item::_GuardedItemSkill(cr, skill, onCritter, onItem, onScenery);
    return false;
}

// Лаборанты
void _HubInit(Critter cr, bool firstTime)
{
    if (cr.NpcRole == ROLE_START_DIALOG)
        GameInstance.OnCritterMessage.SubscribeToCritter(cr, _HubMessage);
    GameInstance.OnCritterAttacked.SubscribeToCritter(cr, _HubAttacked);
}

void _HubMessage(Critter cr, Critter fromCr, int message, int value)
{
    if (value == 3)
        NpcDialog::_NpcMessage(cr, fromCr, message, value);
}

// Начало диалога между хабологами, когда игрок наступит на триггер
void t_NpcDialog(Critter player, const Item trigger, bool entered, uint8 dir)
{
    Map map = player.GetMap();
    Critter cr = player.GetMap().GetNpc(ROLE_START_DIALOG, FIND_LIFE | FIND_ONLY_NPC, 0);
    if (valid(cr) && not cr.QHubLabIsDialogRun && NpcPlanes::IsNoPlanes(cr)) {
        cr.QHubLabIsDialogRun = true;
        NpcDialog::BeginDialog(cr, 3);
    }
}

// Автоматическое закрытие двери, если Хономер вышел
void t_CloseDoor(Critter cr, const Item trigger, bool entered, uint8 dir)
{
    if (cr.IsNpc() && cr.DialogId == Content::Dialog::sf_honomer) {
        Map map = cr.GetMap();
        if (!map.SFLabHonomerInside) {
            map.SFLabHonomerInside = true;
            uint16 hx = 0, hy = 0;
            if (Entire::MapGetEntireCoords(map, ENTIRE_DOOR, 0, hx, hy)) {
                Item door = map.GetItem(hx, hy, Content::Item::door_2019);
                if (valid(door)) {
                    Lockers::SwitchLocker(door, false);
                }
            }
        }
    }
    // TODO: сделать открытие двери, если игрок наступил на триггер, дверь закрыта, и игрок в робе
}

// Если игрок не в робе наступил на триггер, будет атакован
void t_Attack(Critter cr, const Item trigger, bool entered, uint8 dir)
{
    if (cr.IsHide)
        return;

    hstring pid = 0;
    Item item = _CritGetItemArmor(cr);
    if (valid(item))
        pid = item.ProtoId;

    if (cr.IsPlayer() && pid != Content::Item::purple_robe && pid != Content::Item::keepbrige_robe && pid != Content::Item::black_robe) {
        Map map = cr.GetMap();
        if (valid(map) && cr.SFLabFailed == 0) {
            AttackPlayer(cr);
            Critter[] critters = {};
            if (Obsolete::GetCrittersHex(map, trigger.HexX, trigger.HexY, map.Width, FIND_ONLY_NPC | FIND_LIFE, critters) > 0)
                critters[0].SayMsg(SAY_SHOUT, TEXTMSG_TEXT, STR_ALARM);
        }
    }
}

bool d_InRobe(Critter cr, Critter npc)
{
    hstring pid = 0;
    Item item = _CritGetItemArmor(cr);
    if (valid(item))
        pid = item.ProtoId;
    return (pid == Content::Item::purple_robe || pid == Content::Item::keepbrige_robe || pid == Content::Item::black_robe);
}

bool d_NotRobe(Critter player, Critter npc)
{
    return !d_InRobe(player, npc);
}

void r_ShowHell(Critter player, Critter npc)
{
    Map map = GetMapByPid(Content::Map::repl_hell, 0);
    if (valid(map)) {
        uint16 hx = 0, hy = 0;
        if (Entire::MapGetEntireCoords(map, ENTIRE_HELL, 0, hx, hy))
            player.ViewMap(map, 50, hx, hy, 5);
    }
}
