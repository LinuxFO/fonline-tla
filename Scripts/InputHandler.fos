// FOS Client

void ModuleInit()
{
    Input::AddKeyDownCallback(OnKeyDown);
    Input::AddKeyUpCallback(OnKeyUp);
}

bool OnKeyDown(uint8 key, string text)
{
    HandlePressedKeys();
    if (key != DIK_TEXT)
        return HandleHotkeys(key);
    return false;
}

void OnKeyUp(uint8 key)
{
    HandlePressedKeys();
}

// Hotkeys handler
bool HandleHotkeys(int key)
{
    // Effect example, temporary
    if (Input::IsAltDown() && key == DIK_Q)
        SetEffect(EFFECT_FLUSH_MAP, 0, "");
    if (Input::IsAltDown() && key == DIK_W)
        SetEffect(EFFECT_FLUSH_MAP, 0, "Flush_Map_BlackWhite.glsl");

    // Hotkeys
    bool isHotkey = true;
    bool inputFocused = (cast<Gui::TextInput>(Gui::GetFocusedObject()) !is null || Gui::IsConsoleActive());
    if (!Input::IsCtrlDown() && !Input::IsAltDown() && !Input::IsShiftDown()) {
        switch (key) {
        case DIK_F1:
            Settings.HelpInfo = !Settings.HelpInfo;
            break;

        case DIK_F2:
            // if( SaveText( filePath, text ) )
            //    Message( MSG_GAME( MsgStr::StrLogSaved ) );
            // else
            //    Message( MSG_GAME( MsgStr::StrLogNotSaved ) );
            break;
        case DIK_F3:
            // if( SaveScreenshot( filePath ) )
            //    Message( MSG_GAME( MsgStr::StrScreenshotSaved ) );
            // else
            //    Message( MSG_GAME( MsgStr::StrScreenshotNotSaved ) );
            break;

        case DIK_F6:
            Settings.ShowPlayerNames = !Settings.ShowPlayerNames;
            break;
        case DIK_F7:
            if (Settings.DebugInfo)
                Settings.ShowNpcNames = !Settings.ShowNpcNames;
            break;

        case DIK_F8:
            Settings.MouseScroll = !Settings.MouseScroll;
            Settings.ScrollMouseRight = false;
            Settings.ScrollMouseLeft = false;
            Settings.ScrollMouseDown = false;
            Settings.ScrollMouseUp = false;
            break;

        case DIK_F9:
            if (Settings.DebugInfo)
                CustomCall("SwitchShowTrack");
            break;
        case DIK_F10:
            if (Settings.DebugInfo)
                CustomCall("SwitchShowHex");
            break;

        // Fullscreen
        case DIK_F11:
            CustomCall("SwitchFullscreen");
            break;
        // Minimize
        case DIK_F12:
            CustomCall("MinimizeWindow");
            break;

        // Mouse wheel emulate
        case DIK_PRIOR:
            MouseClick(Settings.MouseX, Settings.MouseY, MOUSE_BUTTON_WHEEL_UP);
            break;
        case DIK_NEXT:
            MouseClick(Settings.MouseX, Settings.MouseY, MOUSE_BUTTON_WHEEL_DOWN);
            break;

        // Text input switching
        case DIK_TAB:
            Gui::NextTextInput();
            break;

        // Exit
        case DIK_ESCAPE:
            GuiScreensExt::TryExit();
            break;

        default:
            break;
        }

        if (!inputFocused) {
            Gui::Screen screen = Gui::GetActiveScreen();

            // Open screen
            if (key == DIK_C && (screen.Index == CLIENT_MAIN_SCREEN_GAME || screen.Index == CLIENT_MAIN_SCREEN_GLOBAL_MAP))
                ShowScreen(CLIENT_SCREEN_CHARACTER);
            else if (key == DIK_I && (screen.Index == CLIENT_MAIN_SCREEN_GAME || screen.Index == CLIENT_MAIN_SCREEN_GLOBAL_MAP))
                ShowScreen(CLIENT_SCREEN_INVENTORY);
            else if (key == DIK_P && (screen.Index == CLIENT_MAIN_SCREEN_GAME || screen.Index == CLIENT_MAIN_SCREEN_GLOBAL_MAP))
                ShowScreen(CLIENT_SCREEN_PIP_BOY);
            else if (key == DIK_F && (screen.Index == CLIENT_MAIN_SCREEN_GAME || screen.Index == CLIENT_MAIN_SCREEN_GLOBAL_MAP))
                ShowScreen(CLIENT_SCREEN_FIX_BOY);
            else if (key == DIK_O && (screen.Index == CLIENT_MAIN_SCREEN_GAME || screen.Index == CLIENT_MAIN_SCREEN_GLOBAL_MAP))
                ShowScreen(CLIENT_SCREEN_MENU);
            else if (key == DIK_S && screen.Index == CLIENT_MAIN_SCREEN_GAME)
                ShowScreen(CLIENT_SCREEN_SKILLBOX);
            else if (key == DIK_TAB && screen.Index == CLIENT_MAIN_SCREEN_GAME)
                ShowScreen(CLIENT_SCREEN_MINIMAP);
            // Close opened screen
            else if ((key == DIK_C && screen.Index == CLIENT_SCREEN_CHARACTER) || (key == DIK_I && screen.Index == CLIENT_SCREEN_INVENTORY) ||
                     (key == DIK_P && screen.Index == CLIENT_SCREEN_PIP_BOY) || (key == DIK_F && screen.Index == CLIENT_SCREEN_FIX_BOY) ||
                     (key == DIK_O && screen.Index == CLIENT_SCREEN_MENU) || (key == DIK_S && screen.Index == CLIENT_SCREEN_SKILLBOX) ||
                     (key == DIK_TAB && screen.Index == CLIENT_SCREEN_MINIMAP)) {
                GuiScreensExt::TryExit();
            }
            // Current game time
            else if (key == DIK_SLASH && (screen.Index == CLIENT_MAIN_SCREEN_GAME || screen.Index == CLIENT_MAIN_SCREEN_GLOBAL_MAP)) {
                string str = "Time: ";
                str += (GameInstance.Day < 10 ? "0" : "") + GameInstance.Day + ".";
                str += (GameTime::GetMonth() < 10 ? "0" : "") + GameTime::GetMonth() + ".";
                str += GameTime::GetYear() + " ";
                str += (GameTime::GetHour() < 10 ? "0" : "") + GameTime::GetHour() + ":";
                str += (GameTime::GetMinute() < 10 ? "0" : "") + GameTime::GetMinute() + ":";
                str += (GameInstance.Second < 10 ? "0" : "") + GameInstance.Second;
                str += " x" + Settings.TimeMultiplier;
                Message(str, FOMB_GAME);
            }
            // Global map centring
            else if (key == DIK_HOME && screen.Index == CLIENT_MAIN_SCREEN_GLOBAL_MAP) {
                CustomCall("GmapHome");
            }
            // Other
            else if (key == DIK_SPACE && Settings.Singleplayer) {
                CustomCall("SwitchSingleplayerPause");
            }
            // Main game screen hotkeys
            else if (screen.Index == CLIENT_MAIN_SCREEN_GAME) {
                isHotkey = true;

                switch (key) {
                case DIK_Q:
                    CustomCall("SwitchLookBorders");
                    break;
                case DIK_W:
                    CustomCall("SwitchShootBorders");
                    break;

                case DIK_A: {
                    Critter chosen = GetChosen();
                    AbstractItem item = (chosen !is null ? Obsolete::GetConstItemBySlot(chosen, SLOT_HAND1) : null);
                    if (item !is null && item.Type == ItemType::Weapon && (item.Mode & 0xF) < MAX_USES)
                        Settings.Cursor = CursorType::UseWeapon;
                    else
                        isHotkey = false;
                } break;

                case DIK_G:
                    CustomCall("TryPickItemOnGround");
                    break;

                case DIK_T:
                    Settings.ShowGroups = !Settings.ShowGroups;
                    break;

                case DIK_B:
                    CustomCall("ChangeSlot");
                    break;
                case DIK_M:
                    GuiScreensExt::NextCursor();
                    break;
                case DIK_N:
                    Parameters::SwitchMainItemMode(true);
                    break;

                case DIK_COMMA:
                    ChosenActions::SetChosenActions(array<uint> = {Tla::ChosenDir, 1 /* CW */, 0, 0, 0, 0, 0});
                    break;
                case DIK_PERIOD:
                    ChosenActions::SetChosenActions(array<uint> = {Tla::ChosenDir, 0 /* CCW */, 0, 0, 0, 0, 0});
                    break;

                case DIK_HOME: {
                    Critter chosen = GetChosen();
                    if (chosen !is null)
                        MoveScreenToHex(chosen.HexX, chosen.HexY, 100, true);
                } break;
                case DIK_SCROLL: {
                    Critter chosen = GetChosen();
                    if (chosen !is null)
                        LockScreenScroll(chosen, true);
                } break;

                case DIK_H:
                    ChosenActions::SetChosenActions(array<uint> = {Tla::ChosenUseSklOnCritter, uint(CritterProperty::SkillSneak), 0, 0, 0, 0, 0});
                    break;

                // Skills
                case DIK_1:
                    ChosenActions::SetChosenActions(array<uint> = {Tla::ChosenUseSklOnCritter, uint(CritterProperty::SkillSneak), 0, 0, 0, 0, 0});
                    break;
                case DIK_2: {
                    Settings.Cursor = CursorType::UseSkill;
                    Settings.CursorData = uint(CritterProperty::SkillLockpick);
                } break;
                case DIK_3: {
                    Settings.Cursor = CursorType::UseSkill;
                    Settings.CursorData = uint(CritterProperty::SkillSteal);
                } break;
                case DIK_4: {
                    Settings.Cursor = CursorType::UseSkill;
                    Settings.CursorData = uint(CritterProperty::SkillTraps);
                } break;
                case DIK_5: {
                    Settings.Cursor = CursorType::UseSkill;
                    Settings.CursorData = uint(CritterProperty::SkillFirstAid);
                } break;
                case DIK_6: {
                    Settings.Cursor = CursorType::UseSkill;
                    Settings.CursorData = uint(CritterProperty::SkillDoctor);
                } break;
                case DIK_7: {
                    Settings.Cursor = CursorType::UseSkill;
                    Settings.CursorData = uint(CritterProperty::SkillScience);
                } break;
                case DIK_8: {
                    Settings.Cursor = CursorType::UseSkill;
                    Settings.CursorData = uint(CritterProperty::SkillRepair);
                } break;

                // Not an hotkey
                default:
                    isHotkey = false;
                    break;
                }
            }
            else {
                isHotkey = false;
            }
        }
        else {
            isHotkey = false;
        }
    }
    else {
        switch (key) {
        case DIK_F6:
            if (Settings.DebugInfo && Input::IsCtrlDown())
                Settings.ShowCritId = !Settings.ShowCritId;
            break;
        case DIK_F7:
            if (Settings.DebugInfo && Input::IsCtrlDown())
                Settings.ShowCritId = !Settings.ShowCritId;
            break;
        case DIK_F10:
            if (Input::IsShiftDown())
                CustomCall("DumpAtlases");
            break;

        // Num Pad
        case DIK_EQUALS:
        case DIK_ADD:
            if (!inputFocused) {
                if (Input::IsCtrlDown())
                    Settings.SoundVolume = CLAMP(Settings.SoundVolume + 2, 0, 100);
                else if (Input::IsShiftDown())
                    Settings.MusicVolume = CLAMP(Settings.MusicVolume + 2, 0, 100);
                else if (Input::IsAltDown() && Settings.FixedFPS < 10000)
                    Settings.FixedFPS++;
            }
            break;
        case DIK_MINUS:
        case DIK_SUBTRACT:
            if (!inputFocused) {
                if (Input::IsCtrlDown())
                    Settings.SoundVolume = CLAMP(Settings.SoundVolume - 2, 0, 100);
                else if (Input::IsShiftDown())
                    Settings.MusicVolume = CLAMP(Settings.MusicVolume - 2, 0, 100);
                else if (Input::IsAltDown() && Settings.FixedFPS > -10000)
                    Settings.FixedFPS--;
            }
            break;

        // Exit
        case DIK_ESCAPE:
            if (Input::IsShiftDown())
                Settings.Quit = true;
            break;

        default:
            isHotkey = false;
            break;
        }

        if (key == DIK_RCONTROL || key == DIK_LCONTROL || key == DIK_RCONTROL || key == DIK_LCONTROL)
            CustomCall("SetCursorPos");
    }
    return isHotkey;
}

// Pressed keys handler
void HandlePressedKeys()
{
    bool isGameWithoutConsole = (Gui::GetActiveScreen().Index == CLIENT_MAIN_SCREEN_GAME && !Gui::IsConsoleActive());
    Settings.MapZooming = (isGameWithoutConsole && Input::IsKeyPressed(DIK_Z));
    Settings.ScrollKeybLeft = (isGameWithoutConsole && Input::IsKeyPressed(DIK_LEFT));
    Settings.ScrollKeybRight = (isGameWithoutConsole && Input::IsKeyPressed(DIK_RIGHT));
    Settings.ScrollKeybUp = (isGameWithoutConsole && Input::IsKeyPressed(DIK_UP));
    Settings.ScrollKeybDown = (isGameWithoutConsole && Input::IsKeyPressed(DIK_DOWN));
}
