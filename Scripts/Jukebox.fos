// FOS Server
// Author: rifleman17
// Музыкальный автомат. В предмет бросается монетка, он проигрывает одну случайную мелодию

#define SILENCE_TIME      ( REAL_MINUTE( 3 ) )
#define STR_OUTOFORDER    ( 25 )
#define STR_LOWMONEY      ( 26 )
#define PLAY_RADIUS       ( 25 )
#define PRICE             ( 10 )

const string[] trackList =
{
    "akiss.acm", "Maybe.ogg", "ccboogie.ogg", "ppmamma.ogg"
};

void _JukeBoxInit( Item item, bool firstTime )
{
    __EventCritterUseItem.SubscribeToOnItem( item, _UseOnJukeBox );
}

bool _UseOnJukeBox( Critter cr, Item usedItem, Critter onCritter, Item item, const Item onScenery, uint param )
{
    if( valid( usedItem ) && usedItem.ProtoId == Content::Item::bottle_caps )
    {
        if( usedItem.Count < PRICE )
        {
            // Не хватает денег
            cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_LOWMONEY, "$price" + PRICE );
            return true;
        }
        else
        {
            if( item.LastUsedTime != 0 && item.LastUsedTime + SILENCE_TIME > __FullSecond )
            {
                // Недавно использовался
                cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_OUTOFORDER );
                return true;
            }
            else
            {
                uint   idx = Random( 0, trackList.length() - 1 );
                uint16 x = 0, y = 0;
                Map   map = item.GetMapPosition( x, y );
                if( valid( map ) )
                {
                    item.IsShowAnim = true;
                    SavedDeferredCall( 30000, OffJukeBox, item.Id );
                    Critter[] critters = {};
                    Obsolete::GetCrittersHex ( map,  x, y, PLAY_RADIUS, FIND_ALL | FIND_ONLY_PLAYERS, critters  );
                    _SubItem( usedItem, 10 );
                    item.LastUsedTime = __FullSecond;
                    for( uint i = 0, l = critters.length(); i < l; i++ )
                    {
                        Critter cr_ = critters[ i ];
                        if( valid( cr_ ) )
                            Media::PlayMusic( cr_, trackList[ idx ], 0, 0 );
                    }
                    return true;
                }
            }
        }
    }
    return false;
}

void OffJukeBox( uint value )
{
    Item item = GetItem( value );
    if( valid( item ) )
        item.IsShowAnim = false;
}

// Покупка автоматов в Нью-Рено
////import uint GetLocId0( Critter player ) from "QuestWarehouse";

#define ENTIRE_JB         ( 142 )

bool d_JukeboxesCheck( Critter player, Critter npc )
{
    Map map = GetMapByPid( Content::Map::newr_eld, 0 );
    if( valid( map ) )
    {
        if( Obsolete::GetItems( map, Content::Item::jukebox_off, null ) > 0 )
            return true;
    }
    return false;
}

bool d_NotJukeboxesCheck( Critter player, Critter npc )
{
    return !d_JukeboxesCheck( player, npc );
}

bool d_CanPlaceJukeBox( Critter player, Critter npc )
{
    Location loc = GetLocation( QuestWarehouse::GetLocId( player ) );
    if( valid( loc ) )
    {
        Map map = loc.GetMapByIndex( 0 );
        if( valid( map ) )
        {
            if( Entire::MapCountEntire( map, ENTIRE_JB ) == 1 )
            {
                if( Obsolete::GetItems( map, Content::Item::jukebox_off, null ) == 0 )
                    return true;
            }
        }
    }
    return false;
}

bool d_CanNotPlaceJukeBox( Critter player, Critter npc )
{
    return !d_CanPlaceJukeBox( player, npc );
}

bool d_AlreadyHasJukeBox( Critter player, Critter npc )
{
    Location loc = GetLocation( QuestWarehouse::GetLocId( player ) );
    if( valid( loc ) )
    {
        Map map = loc.GetMapByIndex( 0 );
        if( valid( map ) )
        {
            if( Entire::MapCountEntire( map, ENTIRE_JB ) == 1 )
            {
                if( Obsolete::GetItems( map, Content::Item::jukebox, null ) > 0 )
                    return true;
            }
        }
    }
    return false;
}

void r_SellJukeBox( Critter player, Critter npc )
{
    Location loc = GetLocation( QuestWarehouse::GetLocId( player ) );
    if( valid( loc ) )
    {
        Map map = loc.GetMapByIndex( 0 );
        if( valid( map ) )
        {
            if( Entire::MapCountEntire( map, ENTIRE_JB ) == 1 )
            {
                if( Obsolete::GetItems( map, Content::Item::jukebox_off, null ) == 0 )
                {
                    uint16 hX = 0;
                    uint16 hY = 0;
                    if( Entire::MapGetEntireCoords( map,  ENTIRE_JB, 0, hX, hY  ) )
                    {
                        map.AddItem( hX, hY, Content::Item::jukebox, 1 );
                        Map mapEld = GetMapByPid( Content::Map::newr_eld, 0 );
                        if( valid( mapEld ) )
                        {
                            Item[] items = {};
                            if( Obsolete::GetItems( mapEld, Content::Item::jukebox_off, items ) > 0 )
                            {
                                Item item = items[ 0 ];
                                if( valid( item ) )
                                    DeleteItem( item );
                            }
                        }
                    }
                }
            }
        }
    }
}
