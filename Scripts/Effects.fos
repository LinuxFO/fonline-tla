// FOS Server Client
#pragma rpc Client DoQuakeScreen (int noise, int timeMs, int )
#pragma rpc Client DoFlushScreen (int fromColor, int toColor, int timeMs )
// Author: cvet

//#include "Tla"

// Screen fading:
// import void FlushScreen(Critter cr, bool fadeOut, uint timeMs) from "Effects";
// import void FlushScreen(Critter cr, uint fromColor, uint toColor, uint timeMs) from "Effects";
// import void FlushScreen(Map map, bool fadeOut, uint timeMs) from "Effects";
// import void FlushScreen(Map map, uint fromColor, uint toColor, uint timeMs) from "Effects";
// Screen quake:
// import void QuakeScreen(Critter cr) from "Effects";
// import void QuakeScreen(Critter cr, uint noise, uint timeMs) from "Effects";
// import void QuakeScreen(Map map) from "Effects";
// import void QuakeScreen(Map map, uint noise, uint timeMs) from "Effects";
#ifdef __SERVER
// Default values
# define QUAKE_NOISE    ( 8 )
# define QUAKE_TIME     ( 800 )

void FlushScreen( Critter cr, bool fadeOut, uint timeMs ) // Export
{
    if( cr.IsPlayer() )
        cr.Rpc.DoFlushScreen( fadeOut ? 0xFF000000 : 0, fadeOut ? 0 : 0xFF000000, int(timeMs) );
}

void FlushScreen( Critter cr, uint fromColor, uint toColor, uint timeMs ) // Export
{
    if( cr.IsPlayer() )
        cr.Rpc.DoFlushScreen( int(fromColor), int(toColor), int(timeMs) );
}

void FlushScreen( Map map, bool fadeOut, uint timeMs ) // Export
{
    Critter[] critters = {};
    Obsolete::GetCritters( map,  0, FIND_ALL | FIND_ONLY_PLAYERS, critters  );
    for( uint i = 0, j = critters.length(); i < j; i++ )
        critters[ i ].Rpc.DoFlushScreen( fadeOut ? 0xFF000000 : 0, fadeOut ? 0 : 0xFF000000, int(timeMs) );
}

void FlushScreen( Map map, uint fromColor, uint toColor, uint timeMs ) // Export
{
    Critter[] critters = {};
    Obsolete::GetCritters( map,  0, FIND_ALL | FIND_ONLY_PLAYERS, critters  );
    for( uint i = 0, j = critters.length(); i < j; i++ )
        critters[ i ].Rpc.DoFlushScreen( int(fromColor), int(toColor), int(timeMs));
}

void QuakeScreen( Critter cr ) // Export
{
    if( cr.IsPlayer() )
        cr.Rpc.DoQuakeScreen( QUAKE_NOISE, QUAKE_TIME, 0 );
}

void QuakeScreen( Critter cr, uint noise, uint timeMs ) // Export
{
    if( cr.IsPlayer() )
        cr.Rpc.DoQuakeScreen( QUAKE_NOISE, QUAKE_TIME, 0 );
}

void QuakeScreen( Map map ) // Export
{
    Critter[] critters = {};
    Obsolete::GetCritters( map,  0, FIND_ALL | FIND_ONLY_PLAYERS, critters  );
    for( uint i = 0, j = critters.length(); i < j; i++ )
        critters[ i ].Rpc.DoQuakeScreen( QUAKE_NOISE, QUAKE_TIME, 0 );
}

void QuakeScreen( Map map, uint noise, uint timeMs ) // Export
{
    Critter[] critters = {};
    Obsolete::GetCritters( map,  0, FIND_ALL | FIND_ONLY_PLAYERS, critters  );
    for( uint i = 0, j = critters.length(); i < j; i++ )
        critters[ i ].Rpc.DoQuakeScreen( QUAKE_NOISE, QUAKE_TIME, 0 );
}
#endif

#ifdef __CLIENT
// Effects, see effects.fos
void DoFlushScreen (int fromColor, int toColor, int timeMs )
{
    FlushScreen( fromColor, toColor, timeMs );
}

void DoQuakeScreen (int noise, int timeMs, int )
{
    QuakeScreen( noise, timeMs );
}
#endif
