// FOS Server
// Author: Dagnir, rifleman17

#define MSG_IM_HAVE_ILLEGAL_ITEMS    ( 129 )  // Номер сообщения, отсылаемого игроком, если у него в инвентаре есть запрещенные предметы
#define MSG_CANCEL_PICKUP            ( 500 )
#define STR_NO_ILLEGAL_ITEMS         ( 5200 ) // Номер строки "ты зачем принес сюда это!"
#define PLANE_LOOT                   ( 30 )

void _MapInit( Map map, bool firstTime )
{
    __EventMapCritterIn.SubscribeToMap( map, _MapInCritter );

    Critter[] critters = {};
    Obsolete::GetCritters( map,  0, FIND_LIFE | FIND_ONLY_NPC, critters  );

    for( uint i = 0; i < critters.length(); i++ )
    {
        critters[ i ].ReplicationTime = 1;
        critters[ i ].MeleeDamageBase = 9999;
        critters[ i ].ActionPointsBase = 300;
        critters[ i ].ArmorClassBase = 90;
        critters[ i ].CriticalChanceBase = 95;
        critters[ i ].BonusLook = 300;
        critters[ i ].SkillUnarmed = 300;
        critters[ i ].SkillEnergyWeapons = 300;
        critters[ i ].SkillBigGuns = 300;
        critters[ i ].SkillSmallGuns = 300;
        critters[ i ].IsNoEnemyStack = true;
        critters[ i ].IsInvulnerable = true;
        critters[ i ].IsUnlimitedAmmo = true;
        critters[ i ].IsNoPush = true;
        critters[ i ].IsNoSteal = true;
        critters[ i ].IsNoDrop = true;
        critters[ i ].IsNoLoot = true;
    }

}

void _MapInCritter( Map map, Critter cr )
{
    if( HasIllegalItems( cr ) )
        SendMessage::SendMessage( cr,  MSG_IM_HAVE_ILLEGAL_ITEMS, cr.Id, MESSAGE_TO_ALL_ON_MAP  );
}

void _GuardInit( Critter cr, bool firstTime )
{
    cr.ReplicationTime = 1;
    cr.MeleeDamageBase = 9999;
    cr.ActionPointsBase = 300;
    cr.ArmorClassBase = 90;
    cr.CriticalChanceBase = 95;
    cr.BonusLook = 300;
    cr.SkillSmallGuns = 300;
    cr.SkillBigGuns = 300;
    cr.SkillUnarmed = 300;
    cr.SkillEnergyWeapons = 300;
    cr.IsUnlimitedAmmo = true;
    cr.IsNoLoot = true;
    cr.IsNoDrop = true;
    cr.IsNoSteal = true;
    cr.IsNoPush = true;
    cr.IsInvulnerable = true;
    cr.IsNoEnemyStack = true;
    __EventCritterSomeCritterStealing.SubscribeToCritter( cr, _GuardSmthStealing );
    __EventCritterSomeCritterAttack.SubscribeToCritter( cr, _GuardSmthAttack );
    __EventCritterSomeCritterUseItem.SubscribeToCritter( cr, _GuardSmthUseItem );
    __EventCritterSomeCritterDropItem.SubscribeToCritter( cr, _GuardSmthDropItem );
    __EventCritterMessage.SubscribeToCritter( cr, _GuardMessage );
    __EventCritterSomeCritterDead.SubscribeToCritter( cr, _NpcSmthDead );
    __EventNpcPlaneEnd.SubscribeToCritter( cr, _NpcPlaneEnd );
}

void _AlienInit( Critter cr, bool firstTime )
{
    __EventCritterSomeCritterStealing.SubscribeToCritter( cr, _GuardSmthStealing );
    __EventCritterSomeCritterAttack.SubscribeToCritter( cr, _GuardSmthAttack );
}


void _GuardMessage( Critter cr, Critter fromCr, int message, int value )
{
    NpcPlanes::NpcPlane[] planes = {};
    if( message == MSG_IM_HAVE_ILLEGAL_ITEMS )
    {
        NpcPlanes::AddAttackPlane( cr, 0, value, true );
        Critter target = GetCritter( value );
        if( !valid( target ) )
            return;
        if( target.IsNpc() )
            return;
        if( Random( 0, 4 ) == 1 )
            cr.SayMsg( SAY_SHOUT, TEXTMSG_TEXT, STR_NO_ILLEGAL_ITEMS, Obsolete::GetPlayerName( value ) );
    }
    else
    {
        if( message == MSG_CANCEL_PICKUP )
        {
            uint count = NpcPlanes::GetPlanes( cr, planes );
            if( count == 0 )
                return;
            uint erased = 0;
            for( uint i = 0; i < count; i++ )
            {
                if( planes[ i ].Identifier == PLANE_LOOT && planes[ i ].IdentifierExt == uint( value ) && NpcPlanes::ErasePlane( cr, i - erased  ) )
                    erased++;
            }
            if( NpcPlanes::GetPlanes( cr, PLANE_LOOT, value, planes ) != 0 )
            {
                for( uint i = 0; i < planes.length(); i++ )
                {
                    if( valid( planes[ i ] ) )
                    {
                        NpcPlanes::ErasePlane( cr, i  );
                    }
                }
            }
        }
    }
}


void _GuardSmthStealing( Critter guard, Critter thief, Critter fromCr, Item, uint )
{
    if( thief.IsPlayer() && guard.IsLife() )
    {
        NpcPlanes::AddAttackPlane( guard, 0, thief, 1, true );
    }
}

void _GuardSmthAttack( Critter guard, Critter attacker, Critter target, Item weapon, uint8 weaponMode, const Item ammo )
{
    if( attacker.IsPlayer() )
        NpcPlanes::AddAttackPlane( guard, 0, attacker, true );
}


void _GuardSmthDropItem( Critter npc, Critter fromCr, Item item )
{
    if( fromCr.IsPlayer() && npc.IsLife() )
    {
        uint pid = item.ProtoId;
        if( pid == Content::Item::active_plastic_explosive || pid == Content::Item::active_mine || pid == Content::Item::active_dynamite )
        {
            NpcPlanes::AddAttackPlane( npc, 0, fromCr, true );
        }
    }
    if( !npc.IsLife() )
        return;
    if( !CheckItemIsIllegal( item ) )
        return;
    NpcPlanes::AddPickPlane( npc, AI_PLANE_ATTACK_PRIORITY, item, 0, true );
}

void _GuardSmthUseItem( Critter npc, Critter fromCr, Item item, Critter onCritter, Item onItem, const Item onScenery, uint param )
{
    if( fromCr.IsPlayer() && npc.IsLife() )
    {
        uint pid = item.ProtoId;
        if( pid == Content::Item::plastic_explosives || pid == Content::Item::mine || pid == Content::Item::toggle_switch || pid == Content::Item::dynamite || pid == Content::Item::active_dynamite || pid == Content::Item::active_plastic_explosive || pid == Content::Item::active_mine )
        {
            NpcPlanes::AddAttackPlane( npc, 0, fromCr, true );
        }
    }
}

void _NpcSmthDead( Critter npc, Critter fromCrit, Critter killer )
{
    if( _CritCanDropItemsOnDead( fromCrit ) )
        NpcPlanes::AddWalkPlane( npc, 0, PLANE_LOOT, fromCrit.Id, fromCrit.HexX, fromCrit.HexY, 6, true, 1 );
}

// Illegal items list and checks

const hash[] Pids_IllegalItems =
{
    Content::Item::active_dynamite, Content::Item::active_plastic_explosive, Content::Item::active_mine, Content::Item::toggle_switch
};

bool HasIllegalItems( Critter cr )
{
    Item[] items = {};
    if( Obsolete::GetItems( cr, -1, items ) == 0 )
        return false;
    for( uint i = 0, l = items.length(); i < l; i++ )
    {
        if( CheckItemIsIllegal( items[ i ] ) )
            return true;
    }
    return false;
}

bool CheckItemIsIllegal( Item item )
{
    if( !valid( item ) )
        return false;
    return Pids_IllegalItems.exists(item.ProtoId);
}

bool _NpcPlaneEnd( Critter npc, int planeId, int reason, Critter someCr, Item someItem )
{
	NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(npc, planeId);

    if( plane.Identifier == PLANE_LOOT && reason == REASON_SUCCESS )
    {
        Critter cr = ::GetCritter( plane.IdentifierExt );
        if( valid( cr ) && cr.IsDead() )
        {
            Item[] items = {};
            Obsolete::GetItems( cr, SLOT_INV, items );
            Obsolete::GetItems( cr, SLOT_HAND1, items );
            Obsolete::GetItems( cr, SLOT_HAND2, items );
            Obsolete::GetItems( npc.GetMap(), cr.HexX, cr.HexY, items );

            for( uint i = 0, j = items.length(); i < j; i++ )
            {
                int type = items[ i ].Type;
                if( type < ItemType::Armor || type > ItemType::Key )
                    items[ i ] = null;
            }
            MoveItems( items, npc );
            SendMessage::SendMessage( npc,  MSG_CANCEL_PICKUP, plane.IdentifierExt, MESSAGE_TO_ALL_ON_MAP  );
            _CritAnimatePickup( npc );
            npc.Wait( __Breaktime );
        }
        return false;    // Skip global and end plane
    }
    return true;     // Run global
}
