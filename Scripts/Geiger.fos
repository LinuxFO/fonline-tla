// FOS Server Sort 2
// Author: cvet
// Geiger counter

//#include "Tla"

/*
 # Geiger
   {10350}{}{Geiger counter has no charges left.}
   {10351}{}{Geiger counter is on.}
   {10352}{}{Geiger counter is off.}
   {10353}{}{You pass the Geiger counter over your body. The rem counter reads: lex rem.}
   {10354}{}{The rem counter reads: lex rem.}
   {10355}{}{Nothing happens.}
   {10356}{}{Geiger counter charged.}
   {10357}{}{Geiger counter charge is lex cur/lex max.}


   {10350}{}{%s has no charges left.}  -- При попытке использовать, когда не осталось зарядов. Заряды выводятся зеленой полоской, так же как патроны у оружия.
   {10351}{}{%s is on.}  -- При включении счетчика гейгера. (Полоижть в руку и кликнуть по нему. Не используется из открытого инвентаря.)
   {10352}{}{%s is off.}  -- При выключении счетчика гейгера.
   {10353}{}{You pass the Geiger counter over your body. The rem counter reads: %d}  -- При включении счетчика гейгера. Показывает уровень радиации.
   {10354}{}{This item can only be used from the interface bar.}  -- При попытке использовать внутри инвентаря.
   {10355}{}{Nothing happens.}

   sound\SFX\GEIGER.ACM

   Content::Item::geiger_counter
 */

#pragma property Item PrivateServer bool GeigerEnabled
#pragma property Item PrivateServer int  GeigerCapacity
#pragma property Item PrivateServer uint GeigerTimeEvent

#define GEIGER_MAX_CAPACITY       ( 100 )
#define GEIGER_DURATION           ( REAL_SECOND( 5 ) ) // 5 real seconds
#define GEIGER_HEX_RANGE          ( 20 )               // Range of critters collect
#define GEIGER_ENERGY_CHARGE      ( 10 )
#define GEIGER_FUSION_CHARGE      ( 50 )

#define STR_GEIGER_NO_CHARGES     ( 10350 )
#define STR_GEIGER_ON             ( 10351 )
#define STR_GEIGER_OFF            ( 10352 )
#define STR_GEIGER_FIRST_CHECK    ( 10353 )
#define STR_GEIGER_LOOP_CHECK     ( 10354 )
#define STR_GEIGER_NOTHING        ( 10355 )
#define STR_GEIGER_ADD_CHARGE     ( 10356 )
#define STR_GEIGER_CUR_CHARGE     ( 10357 )

bool UseGeiger( Critter cr, Item geiger ) // Export
{
    if( geiger.GeigerEnabled )
    {
        geiger.GeigerEnabled = false;
        if( geiger.GeigerTimeEvent != 0 )
        {
            CancelDeferredCall( geiger.GeigerTimeEvent );
            geiger.GeigerTimeEvent = 0;
        }
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_GEIGER_OFF );
    }
    else
    {
        if( geiger.GeigerCapacity == 0 )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_GEIGER_NO_CHARGES );
            return true;
        }

        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_GEIGER_FIRST_CHECK, "$rem" + cr.RadiationLevel );

        geiger.GeigerCapacity -= 1;
        if( geiger.GeigerCapacity <= 0 )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_GEIGER_NO_CHARGES );
        }
        else
        {
            // Turn on and loop
            geiger.GeigerEnabled = true;
            geiger.GeigerTimeEvent = SavedDeferredCall( GAME_SECOND_TO_TICK( GEIGER_DURATION ), ProcessGeiger, geiger.Id );
            cr.PlaySound( "GEIGER.ACM", true );
        }
    }

    return true;
}

bool UseItemOnGeiger( Critter cr, Item geiger, Item item ) // Export
{
    hash itemPid = item.ProtoId;
    if( ( itemPid == Content::Item::small_energy_cell || itemPid == Content::Item::micro_fusion_cell ) && geiger.GeigerCapacity < GEIGER_MAX_CAPACITY )
    {
        uint needCharge = GEIGER_MAX_CAPACITY - geiger.GeigerCapacity;
        uint charge = ( itemPid == Content::Item::small_energy_cell ? GEIGER_ENERGY_CHARGE : GEIGER_FUSION_CHARGE );
        uint needItems = needCharge / charge;
        if( ( needCharge % charge ) != 0 )
            needItems++;
        if( needItems > item.Count )
            needItems = item.Count;
        geiger.GeigerCapacity += needItems * charge;
        if( geiger.GeigerCapacity > GEIGER_MAX_CAPACITY )
            geiger.GeigerCapacity = GEIGER_MAX_CAPACITY;
        _SubItem( item, needItems );
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_GEIGER_ADD_CHARGE );
    }
    else
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_GEIGER_NOTHING );
    }
    return true;
}

bool UseSkillOnGeiger( Critter cr, Item geiger, CritterProperty skill ) // Export
{
    if( skill == SKILL_PICK_ON_GROUND )
        return false;                                                     // Pick, move

    if( skill == CritterProperty::SkillScience )
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_GEIGER_CUR_CHARGE, "$cur" + geiger.GeigerCapacity + "$max" + GEIGER_MAX_CAPACITY );
    else
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_GEIGER_NOTHING );
    return true;
}

void ProcessGeiger( uint value )
{
    Item geiger = GetItem( value );
    if( not valid( geiger ) )
        return;
    if( !geiger.GeigerEnabled )
        return;                    // Off

    if( geiger.GeigerCapacity > 0 )
        geiger.GeigerCapacity -= 1;

    // Show rems
    if( geiger.Accessory == ItemOwnership::CritterInventory )
    {
        Critter cr = GetCritter( geiger.CritId );
        if( valid( cr ) )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_GEIGER_LOOP_CHECK, "$rem" + cr.RadiationLevel );
            if( geiger.GeigerCapacity <= 0 )
            {
                cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_GEIGER_NO_CHARGES );
                cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, STR_GEIGER_OFF );
                cr.PlaySound( "GEIGER.ACM", true );
            }
        }
    }
    else if( geiger.Accessory == ItemOwnership::MapHex )
    {
        uint16 hx = 0, hy = 0;
        Map   map = geiger.GetMapPosition( hx, hy );
        if( valid( map ) )
        {
            Critter[] critters = {};
            Obsolete::GetCrittersHex ( map,  hx, hy, GEIGER_HEX_RANGE - 1, FIND_ALL, critters  );
            // Calculate aprox value of radiation
            uint aproxValue = 0;
            for( uint i = 0, j = critters.length(); i < j; i++ )
            {
                Critter cr = critters[ i ];
                uint     val = cr.RadiationLevel * ( GEIGER_HEX_RANGE - GetDistantion( cr.HexX, cr.HexY, hx, hy ) ) / GEIGER_HEX_RANGE;
                if( val > aproxValue )
                    aproxValue = val;
            }
            // Show to all
            map.SetTextMsg( hx, hy, COLOR_GRAY, TEXTMSG_GAME, STR_GEIGER_LOOP_CHECK, "$rem" + aproxValue );
        }
    }

    if( geiger.GeigerCapacity <= 0 ) // Turn off
    {
        geiger.GeigerEnabled = false;
        geiger.GeigerTimeEvent = 0;
        return;
    }

    geiger.GeigerTimeEvent = SavedDeferredCall( GAME_SECOND_TO_TICK( GEIGER_DURATION ), ProcessGeiger, value );
}
