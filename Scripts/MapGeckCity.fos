// FOS Server Sort 2
// Author: rifleman17
// Скрипты для города, который можно построить, использовав ГЕКК.
// ГЭКК нужно использовать на пустынном энкаунтере (Content::Location::desert_1..Content::Location::desert_12)

// Свойство, по которому будет проверяться, житель ли это города из ГЕКК или нет
///@ Property Critter PrivateServer uint GCityCitizen
///@ Property Critter PrivateServer uint MapGeckCityTraderSkillBarter
///@ Property Location PrivateServer uint[] GeckCityMembers
///@ Property Location PrivateServer uint GeckCityLeader
///@ Property Map PrivateServer uint GeckCityDoor
///@ Property Map PrivateServer uint GeckCityCharges
///@ Property Map PrivateServer uint GeckCityTimeBroken

#define STR_WRONG_LOC            (5500) // Это место совершенно не подходит для строительства города из Г.Э.К.К.
#define STR_WRONG_PASS           (5501) // Код неверный. Активация отменена.
#define STR_RIGHT_PASS           (5502) // Код принят. Начат процесс активации Г.Э.К.К.а.
#define STR_ACCESS_LEADER        (5503) // Сохранены сведения о жителе Города. Имя:lex pname
#define STR_ACCESS_MEMBER        (5504) // Поздравляем! Ваши сведения записаны в базу данных Города. Вы получите расширенный доступ ко всем системам.
#define STR_CREATION_END         (5505) // Работа Генератора Эдемских Кущ Компактного завершена. Добро пожаловать в Город из Г.Э.К.К.а!
#define STR_CANT_OPEN_DOOR       (5506) // Электронный замок на этой двери невозможно открыть стандартными способами. От отмычек или динамита не будет никакого толку.
#define STR_CITIZEN_ADDED        (5507) // lex leadername включил вас в списки жителей Города из Г.Э.К.К.
#define STR_CITIZEN_REMOVED      (5508) // lex leadername исключил вас из списка жителей Города из Г.Э.К.К.
#define STR_GENERATOR_CHARGED    (5509) // Генератор заряжен, всего зарядов:lex charges. Примерное время бесперебойной работы барьера, часов:lex time.
#define STR_CONSOLE_OUT_OF_ORDER (5510) // Терминал не функционирует. Система перезагружается.
#define STR_BRAKE_CONSOLE        (5511) // Посмотрим, что здесь можно сделать...
#define LOC_PID_GECK_CITY        (Content::Location::geck_city)
#define CLOSE_DOOR_TIME          (GetFullSecond() + (60 * 20)) // Время в игровых секундах до автоматического закрытия двери. (одна реальная минута
// В этой переменной сохраняется Id локации с городом из Гекка
#define HOMEPOS_RADIUS               (10) // Радиус, в котором от домашней позиции должен находиться НПЦ, чтобы считалось, что он добрался до места.
#define XP_CREATE_CITY               (25000) // Опыт за создание города
#define FORCE_DIALOG_PLAYER_NOTFOUND (10) // Номер строки диалога с главным компьютером города, в котором пишется, что игрок не найден
#define FORCE_DIALOG_PLAYER_ADDED    (7) // Номер строки диалога с главным компьютером города, в котором пишется, что игрок добавлен в списки жителей города
#define FORCE_DIALOG_PLAYER_REMOVED  (8) // Номер строки диалога с главным компьютером города, в котором пишется, что игрок удален из списков жителей города
#define FORCE_DIALOG_ERROR           (9) // Неизвестная ошибка
#define ENTRY_CITYHALL               (17)    // Номер гекса на который перемещается житель при входе в город.
#define ENTRY_DOCTOR                 (18)    // Номер гекса клиники, в которую можно привести доктора.
#define ENTRY_TRADER                 (19)    // Номер гекса магазина, в него можно привести торговца.
#define ENTRY_OUTER_TERMINAL         (20)    // Гекс рядом с внешним терминалом
#define ENTRY_GUARD                  (21)    // Гекс для размещения наемных охранников
#define ENTRY_BARMAN                 (22)    // Кафе. Гекс для  бармена
#define ENTRY_BAR                    (23)    // Кафе. Гекс для посетителей
#define ENTRY_CELLAR_ENTRANCE        (24)    // Штабквартира. Гекс перед входом
#define ENTRY_CITIZEN_CAR            (100)   // Два гекса для машин жителей
#define ENTANCE_CITYHALL             (1)     // Порядковый номер входа "штабквартира"
#define ENTRY_CITIZEN_EXIT           (2)     // Специальный закрытый выход для жителей
#define ENTRY_REPLICATOR_TANK        (30)    // Номер гекса, на котором устанавливается репликатор
#define ENTRY_REPLICATOR_SPAWN       (31)    // Номер гекса, на котором появляется возрожденный игрок
#define MAPLOOP_0                    (65000) // Период, на который тратится 1 батарейка в генераторе, при расчете: активен барьер на входе или нет
#define _GetUptime                   #(charges)(uint(charges *(MAPLOOP_0 / 1000) / 3600)) // Время в часах игровое в зависимости от числа зарядов
#define CHARGES_MFC                  (10) // Число зарядов генератора c одного реактора
#define CHARGES_CEC                  (1)  // Число зарядов генератора c одной малой батареи
#define MAX_CELLS                    (100) // Максимальное число батареек за раз, которые можно загрузить в генератор
#define GATES_NET_NUM                (1)  // Номер сети для барьера на входе.
#define CITIZENS_TRADING_SKILL       (10) // Навык бартера для нпц-торговца в ГизГ
// energy_barrier.fos
#define BM_OFF          (1)
#define BM_ON           (0)
#define BM_HALF_ON      (2)
#define BM_OFF_NO_GUARD (3)

void ModuleInit()
{
    GameInstance.OnGlobalMapCheckEntranceAllowed.Subscribe(entrance_Geck);
}

bool entrance_Geck(Location geck, Critter[] critters, uint8 entrance)
{
    if (geck.ProtoId == Content::Location::geck_city) {
        if (entrance == ENTANCE_CITYHALL) {
            for (int k = 0, l = critters.length(); k < l; k++) {
                Critter cr = critters[k];
                if (valid(cr) && !IsPlayerCitizen(cr, geck))
                    return false;
            }
        }
    }
    return true;
}

// Выдача ГЕККА игроку с присвоением скрипта
void r_GiveGeck(Critter cr, Critter npc)
{
    Item geck = cr.AddItem(Content::Item::geck, 1);
    if (valid(geck))
        geck.SetupScript(_GeckInit);
}

void _GeckInit(Item geck, bool firstTime)
{
    geck.IsCanUse = true;
    geck.OnCritterUseItem.Subscribe(_GeckUse);
}

bool _GeckUse(Critter cr, Item item, Critter onCritter, Item onItem, StaticItem onScenery, uint param)
{
    if (valid(onItem) || valid(onCritter) || valid(onScenery))
        return false;

    Map map = cr.GetMap();
    if (!valid(map))
        return false;

    Location loc = map.GetLocation();
    if (!valid(loc))
        return false;

    if (!loc.AutoGarbage)
        return false;

    uint locPid = loc.ProtoId;
    if (locPid < Content::Location::desert_1 || locPid > Content::Location::desert_12) {
        cr.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_WRONG_LOC);
        return true;
    }

    CreateCity(cr, item);
    return true;
}

void CreateCity(Critter player, Item geck)
{
    DeleteItem(geck);

    Critter[] grp = {};
    Critter leader = GlobalmapGroupExtended::GetFollowLeader(player);
    if (!valid(leader))
        leader = player;

    grp.insertLast(leader);
    GlobalmapGroupExtended::GetFollowGroup(leader, CritterFindType::Alive, grp);

    Location loc = CreateLocation(LOC_PID_GECK_CITY, player.WorldX, player.WorldY, grp);
    if (!valid(loc))
        return;

    loc.AutoGarbage = false;
    loc.Hidden = false;
    loc.Radius = 6;

    uint[] acceptedPlayers = {};
    for (uint i = 0, l = grp.length(); i < l; i++) {
        Critter cr = grp[i];
        if (!valid(cr))
            continue;
        if (!cr.IsPlayer())
            continue;

        if (cr.GCityCitizen > 0)
            continue; // Невозможно быть жителем двух городов одновременно

        cr.GCityCitizen = loc.Id;
        acceptedPlayers.insertLast(cr.Id);
        leader.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_ACCESS_LEADER, "$pname" + Obsolete::GetPlayerName(cr.Id));
        cr.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_ACCESS_MEMBER);
        cr.Experience += XP_CREATE_CITY;
        cr.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, 3480, "$exp" + XP_CREATE_CITY);
    }
    player.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_CREATION_END);
    player.AddItem(Content::Item::used_geck, 1);
    loc.GeckCityLeader = player.Id;
    loc.GeckCityMembers = acceptedPlayers;
    leader.TransitToGlobal();
}

// Проверка, является ли криттер жителем данного города из ГЕККА
bool IsPlayerCitizen(Critter cr)
{
    if (!valid(cr))
        return false;

    Map map = cr.GetMap();
    if (!valid(map))
        return false;

    Location loc = map.GetLocation();
    if (!valid(loc))
        return false;

    return IsPlayerCitizen(cr, loc);
}

bool IsPlayerCitizen(Critter cr, Location loc)
{
    if (!valid(cr) || !valid(loc))
        return false;

    uint[] acceptedPlayers = loc.GeckCityMembers.clone();
    for (uint i = 0; i < acceptedPlayers.length(); i++)
        if (cr.Id == acceptedPlayers[i])
            return true;
    return false;
}

// Проверка, является ли криттер лидером данного города из ГЕККА
// Лидер может исключать или удалять игрока из списка жителей города
bool IsPlayerLeader(Critter cr)
{
    if (!valid(cr))
        return false;

    Map map = cr.GetMap();
    if (!valid(map))
        return false;

    Location loc = map.GetLocation();
    if (!valid(loc))
        return false;

    return loc.GeckCityLeader == cr.Id;
}

// Добавление игрока в списки жителей
bool AddCitizen(Critter leader, Critter player)
{
    if (!valid(leader))
        return false;

    Map map = leader.GetMap();
    if (!valid(map))
        return false;

    Location loc = map.GetLocation();
    if (!valid(loc))
        return false;

    uint[] acceptedPlayers = loc.GeckCityMembers.clone();
    for (uint i = 0; i < acceptedPlayers.length(); i++)
        if (player.Id == acceptedPlayers[i])
            return true;

    player.GCityCitizen = loc.Id;
    acceptedPlayers.insertLast(player.Id);
    loc.GeckCityMembers = acceptedPlayers;
    return true;
}

// Исключение игрока из списков жителей
bool RemoveCitizen(Critter leader, Critter player)
{
    if (!valid(leader))
        return false;

    Map map = leader.GetMap();
    if (!valid(map))
        return false;

    Location loc = map.GetLocation();
    if (!valid(loc))
        return false;

    uint[] acceptedPlayers = loc.GeckCityMembers.clone();
    for (uint i = 0; i < acceptedPlayers.length(); i++) {
        if (player.Id == acceptedPlayers[i]) {
            acceptedPlayers.removeAt(i);
            loc.GeckCityMembers = acceptedPlayers;
            if (player.GCityCitizen != 0)
                player.GCityCitizen = 0;
            return true;
        }
    }
    return false;
}

// Очистка списка
void ClearCitizens(Critter leader)
{
    if (!valid(leader))
        return;

    Map map = leader.GetMap();
    if (!valid(map))
        return;

    Location loc = map.GetLocation();
    if (!valid(loc))
        return;

    uint[] acceptedPlayers = {};
    acceptedPlayers.insertLast(leader.Id);
    loc.GeckCityMembers = acceptedPlayers;
}

// Работа со списком жителей города
bool d_IsPlayerLeader(Critter player, Critter none)
{
    return IsPlayerLeader(player);
}

uint dlg_RemoveCitizen(Critter player, Critter npc, string playerName)
{
    if (!IS_DIALOG_SAY_MODE(playerName))
        return 0;

    Critter crConst = GetPlayer(playerName);
    if (valid(crConst)) {
        Critter cr = GetCritter(crConst.Id);
        if (valid(cr)) {
            if (cr.Id == player.Id) {
                return FORCE_DIALOG_PLAYER_NOTFOUND;
            }
            if (RemoveCitizen(player, cr)) {
                cr.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_CITIZEN_REMOVED, "$leadername" + Obsolete::GetPlayerName(player.Id));
                return FORCE_DIALOG_PLAYER_REMOVED;
            }
            else {
                return FORCE_DIALOG_ERROR;
            }
        }
    }
    else {
        return FORCE_DIALOG_ERROR;
    }
    return FORCE_DIALOG_PLAYER_NOTFOUND;
}

uint dlg_AddCitizen(Critter player, Critter npc, string playerName)
{
    if (!IS_DIALOG_SAY_MODE(playerName))
        return 0;

    Critter cr = GetCritter(GetPlayer(playerName).Id);
    if (valid(cr)) {
        if (cr.Id == player.Id) {
            return FORCE_DIALOG_PLAYER_NOTFOUND;
        }
        if (AddCitizen(player, cr)) {
            cr.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_CITIZEN_ADDED, "$leadername" + Obsolete::GetPlayerName(player.Id));
            return FORCE_DIALOG_PLAYER_ADDED;
        }
        else {
            return FORCE_DIALOG_ERROR;
        }
    }
    return FORCE_DIALOG_PLAYER_NOTFOUND;
}

void r_ClearCitizens(Critter player, Critter none)
{
    ClearCitizens(player);
}

// Двери центрального здания (Штабквартиры)
// К штабквартире имеют доступ только граждане города. Гражданами считаются те, кто был в группе, установившей ГЕКК, а также добавленные лидером позже.
// bool s_UseDoorComputer( Critter player, StaticItem scenery, CritterProperty skill, Item item )
bool s_UseDoorComputer(Critter player, StaticItem scenery, Item item, int skill)
{
    if (valid(item) || skill != SKILL_PICK_ON_GROUND)
        return true;

    return RunDialog(player, Content::Dialog::geck_door_outer, scenery.HexX, scenery.HexY, false);
}

bool d_IsCitizen(Critter player, Critter npc)
{
    return IsPlayerCitizen(player);
}

bool d_NotCitizen(Critter player, Critter npc)
{
    return !d_IsCitizen(player, npc);
}

void _DoorInit(Item door, bool firstTime)
{
    Map map = GetMap(door.MapId);
    if (valid(map))
        map.GeckCityDoor = door.Id;

    door.OnCritterUseSkill.Subscribe(_DoorSkill);
}

bool _DoorSkill(Item door, Critter cr, CritterProperty skill)
{
    if (door.Opened)
        return false;

    cr.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_CANT_OPEN_DOOR);
    return true;
}

void r_OpenDoor(Critter player, Critter none)
{
    Item door = GetGeckDoor(player.GetMap());
    if (!valid(door))
        return;

    Lockers::SwitchLocker(door, true);
    SavedDeferredCall(GAME_SECOND_TO_TICK(CLOSE_DOOR_TIME), Item::AutoCloseDoor, door.Id);
}

void r_CloseDoor(Critter player, Critter none)
{
    Item door = GetGeckDoor(player.GetMap());
    if (!valid(door))
        return;

    Lockers::SwitchLocker(door, false);
}

Item GetGeckDoor(Map map)
{
    if (!valid(map))
        return null;

    return GetItem(map.GeckCityDoor);
}

// Найм НПЦ для службы в своем городе из ГЕККа.
// Нанимать можно только одного НПЦ за раз.
// НПЦ будет следовать за игроком, пока тот не приведет его к месту назначения
Location GetGeckLocation(Critter player)
{
    if (!valid(player) || player.GCityCitizen == 0)
        return null;

    return GetLocation(player.GCityCitizen);
}

// Проверка, может ли игрок нанять НПЦ для службы в своем городе
// npcPid - прототип НПЦ
// maxNum - максимальное число НПЦ такого типа на карте
// homeEntry - номер гекса с домашней позицией НПЦ
bool d_CanHireNpc(Critter player, Critter npc, int npcPid, int maxNum, int homeEntry)
{
    if (maxNum < 1)
        return false;

    Location loc = GetGeckLocation(player);
    if (!valid(loc))
        return false;

    // На данный момент, локация Город из ГЕККА состоит только из двух карт.
    // НПЦ могут находиться только на первой из них.
    Map map = loc.GetMapByIndex(0);
    if (!valid(map))
        return false;

    uint count = map.GetCritters(npcPid, CritterFindType::Any).length();
    if (count >= uint(maxNum))
        return false;

    return Entrance::MapCountEntry(map, uint8(homeEntry)) > count;
}

bool d_CanNotHireNpc(Critter player, Critter npc, int npcPid, int maxNum, int homeEntry)
{
    return !d_CanHireNpc(player, npc, npcPid, maxNum, homeEntry);
}

bool d_CanHireNpc(Critter player, Critter npc, int maxNum, int homeEntry)
{
    if (!valid(npc))
        return false;

    auto npcPid = npc.ProtoId;
    return d_CanHireNpc(player, npc, npcPid, maxNum, homeEntry);
}

bool d_CanNotHireNpc(Critter player, Critter npc, int maxNum, int homeEntry)
{
    return (!d_CanHireNpc(player, npc, maxNum, homeEntry));
}

// Проверка, найдена ли новая домашняя позиция в Городе из ГЕККа для НПЦ
// homeEntry - номер гекса с домашней позицией НПЦ
bool d_HomeFound(Critter player, Critter npc, int homeEntry)
{
    if (!valid(npc))
        return false;

    Location loc = GetGeckLocation(player);
    if (!valid(loc))
        return false;

    Map map = loc.GetMapByIndex(0);
    if (!valid(map))
        return false;

    Map npcMap = npc.GetMap();
    if (!valid(npcMap))
        return false;

    if (map.Id != npcMap.Id)
        return false;

    Entrance::Entry[] entries = {};
    uint count = Obsolete::ParseEntries(map, entries, homeEntry);
    if (count == 0)
        return false;

    for (uint i = 0, l = entries.length(); i < l; i++) {
        if (GetDistance(npc.HexX, npc.HexY, entries[i].HexX, entries[i].HexY) <= HOMEPOS_RADIUS)
            return true;
    }
    return false;
}

bool d_NotHomeFound(Critter player, Critter npc, int homeEntry)
{
    return !d_HomeFound(player, npc, homeEntry);
}

// Установка новой домашней позиции для НПЦ рядом с ближайшим Entry гексом
// homeEntry - номер гекса с домашней позицией НПЦ
void r_SetNewHome(Critter player, Critter npc, int homeEntry)
{
    if (!valid(npc))
        return;

    Map map = npc.GetMap();
    if (!valid(map))
        return;

    Entrance::Entry[] entries = {};
    uint count = Obsolete::ParseEntries(map, entries, homeEntry);
    if (count == 0)
        return;

    for (uint i = 0, l = entries.length(); i < l; i++) {
        if (GetDistance(npc.HexX, npc.HexY, entries[i].HexX, entries[i].HexY) <= HOMEPOS_RADIUS) {
            npc.HomeMapId = map.Id;
            npc.HomeHexX = entries[i].HexX;
            npc.HomeHexY = entries[i].HexY;
            npc.HomeDir = GetDirection(entries[i].HexX, entries[i].HexY, npc.HexX, npc.HexY);
            return;
        }
    }
}

// Скрипт карты
void _MapInit(Map map, bool firstTime)
{
    map.OnCritterIn.Subscribe(_GeckMapInCritter);
    map.OnLoop.Subscribe(_GeckMapLoop);
    map.LoopTime1 = MAPLOOP_0;
}

void _GeckMapLoop(Map map)
{
    Location loc = map.GetLocation();
    if (!valid(loc))
        return;

    if (EnergyBarier::GetNetState(loc.Id, GATES_NET_NUM) == BM_ON) {
        uint charges = map.GeckCityCharges;
        if (charges > 0) {
            charges--;
            map.GeckCityCharges = charges;
        }
        else {
            uint[] values = {GATES_NET_NUM, loc.Id};
            DeferredCall(0, EnergyBarier::DisableForceField, values);
        }
    }
}

// Жители сразу попадают в штабквартиру, если заходят на карту города из ГЕККа
// Отменено, теперь попадание на карту зависит определяется функцией входа
// Оставлено на будущее, возможно будет логика для автомобилей
void _GeckMapInCritter(Map map, Critter cr) // obsolete
{
    if (cr.IsPlayer() && cr.IsNpc()) {
        if (IsPlayerCitizen(cr)) {
            // Проверка, что игрок ближе к обычному гексу, чем к выходу для граждан
            uint16 hx = 0;
            uint16 hy = 0;
            uint16 distDefault = 0;
            uint16 distCitizen = 0;
            if (Entrance::GetEntryFreeHex(map, ENTRY_DEFAULT, hx, hy))
                distDefault = GetDistance(cr.HexX, cr.HexY, hx, hy);
            if (Entrance::GetEntryFreeHex(map, ENTRY_CITIZEN_EXIT, hx, hy))
                distCitizen = GetDistance(cr.HexX, cr.HexY, hx, hy);
            if (distDefault > distCitizen)
                return;
            if (Entrance::GetEntryFreeHex(map, ENTRY_CITYHALL, hx, hy)) {
                cr.TransitToHex(hx, hy, Random(0, 5));
                TryMoveCar(cr, map);
            }
        }
    }
}

// Отключено до момента, когда будет решена проблема с багажниками
void TryMoveCar(Critter cr, Map map)
{
    Item[] items = {}; // cr.GetItems(ItemProperty::Type, ItemType::Key);
    for (int k = 0; k < items.length(); k++) {
        Item key = items[k];
        Entrance::Entry[] entries = {};
        Obsolete::ParseEntries(map, entries, ENTRY_CAR);
        Obsolete::ParseEntries(map, entries, ENTRY_BIG_CAR);
        for (int i = 0, j = entries.length(); i < j; i++) {
            Item car = Obsolete::GetMapCar(map, entries[i].HexX, entries[i].HexY);
            if (valid(car) && car.LockerId == key.LockerId) {
                entries.clear();
                Obsolete::ParseEntries(map, entries, ENTRY_CITIZEN_CAR);
                for (uint m = 0, n = entries.length(); m < n; m++) {
                    Entrance::Entry ent = entries[m];
                    if (map.CheckPlaceForItem(ent.HexX, ent.HexY, car.ProtoId)) {
                        MoveItem(car, 1, map, ent.HexX, ent.HexY);
                        return;
                    }
                }
            }
        }
    }
}

// Энергобарьер на карте города из ГЭКК требует подпитки батареями
bool d_HasGeneratorCharges(Critter player, Critter npc)
{
    Map map = player.GetMap();
    if (!valid(map))
        return false;

    return map.GeckCityCharges > 0;
}

bool d_NoGeneratoreCharges(Critter player, Critter npc)
{
    Map map = player.GetMap();
    if (!valid(map))
        return false;
    return map.GeckCityCharges < 1;
}

// bool s_TerminalOuter( Critter player, StaticItem terminal, CritterProperty skill, Item item )
bool s_TerminalOuter(Critter player, StaticItem terminal, Item item, int skill)
{
    Map map = player.GetMap();
    if (valid(map) && map.GeckCityTimeBroken > GetFullSecond()) {
        player.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_CONSOLE_OUT_OF_ORDER);
        return true;
    }
    return EnergyBarier::s_Terminal(player, terminal, item, skill);
}

bool d_IsTerminalBroken(Critter player, Critter npc)
{
    Map map = player.GetMap();
    if (!valid(map))
        return false;
    return map.GeckCityTimeBroken > GetFullSecond();
}

bool d_NotTerminalBroken(Critter player, Critter npc)
{
    return !d_IsTerminalBroken(player, npc);
}

// НПЦ, который может сломать терминал
void r_BrakeTerminal(Critter player, Critter npc)
{
    if (!valid(npc))
        return;

    Map map = npc.GetMap();
    uint16 hx = 0;
    uint16 hy = 0;
    if (!valid(map) || !Entrance::GetEntryFreeHex(map, ENTRY_OUTER_TERMINAL, hx, hy))
        return;

    if (map.GetPathLength(npc, hx, hy, 1) > 0)
        if (NpcPlanes::AddWalkPlane(npc, 0, hx, hy, 0, true, 1))
            NpcPlanes::AddMiscPlane(npc, 0, 20, MapGeckCity::plane_Brake);
}

void plane_Brake(Critter npc)
{
    npc.SayMsg(SAY_NORM, TEXTMSG_TEXT, STR_BRAKE_CONSOLE);
    Map map = npc.GetMap();
    if (valid(map))
        map.GeckCityTimeBroken = GetFullSecond() + REAL_HOUR(16);
}

// Использование батарей на генератор
// bool s_UseGenerator( Critter cr, StaticItem scen, CritterProperty skill, Item item )
bool s_UseGenerator(Critter cr, StaticItem scen, Item item, int skill)
{
    if (!valid(item))
        return false;

    Map map = cr.GetMap();
    if (!valid(map))
        return false;

    hstring itemPid = item.ProtoId;
    uint charges = 0;
    uint itemCount = CLAMP(item.Count, 0, MAX_CELLS);
    if (itemPid == Content::Item::small_energy_cell)
        charges = CHARGES_CEC * itemCount;
    else if (itemPid == Content::Item::micro_fusion_cell)
        charges = CHARGES_MFC * itemCount;
    if (charges == 0)
        return false;

    charges = map.GeckCityCharges + charges;
    map.GeckCityCharges = charges;
    cr.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_GENERATOR_CHARGED, "$charges" + charges + "$time" + _GetUptime(charges));
    _SubItem(item, itemCount);
    return true;
}

bool d_BarrierOn(Critter player, Critter npc)
{
    Map map = player.GetMap();
    if (!valid(map))
        return false;

    Location loc = map.GetLocation();
    if (!valid(loc))
        return false;

    return (EnergyBarier::GetNetState(loc.Id, GATES_NET_NUM) == BM_ON);
}

bool d_BarrierOff(Critter player, Critter npc)
{
    Map map = player.GetMap();
    if (!valid(map))
        return false;

    Location loc = map.GetLocation();
    if (!valid(loc))
        return false;

    uint8 state = EnergyBarier::GetNetState(loc.Id, GATES_NET_NUM);
    return (state == BM_OFF || state == BM_OFF_NO_GUARD);
}

void r_SwitchBarrierMode(Critter player, Critter npc, int mode)
{
    Map map = player.GetMap();
    if (!valid(map))
        return;

    Location loc = map.GetLocation();
    if (!valid(loc))
        return;

    uint[] values = {GATES_NET_NUM, loc.Id};
    if (mode == BM_ON)
        DeferredCall(0, EnergyBarier::EnableForceField, values);
    else
        DeferredCall(0, EnergyBarier::DisableForceField, values);
}

// Общий скрипт для торговца на карте ГЕККа. Торговец должен быть прописан в trader_table.fos
void _GeckTraderInit(Critter cr, bool firstTime)
{
    Trader::_TraderInit(cr, firstTime);
    GameInstance.OnCritterBarter.SubscribeToTrader(cr, _GeckTraderBarter);
}

bool _GeckTraderBarter(Critter cr, Critter player, bool attach, uint barterCount)
{
    // Для сохранения оригинального значения навыка торговли НПЦ используется VAR_0
    if (cr.MapGeckCityTraderSkillBarter == 0)
        cr.MapGeckCityTraderSkillBarter = cr.SkillBarter;

    if (attach && barterCount < 2 && IsPlayerCitizen(player))
        cr.SkillBarter = CITIZENS_TRADING_SKILL;
    else
        cr.SkillBarter = cr.MapGeckCityTraderSkillBarter;

    return true;
}

// Проверка на наличие предмета на карте ГизГ
bool d_ItemExist(Critter player, Critter npc, int pidItem)
{
    Location loc = GetGeckLocation(player);
    if (!valid(loc))
        return false;

    for (uint i = 0; i < loc.GetMapCount(); i++) {
        Map map = loc.GetMapByIndex(i);
        if (map.GetItem(pidItem) != null)
            return true;
    }

    return false;
}

bool d_NotItemExist(Critter player, Critter npc, int pidItem)
{
    return !d_ItemExist(player, npc, pidItem);
}

void r_AddReplicator(Critter player, Critter npc)
{
    Location loc = GetGeckLocation(player);
    if (!valid(loc))
        return;

    // ENTRY_REPLICATOR_TANK
    uint16 x;
    uint16 y;
    for (uint i = 0, l = loc.GetMapCount(); i < l; i++) {
        Map map = loc.GetMapByIndex(i);
        if (valid(map)) {
            Entrance::Entry entry = Entrance::GetEntry(map, ENTRY_REPLICATOR_TANK, 0);
            if (valid(entry) && !valid(map.GetItem(entry.HexX, entry.HexY, Content::Item::replicator_tank))) {
                map.AddItem(entry.HexX, entry.HexY, Content::Item::replicator_tank, 1);
                return;
            }
        }
    }
}

void r_SetGeckReplication(Critter player, Critter npc)
{
    Location loc = GetGeckLocation(player);
    if (!valid(loc))
        return;

    for (uint i = 0, l = loc.GetMapCount(); i < l; i++) {
        Map map = loc.GetMapByIndex(i);
        if (valid(map) && !loc.AutoGarbage) {
            Entrance::Entry entry = Entrance::GetEntry(map, ENTRY_REPLICATOR_SPAWN, 0);
            if (valid(entry)) {
                player.NextReplicationMap = map.Id;
                player.NextReplicationEntry = ENTRY_REPLICATOR_SPAWN;
                return;
            }
        }
    }
}

void AddGeck(Critter cr, int, int, int)
{
    Item geck = cr.AddItem(Content::Item::geck, 1);
    if (valid(geck))
        geck.SetupScript(_GeckInit);
}
