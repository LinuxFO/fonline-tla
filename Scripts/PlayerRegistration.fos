// FOS Common

///@ Property Game Protected CritterProperty[] RegProperties

///@ RemoteCall Server AddRegistrationProperty(CritterProperty property)

///@ Property Critter Protected bool IsGenerated

///@ RemoteCall Server GeneratePlayer(CritterProperty=>int props)

/// RemoteCall Client Generated()

#ifdef __SERVER

void AddRegistrationProperty(CritterProperty property)
{
    auto properies = array<CritterProperty>(GameInstance.RegProperties);
    properies.insertLast(property);
    GameInstance.RegProperties = properies;
}

void AddRegistrationProperty(Critter critter, CritterProperty property)
{
    AddRegistrationProperty(property);
}

void GeneratePlayer(Critter cr, dict<CritterProperty, int> props)
{
    if (cr.IsGenerated)
        ThrowException("Player already generated", cr);

    Parameters::CritterGenerate(props);

    for (uint i = 0; i < props.length(); i++)
        cr.SetAsInt(props.getKey(i), props.getValue(i));

    cr.ModelNameBase = (cr.Gender == Gender::Male ? CRTYPE_DEFAULT_M : CRTYPE_DEFAULT_F);
    cr.ModelName = cr.ModelNameBase;
    cr.IsGenerated = true;
    cr.CurrentHp = cr.MaxLife;
    Log("Player generated");
}

#endif

#ifdef __CLIENT

void ModuleInit()
{
    GameInstance.OnCritterIn.Subscribe(OnCritterIn);
}

dict<CritterProperty, int> RegProps = {};

void CallRegisterPlayer(string name, string pass, dict<CritterProperty, int> props)
{
    // GetCacheData
    SetCacheDataStr("RegName__", name);
    SetCacheDataStr("RegPassword__", pass);
    RegProps = props.clone();
    CustomCall("Register\n" + name + "\n" + pass, "\n");
    GuiScreensExt::TryExit();
    Yield(10);
    DeferredCall(0, DeferredLogin);
}

void DeferredLogin()
{
    // Wait disconnection and login
    if (!__IsConnected && !Settings.IsConnecting && !Settings.IsUpdating) {
        CustomCall("Login\n" + GetCacheDataStr("RegName__") + "\n" + GetCacheDataStr("RegPassword__"), "\n");
    }
    else {
        DeferredCall(0, DeferredLogin);
    }
}

void OnCritterIn(Critter cr)
{
    if (!cr.IsChosen() || cr.IsGenerated)
        return;
    if (RegProps.length() > 0)
        ServerCall.GeneratePlayer(RegProps.clone());
}

void AddRegistrationProperty(CritterProperty property)
{
    ServerCall.AddRegistrationProperty(property);
}
#endif
