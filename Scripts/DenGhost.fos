// FOS Server Sort 2
// Author: marvi

#pragma property Global PrivateServer bool DenGhostIsDead

// dialogs
#pragma content Dialog den_ghost
#pragma content Dialog den_ghost_treasure

// dialog string numbers
#define STRNUM_SCREAM          ( 1 )
#define STRNUM_STEAL           ( 2 )
#define STRNUM_STEAL_INJURE    ( 3 )


/*
   Critter initialization
 */
void _GhostInit( Critter ghost, bool firstTime )
{
    if( firstTime )
    {
        // set max possible HP
        ghost.MaxLifeBase = 9999;
        ghost.CurrentHp = 9999;
        // and armor class
        ghost.ArmorClassBase = 90;
    }

    // syncronize ghost actual state with var value
    if( ghost.Cond == CritterCondition::Dead && !Globals.DenGhostIsDead )
        CritterState::ToLife( ghost );
    else if( ghost.Cond != CritterCondition::Dead && Globals.DenGhostIsDead  )
        CritterState::ToDead( ghost, Anim2Actions::DeadBurnRun, null  );

    __EventCritterAttacked.SubscribeToCritter( ghost, _GhostAttacked );
    __EventCritterDead.SubscribeToCritter( ghost, _GhostDead );
    __EventCritterRespawn.SubscribeToCritter( ghost, _GhostRespawn );
    __EventCritterStealing.SubscribeToCritter( ghost, _GhostStealing );
}

//
// Event Handlers
//

bool _GhostAttacked( Critter ghost, Critter attacker )
{
    // regenerate HP
    ghost.CurrentHp = ghost.MaxLife;

    // scream to scary player
    ghost.SayMsg( SAY_SHOUT_ON_HEAD, TEXTMSG_DLG,
                  DLGSTR( Content::Dialog::den_ghost, STRNUM_SCREAM ) );

    // do nothing after attack
    return true;
}

void _GhostDead( Critter ghost, Critter killeer )
{
    // ghost killed not through quest dialog
    if( !Globals.DenGhostIsDead )
    {
        // ressurect ghost
        DeferredCall( GAME_SECOND_TO_TICK( 60 ), RessurectGhost, ghost.Id );
    }
}

void _GhostRespawn( Critter ghost )
{
    Globals.DenGhostIsDead = false;
}

/*
   Handles stealing from ghost.
   Stealing attempt fails in any case with a chance for player to cripple right hand.
 */
void _GhostStealing( Critter ghost, Critter thief, Item item, uint count )
{
    if( thief.IsPlayer() )
    {
        int injureHandChance = 20;
        int injureHandRoll = Random( 1, 100 );

        if( injureHandRoll <= injureHandChance )
        {
            thief.IsDamagedRightArm = true;
            thief.SayMsg( SAY_NETMSG, TEXTMSG_DLG,
                          DLGSTR( Content::Dialog::den_ghost, STRNUM_STEAL_INJURE ) );
        }
        else
        {
            thief.SayMsg( SAY_NETMSG, TEXTMSG_DLG,
                          DLGSTR( Content::Dialog::den_ghost, STRNUM_STEAL ) );
        }
    }
}

//
// Dialog
//

/*
   Instantly kills ghost
 */
void r_KillGhost( Critter player, Critter ghost, int val )
{
    // confirm that ghost killed through quest dialog
    Globals.DenGhostIsDead = true;
    // kill ghost
    CritterState::ToDead( ghost, Anim2Actions::DeadBurnRun, null  );
    // run new dialog through time event
    DeferredCall( GAME_SECOND_TO_TICK( 60 ), RunTreasureDialog, player.Id );
}

//
// Time Event Handlers
//

/*
   Ressurects ghost
 */
void RessurectGhost( uint value )
{
    Critter ghost = GetCritter( value );
    if( !valid( ghost ) )
        return;
    // try to ressurect ghost
    if( CritterState::ToLife( ghost ) )
        return;
    else
        DeferredCall( GAME_SECOND_TO_TICK( 2 * 60 ), RessurectGhost, value );
}

/*
   Runs dialog about cursed treasure
 */
void RunTreasureDialog( uint value )
{
    Critter player = GetCritter( value );
    if( !valid( player ) )
        return;

    RunDialog( player, Content::Dialog::den_ghost_treasure, player.HexX, player.HexY, false );
}
