// FOS Server
// Author: rifleman17
// Квест "Ночь нежна" - выяснить, почему ослабли коровы на одной из ферм модока.

//#include "Tla"

#pragma property Critter PrivateServer int ModVampireFarmLocation

#pragma property Location PrivateServer uint LocModVampireFarmQuesterId

#define GAME_DAY               # (days)       ( days * 24 * 60 * 60 )
#define GAME_WEEK              # (weeks)     ( weeks * GAME_DAY( 7 ) )

#define FARM_X                 ( 940 )
#define FARM_Y                 ( 213 )
#define QVAMP_FARM_KNOWN       ( 2 )    // статус квеста: Известны координаты локации с фермой
#define QVAMP_VAMP_MISSED      ( 3 )    // статус квеста: Низкое восприятие. Вампира не заметил.
#define QVAMP_VAMP_ESCAPED     ( 4 )    // статус квеста: Вампира заметил, он удрал в неизвестном направлении.
#define QVAMP_VAMP_TARGETED    ( 5 )    // статус квеста: Вампира заметил, может найти
#define QVAMP_VAMP_FOUNDED     ( 6 )    // статус квеста: Пещера найдена.
#define QVAMP_VAMP_KILLED      ( 8 )    // статус квеста: Игрок убил вампира.
#define ENTIRE_SPAWN_BAT       ( 33 )   // Номер гекса, на котором появится летучая мышь. (ферма)
#define ENTIRE_MOVETO_BAT      ( 34 )   // Номер гекса, к которому отправится летучая мышь.
#define STR_SEENPLAYER         ( 5970 ) // Номер строки из файла FOTEXT, которую произносит мышь.
#define STR_NOT_NIGHT          ( 5971 ) // Отличное место для наблюдений. Осталось дождаться ночи и выяснить, что происходит с браминами.
#define STR_DONT_SHOOT         ( 5972 ) // Не стреляй, давай поговорим!
#define FD_CURE_SUCCESS        ( 16 )   // Успех при попытке исцелить вампира
#define FD_CURE_FAIL           ( 17 )   // Провала при попытке исцелить вампира

////import Location CreateLocationForCritter0( Critter player, int locPid, int worldX, int worldY, int delta, uint varNum ) from "Location";
////import void      SetLocationDeleteTime0( Location loc, uint time ) from "Location";
////import bool      SetKnownLoc0( Critter cr, bool byId, uint locNum ) from "Location";
////import bool      IsKnownLoc0( Critter cr, bool byId, uint locNum ) from "Location";

// Отображение локации "Ферма с вампиром" для игрока.
void r_ShowVampireFarm( Critter player, Critter npc )
{
    Location loc = Location::CreateLocationForCritter( player, Content::Location::modoc_farm, FARM_X, FARM_Y, __GlobalMapZoneLength, uint( CritterProperty::ModVampireFarmLocation ) );
    if( valid( loc ) )
    {
        Location::SetLocationDeleteTime( loc, GAME_DAY( 2 ) );
        loc.LocModVampireFarmQuesterId = player.Id;
    }
}

// Скрипт для карты ферма с вампиром
void _VampireFarmInit( Map map, bool firstTime )
{
    map.LoopTime2 =  65000 ;
    __EventMapFinish.SubscribeToMap( map, _VampireFarmFinish );
}

void _VampireFarmFinish( Map map )
{
		Location loc = map.GetLocation();
        if( !valid( loc ) )
            return;

        // Игрок не посетил ферму, либо не дошел до нужной точки статус квеста должен быть сброшен в ноль
        if( loc.LocModVampireFarmQuesterId == 0 )
            return;

        Critter cr = GetCritter( loc.LocModVampireFarmQuesterId );
        if( valid( cr ) && cr.ModJoeVampire == QVAMP_FARM_KNOWN )
            cr.ModJoeVampire = 0;
}

// Брамины
void _BrahminInit( Critter cr, bool firstTime )
{
    cr.DialogId = Content::Dialog::mob_ill_brahmin;
    CritterState::ToKnockout( cr, KNOCKOUT_ANIM2_DEFAULT( true  ), 1000, cr.HexX, cr.HexY );
}

// Триггер, переключающий статус квеста. Должны быть расположены на карте в линию
void t_ChangeStatus( Critter player, const Item trigger, bool entered, uint8 dir )
{
    if( GameTime::GetHour() < 23 && GameTime::GetHour() > 4 )   // В дневное время ничего не происходит
    {
        if( entered )
            player.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NOT_NIGHT );
        return;
    }

    Map map = player.GetMap();
    if( !valid( map ) )
        return;

    Location loc = map.GetLocation();
    if( !valid( loc ) )
        return;

    if( loc.LocModVampireFarmQuesterId != player.Id )
        return;

    // Игрок - нужный
    if( player.ModJoeVampire == QVAMP_FARM_KNOWN )
    {
        uint8 p = player.Perception;
        if( p < 5 )
            player.ModJoeVampire = QVAMP_VAMP_MISSED;
        if( p == 5 )
            player.ModJoeVampire = QVAMP_VAMP_ESCAPED;
        if( p > 5 )
            player.ModJoeVampire = QVAMP_VAMP_TARGETED;
        if( p > 4 )
            ShowVamp( map );
    }

    if( !loc.AutoGarbage )
        loc.AutoGarbage = true;

}

// Пролетающая говорящая мышь
void ShowVamp( Map map )
{
    uint16 hx = 0;
    uint16 hy = 0;
    if( Entire::GetNearEntire( map, ENTIRE_SPAWN_BAT, hx, hy ) )
    {
        Critter bat = map.AddNpc( Content::Critter::VBBat, hx, hy, Random( 0, 5 ), null);
        bat.SetScript ( _BatInit );
        if( valid( bat ) )
        {
            bat.SayMsg( SAY_NORM, TEXTMSG_TEXT, STR_SEENPLAYER );
            if( Entire::GetNearEntire( map, ENTIRE_MOVETO_BAT, hx, hy ) )
            {
                NpcPlanes::AddWalkPlane( bat, 0, hx, hy, Random( 0, 5 ), true, 1 );
            }
            bat.SetScript ( _BatInit );
        }
    }
}

void _BatInit( Critter cr, bool firstTime )
{
    __EventCritterIdle.SubscribeToCritter( cr, _BatIdle );   // Удаление вампира сразу, как дойдет до нужной точки
}

void _BatIdle( Critter cr )
{
    DeleteNpc( cr );
}

// Пещера с вампиром
void _VampireCaveInit( Map map, bool firstTime )
{
    if( firstTime )
    {
        Location loc = map.GetLocation();
        if( loc is null )
            return;

        Location::SetLocationDeleteTime( loc, GAME_WEEK( 2 ) );
        loc.AutoGarbage = false;
    }

    map.LoopTime2 =  65000 ;
    __EventMapCritterIn.SubscribeToMap( map, _VampireCaveInCritter );
}

void _VampireCaveInCritter( Map map, Critter cr )
{
    if( cr.ModJoeVampire == QVAMP_VAMP_TARGETED || cr.ModJoeVampire == QVAMP_VAMP_FOUNDED )
    {
        Location loc = map.GetLocation();
        if( loc !is null && !Location::IsKnownLoc( cr, false, loc.ProtoId ) )
            Location::SetKnownLoc( cr, true, loc.Id );
    }
}

// Скрипт вампира
void _VampireInit( Critter cr, bool firstTime )
{
    __EventCritterDead.SubscribeToCritter( cr, _VampireDead );
    __EventCritterShowDist1.SubscribeToCritter( cr, _VampireShowCritter1 );
    cr.ShowCritterDist1 = 10;
}

// Кто-то убил вампира
void _VampireDead( Critter cr, Critter killer )
{
    Map map = cr.GetMap();
    if( not valid( map ) )
        return;
    Location loc = map.GetLocation();
    if( valid( loc ) && !loc.AutoGarbage )
        loc.AutoGarbage = true;
    if( valid( killer ) && killer.IsPlayer() && killer.ModJoeVampire == QVAMP_VAMP_FOUNDED )
        killer.ModJoeVampire = QVAMP_VAMP_KILLED;
}

// Вампир видит игрока на расстоянии 10 гексов
void _VampireShowCritter1( Critter cr, Critter showCrit )
{
    cr.SayMsg( SAY_SHOUT, TEXTMSG_TEXT, STR_DONT_SHOOT );
}

// Попытка излечения вампира
uint r_TryCureVampire( Critter cr, Critter npc, int val )
{
    uint forceDialog = FD_CURE_FAIL;
    int  sk = cr.SkillDoctor;
    hash activePid = Obsolete::GetConstItemBySlot( cr, SLOT_HAND1  ).ProtoId;
    if( activePid == Content::Item::doctors_bag )
    {
        sk += 25;
        if( Random( 0, 30 ) == 0 )
            cr.DeleteItem( Content::Item::doctors_bag, 1 );
    }
    else if( activePid == Content::Item::paramedics_bag )
    {
        sk += 50;
        if( Random( 0, 30 ) == 0 )
            cr.DeleteItem( Content::Item::paramedics_bag, 1 );
    }
    if( sk >= 80 )
    {
        forceDialog = FD_CURE_SUCCESS;
    }
    else
    {
        if( sk > Random( 5, 95 ) )
            forceDialog = FD_CURE_SUCCESS;
    }
    Map map = cr.GetMap();
    if( valid( map ) )
    {
        Location loc = map.GetLocation();
        if( valid( loc ) && !loc.AutoGarbage )
            loc.AutoGarbage = true;
    }
    // Log("fd=" + forceDialog);
    return forceDialog;
}
