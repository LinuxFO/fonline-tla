// FOS Common

#pragma property Global Protected CritterProperty[] RegProperties

#pragma rpc Server AddRegistrationProperty( CritterProperty property )

#pragma property Critter Protected bool IsGenerated

#pragma rpc Server GeneratePlayer( dict< CritterProperty, int > props )

// #pragma rpc Client Generated()

#ifdef __SERVER

void AddRegistrationProperty( CritterProperty property )
{
    auto properies = array< CritterProperty >( Globals.RegProperties );
    properies.insertLast( property );
    Globals.RegProperties = properies;
}

void AddRegistrationProperty( Critter critter, CritterProperty property )
{
    AddRegistrationProperty( property );
}

void GeneratePlayer( Critter cr, dict< CritterProperty, int > props )
{
    if( cr.IsGenerated )
        ThrowException( "Player already generated", cr );

    Parameters::CritterGenerate( props );

    for( uint i = 0; i < props.length(); i++ )
        cr.SetAsInt( props.getKey( i ), props.getValue( i ) );

    cr.ModelNameBase = ( cr.Gender == Gender::Male ? CRTYPE_DEFAULT_M : CRTYPE_DEFAULT_F );
    cr.ModelName = cr.ModelNameBase;
    cr.IsGenerated = true;
    cr.CurrentHp = cr.MaxLife;
    Log( "Player generated" );
}

#endif


#ifdef __CLIENT

void ModuleInit()
{
    __EventCritterIn.Subscribe( OnCritterIn );
}

dict< CritterProperty, int > RegProps = {};

void CallRegisterPlayer( string name, string pass, dict< CritterProperty, int > props )
{
// GetCacheData
    SetCacheDataStr( "RegName__", name );
    SetCacheDataStr( "RegPassword__", pass );
    RegProps = props.clone();
    CustomCall( "Register\n" + name + "\n" + pass, "\n" );
    GuiScreensExt::TryExit();
    Yield( 10 );
    DeferredCall( 0, DeferredLogin );
}

void DeferredLogin()
{
    // Wait disconnection and login
    if( !__IsConnected && !__IsConnecting && !__IsUpdating )
    {
        CustomCall( "Login\n" + GetCacheDataStr( "RegName__" ) + "\n" + GetCacheDataStr( "RegPassword__" ), "\n" );
    }
    else
    {
        DeferredCall( 0, DeferredLogin );
    }
}

void OnCritterIn( Critter cr )
{
    if( !cr.IsChosen() || cr.IsGenerated )
        return;
    if( RegProps.length() > 0 )
        ServerRpc.GeneratePlayer( RegProps.clone() );
}

void AddRegistrationProperty( CritterProperty property )
{
    ServerRpc.AddRegistrationProperty( property );
}
#endif
