// FOS Server Sort 2
// Author: rifleman17
// Нашествие болотников на Сан-Франциско.

#pragma property Critter Protected uint8 SFInvasionMirelurkKills Group = Quests, Quest = 4409, Max = 7

#pragma content Critter BosPrivate                                                                                     // Рядовой боец БС

#define BOLO_PID                 ( Random( 0, 1 ) == 0 ? Content::Critter::GiantWasp : Content::Critter::GiantBeetle ) // прототип криттера Болотник.
#define BOLO_TEAM                ( Teams::Slaver )                                                                       // команда болотников.

#define ENTIRE_BARRICADES        ( 154 )                                                                               // Обязательные баррикады
#define ENTIRE_DEAD_BOS          ( 155 )                                                                               // Мертвые члены BOS
#define ENTIRE_INVASION          ( 126 )                                                                               // СФ доки, начало вторжения болотников
#define ENTIRE_SPAWN_PRIVATE     ( 157 )                                                                               // Место спавна бойцов BOS
#define ENTIRE_SPAWN_CORPORAL    ( 158 )                                                                               // Место спавна руководителей обороны (выдают мешки)
#define ENTIRE_PATROLINVASION    ( 159 )                                                                               // Если нельзя достать ни одну цель, болотники буду перемещаться между этими гексами
#define ENTIRE_EXIT_SF           ( 160 )                                                                               // Гекс выхода из доков. Все болотники будут стремиться добраться до него. Если добираются - переключается счетчик, и болотники удаляются.
#define BAG_PRIVATE              ( Bags::NCRCaravanNCRRangerMale )                                                     // Сумка рядового
#define DIALOG_PRIVATE           (Content::Dialog::sf_bro_private)                                                     // Диалог рядового
#define BAG_CORPORAL             ( Bags::VaultCityMilitary )                                                            // Сумка лидера
#define DIALOG_CORPORAL          (Content::Dialog::sf_bro_paladin)                                                     // Диалог лидера
#define MAX_BOLO_ON_MAP          ( 15 )                                                                                // Максимальное число болотников на карте

// Debug Log
// #define DL#(s) (Log(s))
#define DL                       # ( s )

const uint[] Num_BoloInvaders = { 3, 4, 5, 6, 7, 8, 10, 12, 13, 15 }; // Возрастающее число атакующих болотников. В момент начала вторжения = 3, каждые сутки добавляется +1..3 болотник.
uint  CurrentInvasionStage = 0;                                       // Текущее состояние процесса нападения

// Добавление болотника на нужную карту
Critter GetBoloInvader( Map map )
{
    uint16 x = 0;
    uint16 y = 0;

    DL( "get near entire" );
    if( !Entire::GetNearEntire( map, ENTIRE_INVASION, x, y ) )
        return null;

    DL( "get free hex" );
    if( !Caravan::GetFreeHex( map, 3, x, y ) )
        return null;
    int[] props = { CritterProperty::TeamId, Teams::Mob2 };
    Critter bolo =  map.AddNpc( BOLO_PID, x, y, Random( 0, 5 ), TlaExtended::GetCritPropsDict(props));
        bolo.SetScript ( MirelurkCombat::_MirelurkInit );
    if( !valid( bolo ) )
        return null;

    DL( "bolo ok" );
    return bolo;
}

// Число болотников, которое можно добавить
// stage - текущее состояние процесса вторжения
uint _Num( Map map, uint stage )
{
    uint num = Num_BoloInvaders[ stage ];
    uint realNum = Obsolete::GetCritters( map,  BOLO_PID, FIND_LIFE_AND_KO | FIND_ONLY_NPC, null  );

    return ( ( num + realNum ) > MAX_BOLO_ON_MAP ? ( MAX_BOLO_ON_MAP > realNum ? MAX_BOLO_ON_MAP - realNum : 0 ) : num );
}

// Добавление болотников на карту
void SpawnBolos( Map map, uint stage )
{
    DL( "Begin spawn" );
    uint max = _Num( map, stage );
    for( uint i = 0; i < max; i++ )
    {
        GetBoloInvader( map );
    }
}

/* Мертвый паладин на случайных энкаунтерах. У первых трех счастливчиков есть шанс найти ПА */
void _DeadPaladinInit( Critter cr, bool firstTime )
{
    if( firstTime )
    {
        if( Globals.SFBosArmourCounter > 0 )
        {
            Globals.SFBosArmourCounter -= 1;
            DL( "Added PA" );
            cr.AddItem( Content::Item::powered_armor, 1 );
            Item tag = cr.AddItem( Content::Item::tuco_dog_tag, 1 );
            if( valid( tag ) )
                tag.Info = 2;
        }
    }
    if( not cr.IsDead() )
        CritterState::ToDead( cr, Random( Anim2Actions::DeadBurst, Anim2Actions::DeadExplode  ), null );
    cr.ReplicationTime = -1;
}

void SpawnSandBags( Map map )
{
    uint   entires = Entire::MapCountEntire( map, ENTIRE_BARRICADES );
    uint16 x = 0;
    uint16 y = 0;
    for( uint i = 0; i < entires; i++ )
    {
        if( Entire::MapGetEntireCoords( map,  ENTIRE_BARRICADES, i, x, y  ) )
        {
            if( map.IsHexPassed( x, y ) )
            {
                map.AddItem( x, y, Content::Item::sandbag_3, 1 );
            }
        }
    }
}

void SpawnBos( Map map )
{
    uint16 x = 0;
    uint16 y = 0;
    uint   entires = Entire::MapCountEntire( map, ENTIRE_SPAWN_PRIVATE );
    if( Obsolete::GetCritters( map,  Content::Critter::BosPrivate, FIND_LIFE_AND_KO | FIND_ONLY_NPC, null  ) < 1 )
    {
        for( uint i = 0; i < entires; i++ )
        {
            if( Entire::MapGetEntireCoords( map,  ENTIRE_SPAWN_PRIVATE, i, x, y  ) )
            {
                if( Caravan::GetFreeHex( map, 2, x, y ) )
                {
                    int[] props =
                    {
                        CritterProperty::DialogId, DIALOG_PRIVATE, CritterProperty::BagId, BAG_PRIVATE,
                        CritterProperty::TeamId, Teams::BoSTrooper
                    };
                    Critter npc = map.AddNpc( Content::Critter::BosPrivate, x, y, Random( 0, 5 ), TlaExtended::GetCritPropsDict(props));
					npc.SetScript ( _BosInit );
                }
            }
        }
    }
    entires = Entire::MapCountEntire( map, ENTIRE_SPAWN_CORPORAL );
    if( Obsolete::GetCritters( map,  Content::Critter::BountyHunter_10, FIND_LIFE_AND_KO | FIND_ONLY_NPC, null  ) < 1 )
    {
        for( uint i = 0; i < entires; i++ )
        {
            if( Entire::MapGetEntireCoords( map,  ENTIRE_SPAWN_CORPORAL, i, x, y  ) )
            {
                if( Caravan::GetFreeHex( map, 2, x, y ) )
                {
                    int[] props =
                    {
                        CritterProperty::DialogId, DIALOG_CORPORAL, CritterProperty::BagId, BAG_CORPORAL,
                        CritterProperty::TeamId, Teams::BoSTrooper, CritterProperty::AiId, Fallout2AIPackets::BountyHunter
                    };
                    Critter npc = map.AddNpc( Content::Critter::BountyHunter_10, x, y, Random( 0, 5 ), TlaExtended::GetCritPropsDict(props));
					npc.SetScript ( _BosInit );
                }
            }
        }
    }
}

// invasion critter OnDead
void _Dead( Critter cr, Critter killer )
{
    SavedDeferredCall( MINUTE_TICKS( 10 ), DeferredDeleteCritter, cr.Id );
    if( valid( killer ) )
    {
        if( killer.IsNpc() )
            return;
        uint pid = cr.ProtoId;
        if( pid == Content::Critter::GiantWasp || pid == Content::Critter::GiantBeetle )
        {
            if( killer.SFInvasionMirelurkKills > 0 && killer.SFInvasionMirelurkKills < 6 )
                killer.SFInvasionMirelurkKills += 1;
        }
    }
}

void DeferredDeleteCritter( uint value )
{
    Critter cr = GetCritter( value );
    if( valid( cr ) )
        DeleteNpc( cr );
}

void _BosInit( Critter cr, bool firstTime )
{
    __EventCritterDead.SubscribeToCritter( cr, _Dead );
    __EventNpcPlaneEnd.SubscribeToCritter( cr, _BosPlaneEnd );

}

bool _BosPlaneEnd( Critter cr, int planeId, int reason, Critter someCr, Item someItem )
{
	NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(cr, planeId);

    if( reason == REASON_GAG_ITEM )  // бойцы братства не должны ломать баррикады
    {
        return false;
    }
    return true;
}

// * Расписание глобальных эвентов и нападения на Доки ******************************** //

#define FIRST_SIEGE_TIME          ( Time::GetNearFullSecond( 0, 1, 1, 0, 0, 0 ) )
#define NEXT_SIEGE_TIME           ( Time::GetNearFullSecond( 0, 1, 1, 0, 0, 0 ) - __FullSecond )

#define SECOND_STAGE_TIME         ( __FullSecond + 1 * 30 * 24 * 60 * 60 )                 // начало второго этапа через 30 дней
#define NEXT_SECOND_STAGE_TIME    ( 1 * 30 * 24 * 60 * 60 )                                // повторение нападений каждые 30 дней
#define END_STAGE_TIME            ( __FullSecond + 4 * 30 * 24 * 60 * 60 )                 // завершение всех этапов через 120 дней
#define FIRST_DOCKS_TIME          ( Time::GetNearFullSecond( 0, 0, 0, 1, 0, 0 ) )                // время первой волны атак на доки
#define NEXT_DOCKS_TIME           ( Time::GetNearFullSecond( 0, 0, 0, 1, 0, 0 ) - __FullSecond ) // время последующей волны атак на доки
#define THIRD_STAGE_TIME          ( __FullSecond + 1 * 30 * 24 * 60 * 60 )                 // начало третьего этапа через 30 дней после начала второго// obsolete

#define LAIR_GLOBAL_X             ( 496 )
#define LAIR_GLOBAL_Y             ( 1232 )

void SheduleSFInvasion()
{
    SavedDeferredCall( GAME_SECOND_TO_TICK( FIRST_SIEGE_TIME ), FirstStage );
    Globals.SFBosArmourCounter = 3;     // 3 случайных встречи с мертвым паладином БС с ПА
}

// Первый этап - простое переключение переменной
void FirstStage()
{
    DL( "Mirelurk invasion first stage begin" );
    Globals.SFInvasionStatus = 1;
    SavedDeferredCall( GAME_SECOND_TO_TICK( SECOND_STAGE_TIME ), SecondStage );
    SavedDeferredCall( GAME_SECOND_TO_TICK( END_STAGE_TIME ), EndInvasion );

    // Следующее нашествие будет через год
    SavedDeferredCall( GAME_SECOND_TO_TICK( NEXT_SIEGE_TIME ), FirstStage );
}


// Второй этап - нападение на Доки в несколько стадий
void SecondStage()
{
    DL( "Second stage!" );
    if( Globals.SFInvasionStatus == 0 )
        return;
    if( Globals.SFInvasionStatus == 1 )  // Первое событие второго этапа
        Globals.SFInvasionStatus = 2;

    SavedDeferredCall( GAME_SECOND_TO_TICK( FIRST_DOCKS_TIME ), DockInvasion );
    SavedDeferredCall( GAME_SECOND_TO_TICK( NEXT_SECOND_STAGE_TIME ), SecondStage );
}

// Втрожение болотников в район Доков СФ
void DockInvasion()
{
    DL( "Docks invasion, Previous Wave=" + CurrentInvasionStage );
    if( CurrentInvasionStage >= Num_BoloInvaders.length() )
    {
        CurrentInvasionStage = 0;
        return;
    }
    Map map = GetMapByPid( Content::Map::sf_dock, 0 );
    if( !valid( map ) )
        return;

    // Паладины БС и мешки
    SpawnSandBags( map );
    SpawnBos( map );
    // Болотники
    SpawnBolos( map, CurrentInvasionStage );
    // Проигрывание сирены на карте доков
    map.PlaySound( "AIRSIREN.OGG" );
    // То же, в Чайна Тауне
    map = GetMapByPid( Content::Map::sf_china, 0 );
    map.PlaySound( "AIRSIREN.OGG" );
    CurrentInvasionStage++;

    SavedDeferredCall( GAME_SECOND_TO_TICK( NEXT_DOCKS_TIME ), DockInvasion );
}

// Завершение всех этапов - истекло время
void EndInvasion()
{
    DL( "mirelurk Invasion ended" );
    StopInvasion();
    if( Globals.SFInvasionStatus != 0 )
        Globals.SFInvasionStatus = 0;
}

// DEBUG
void r_Start( Critter player, Critter npc )
{
    Map map = player.GetMap();
    if( valid( map ) )
    {
        map.PlaySound( "AIRSIREN.OGG" );
    }
    BeginInvasion();
}

void r_End( Critter player, Critter npc )
{
    StopInvasion();
}

void BeginInvasion()
{
    Map map = GetMapByPid( Content::Map::sf_dock, 0 );
    if( !valid( map ) )
        return;
    map.PlaySound( "AIRSIREN.OGG" );
    SpawnSandBags( map );
    SpawnBos( map );
    SpawnBolos( map, 4 );
}

void StopInvasion()
{
    Map map = GetMapByPid( Content::Map::sf_dock, 0 );
    if( !valid( map ) )
        return;

    Critter[] crits = {};
    Obsolete::GetCritters( map,  Content::Critter::GiantWasp, FIND_ALL | FIND_ONLY_NPC, crits  );
    Obsolete::GetCritters( map,  Content::Critter::GiantBeetle, FIND_ALL | FIND_ONLY_NPC, crits  );
    Obsolete::GetCritters( map,  Content::Critter::BountyHunter_10, FIND_ALL | FIND_ONLY_NPC, crits  );
    Obsolete::GetCritters( map,  Content::Critter::BosPrivate, FIND_ALL | FIND_ONLY_NPC, crits  );
    for( uint i = 0; i < crits.length(); i++ )
        DeleteNpc( crits[ i ] );

    Item[] items = {};
    Obsolete::GetItems( map, Content::Item::sandbag_1, items );
    Obsolete::GetItems( map, Content::Item::sandbag_2, items );
    Obsolete::GetItems( map, Content::Item::sandbag_3, items );
    Obsolete::GetItems( map, Content::Item::sandbag_4, items );
    Obsolete::GetItems( map, Content::Item::sandbag_5, items );
    for( uint i = 0; i < items.length(); i++ )
        DeleteItem( items[ i ] );
}
