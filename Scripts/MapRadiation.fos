// FOS Server
// Author: cvet
// Radiation generic map

//#include "Tla"

////import void AffectRadiation0( Critter cr, int value ) from "Radiation";

#pragma property Map PrivateServer int MapRadiationMinDose
#pragma property Map PrivateServer int MapRadiationMaxDose

#define RADIATION_LOOP        ( Random( 10000, 20000 ) ) // Radiation damage time, in milliseconds
#define RADIATION_DOSE_MIN    ( 1 )
#define RADIATION_DOSE_MAX    ( 5 )

void _LowRadiation( Map map, bool firstTime )
{
    map.LoopTime1 =  RADIATION_LOOP ;
    map.MapRadiationMinDose = RADIATION_DOSE_MIN / 2;
    map.MapRadiationMaxDose = RADIATION_DOSE_MAX / 2;
    __EventMapLoop1.SubscribeToMap( map, _MapLoop0 );
}

void _MediumRadiation( Map map, bool firstTime )
{
    map.LoopTime1 =  RADIATION_LOOP ;
    map.MapRadiationMinDose = RADIATION_DOSE_MIN;
    map.MapRadiationMaxDose = RADIATION_DOSE_MAX;
    __EventMapLoop1.SubscribeToMap( map, _MapLoop0 );
}

void _HighRadiation( Map map, bool firstTime )
{
    map.LoopTime1 =  RADIATION_LOOP ;
    map.MapRadiationMinDose = RADIATION_DOSE_MIN * 2;
    map.MapRadiationMaxDose = RADIATION_DOSE_MAX * 2;
    __EventMapLoop1.SubscribeToMap( map, _MapLoop0 );
}

void _DeadlyRadiation( Map map, bool firstTime )
{
    map.LoopTime1 =  RADIATION_LOOP ;
    map.MapRadiationMinDose = RADIATION_DOSE_MIN * 10;
    map.MapRadiationMaxDose = RADIATION_DOSE_MAX * 5;
    __EventMapLoop1.SubscribeToMap( map, _MapLoop0 );
}

void _MapLoop0( Map map )
{
    AffectRadiationToAllCritters( map, 0 );
    map.LoopTime1 =  RADIATION_LOOP ;
}

void AffectRadiationToAllCritters( Map map, int value )
{
    if( value == 0 )
        value = Random( map.MapRadiationMinDose, map.MapRadiationMaxDose );

    Critter[] critters = {};
    Obsolete::GetCritters( map,  0, FIND_LIFE_AND_KO, critters  );
    for( uint i = 0, j = critters.length(); i < j; i++ )
        Radiation::AffectRadiation( critters[ i ], value );
}
