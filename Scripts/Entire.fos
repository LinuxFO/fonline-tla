// FOS Server

class Entire
{
    hstring Name;
    uint16 HexX;
    uint16 HexY;
}

Entire
GetEntire(Map map, hstring name, int skip)
{
    Entire ent;
    if (!MapGetEntireCoords(map, name, skip, ent.HexX, ent.HexY))
        return null;
    ent.Name = name;
    return ent;
}

Entire[] ParseEntires(Map map, hstring name)
{
    Entire[] entires = {};
    uint count = MapCountEntire(map, name);
    for (uint i = 0; i < count; i++) {
        Entire ent = Entire();
        ent.Name = name;
        MapGetEntireCoords(map, name, i, ent.HexX, ent.HexY);
        entires.insertLast(ent);
    }
    return entires;
}

bool GetEntireFreeHex(Map map, hstring name, uint16& hx, uint16& hy)
{
    uint count = MapCountEntire(map, name);

    // Fisrt check direct coords
    for (uint i = 0; i < count; i++) {
        if (MapGetEntireCoords(map, name, i, hx, hy) && map.IsHexPassed(hx, hy))
            return true;
    }

    // Check borders
    if (hx == 0 || hy == 0 || hx >= map.Width - 1 || hy >= map.Height - 1)
        return false;

    // Second check coords with offsets
    for (uint i = 0; i < count; i++) {
        if (MapGetEntireCoords(map, name, i, hx, hy)) {
            for (int x = -1; x <= 1; x++) {
                for (int y = -1; y <= 1; y++) {
                    if (x == 0 && y == 0)
                        continue; // Skip direct position

                    if (Settings.MapHexagonal) {
                        if ((hx % 2) == 1 && ((x == -1 && y == 1) || (x == 1 && y == 1)))
                            continue;
                        if ((hx % 2) == 0 && ((x == -1 && y == -1) || (x == 1 && y == -1)))
                            continue;
                    }

                    if (map.IsHexPassed(hx + x, hy + y)) {
                        hx += x;
                        hy += y;
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

bool GetNearEntire(Map map, hstring name, uint16& hx, uint16& hy)
{
    uint16 hxBase = hx;
    uint16 hyBase = hy;

    Entire[] entires = ParseEntires(map, name);
    if (entires.isEmpty())
        return false;

    hx = entires[0].HexX;
    hy = entires[0].HexY;
    for (uint i = 1; i < entires.length(); i++) {
        Entire ent = entires[i];
        if (GetDistantion(hxBase, hyBase, ent.HexX, ent.HexY) < GetDistantion(hxBase, hyBase, hx, hy)) {
            hx = ent.HexX;
            hy = ent.HexY;
        }
    }

    return true;
}

// * ******************************************* Мертвая зона, заданная EntireHex'ами ******************************************* */
/*
   Всякая простая замкнутая ломаная на плоскости разбивает точки плоскости на две области – внутреннюю и внешнюю.

   из координат игрока пускается горизонтальный луч
   если луч пересекает ломаную закрытой зоны нечетное число раз - он находится во внутренней зоне ломаной, иначе в наружной

   cr - криттер, которого проверяем
   map - карта, на которой имеется мертвая зона
   dir - направление луча (лучше использовать горизонталь по х - dir = 0\
   hexFirst - номер первого из гексов, ограничивающих мертвую зону
   hexEnd - номер последнего гекса, ограничивающего мертвую зону

   номера гексов должны возрастать для каждой последующей точки.
   нельзя поставить общий номер всем гексам, иначе для общего случая (невыпуклого многоугольника мертвой зоны) будет найдено множество решений

 */
bool IsCritterInDeadZone(Critter cr, Map map, uint8 dir, uint8 hexFirst, uint8 hexEnd)
{
    uint crossNum = 0; // число пересечений луча и ломанных, ограничивающих многоугольник мертвой зоны
    for (uint i = hexFirst; i <= hexEnd; i++)
        if (BeamCrossing2Section(map, i, (i == hexEnd ? hexFirst : i + 1), cr.HexX, cr.HexY, dir))
            crossNum++;
    return crossNum % 2 == 1;
}

// Признак: луч пересекает некий отрезок между двумя Entire гексами
// map - карта
// hexNum1 - начальный гекс отрезка
// hexNum2 - конечный гекс отрезка
// beamX - координата начала луча по оси x
// beamY - координата начала луча по оси у
// dir - направление луча
// если не найдены гексы, или нет пересечения луча и отрезка между гексами - вернет false
// если луч пересекает отрезок - вернет true
bool BeamCrossing2Section(Map map, hstring hexNum1, hstring hexNum2, uint16 beamX, uint16 beamY, uint8 dir)
{
    // 1. вычисляем координаты конечной точки луча
    uint16 hx0 = beamX;
    uint16 beamX2 = hx0;
    uint16 hy0 = beamY;
    uint16 beamY2 = hy0;
    uint steps = 0;

    while (hx0 != beamX2 || hy0 != beamY2 || steps == 0) {
        steps += 1;
        hx0 = beamX2;
        hy0 = beamY2;
        map.MoveHexByDir(beamX2, beamY2, dir, steps);
    }

    // координаты конечной точки высчитаны beamX2, beamY2
    uint16 hx1 = 0;
    uint16 hx2 = 0;
    uint16 hy1 = 0;
    uint16 hy2 = 0;
    // координаты начальной и конечной точки отрезка между двумя гексами
    if (!MapGetEntireCoords(map, hexNum1, 0, hx1, hy1))
        return false;
    if (!MapGetEntireCoords(map, hexNum2, 0, hx2, hy2))
        return false;

    // Знаменатель
    float z = (int(hx1) - int(hx2)) * (int(beamY2) - int(beamY)) - (int(hy1) - int(hy2)) * (int(beamX2) - int(beamX));
    // числитель 1
    float ch = (int(hx1) - int(beamX)) * (int(beamY2) - int(beamY)) - (int(hy1) - int(beamY)) * (int(beamX2) - int(beamX));
    // числитель 2
    float cbeam = (int(hx1) - int(hx2)) * (int(hy1) - int(beamY)) - (int(hy1) - int(hy2)) * (int(hx1) - int(beamX));
    // если числители и знаменатель = 0, прямые совпадают, считаем что это не пересечение
    if (z == 0 && ch == 0 && cbeam == 0)
        return false;
    // если знаменатель = 0, отрезок и луч = параллельны, не пересекаются
    if (z == 0)
        return false;
    // точка пересечения на отрезке
    float crossS = ch / z;
    // точка пересечения на луче
    float crossB = cbeam / z;
    return 0 < crossS && crossS < 1 && 0 < crossB && crossB < 1;
}

// sdk 828
uint MapCountEntire(Map map, int entire)
{
    return MapCountEntire(map, HASH("" + entire));
}

uint MapCountEntire(Map map, hstring entire)
{
    int total = 0;
    if (valid(map)) {
        auto staticItems = map.GetStaticItems();
        for (uint i = 0; i < staticItems.length(); i++) {
            const Item staticItem = staticItems[i];
            if (EntireMatch(entire, staticItem))
                total++;
        }
    }
    return total;
}

bool EntireMatch(hstring entire, const Item entrance)
{
    if (valid(entrance) && entrance.Type == ItemType::Grid && entrance.ProtoId == Content::Item::Entrance) {
        if (entrance.Grid_ToMapEntire == entire)
            return true;
        if (entire == "0" && entrance.Grid_ToMapEntire.str.isEmpty())
            return true;
    }

    return false;
}

bool MapGetEntireCoords(Map map, hstring entire, uint skip, uint16& hexX, uint16& hexY)
{
    if (valid(map)) {
        auto staticItems = map.GetStaticItems();
        uint skipped = 0;
        for (uint i = 0; i < staticItems.length(); i++) {
            const Item staticItem = staticItems[i];
            if (EntireMatch(entire, staticItem)) {
                if (skipped == skip) {
                    hexX = staticItem.HexX;
                    hexY = staticItem.HexY;
                    return true;
                }
                skipped++;
            }
        }
    }
    return false;
}

hstring[] MapGetAllEntires(Map map)
{
    hstring[] entireNames = {};
    if (valid(map)) {
        auto staticItems = map.GetStaticItems();
        uint skipped = 0;
        for (uint i = 0; i < staticItems.length(); i++) {
            const Item staticItem = staticItems[i];
            if (staticItem.Type == ItemType::Grid && staticItem.ProtoId == Content::Item::Entrance) {
                entireNames.insertLast(staticItem.Grid_ToMapEntire);
            }
        }
    }

    return entireNames;
}
