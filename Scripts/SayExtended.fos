// FOS Server Client
///@ RPC Client ShowDialogBoxPurgatoryInvite(int)
///@ RPC Client ShowDialogBoxIllBrahmin(int)
///@ RPC Client ShowSayExtended(int msgIdHeader, int p1, int p2)

// Перевести диалог на указанный результат
///@ RPC Client ForceDialogResult(uint talkerId, bool isNpc, int result, bool refresh)
// Добавить к тексту диалога строку из FODLG_MSG
///@ RPC Client AddDialogStr(uint msg, string lexems, bool append)

///@ RPC Server Rpc_ProcessSayExtended(int, string text)
///@ RPC Server Rpc_AnswerDialogBox(int dialogID, int answerIndex, int)

///@ RPC Server Rpc_ProcessSay(string text, bool fromDialog, uint talkerId, bool isNpc)
///@ Event Common PlayerSaidText(Critter critter, string text, bool fromDialog, uint talkerId, bool isNpc)

#define MAX_SAY_TEXT_LENGTH    ( 100 )
// Игрок может отправлять текст на сервер. Переменную нужно уставлять вручную в dlg_ - функциях
// введена, чтобы не отправляли любые тексты из любых диалогов
///@ Property Critter Protected bool CanSendSay

// Answer
#define ANSWER_BEGIN           ( 0xF0 )
#define ANSWER_END             ( 0xF1 )
#define ANSWER_BARTER          ( 0xF2 )

#ifdef __SERVER

void ShowScreenEx( Critter player, int msgIdHeader )
{
    player.Rpc.ShowSayExtended( msgIdHeader, 0, 0 );
}

void Rpc_ProcessSayExtended( Critter player, int, string text )
{
    player.Wait( 1000 );
    Log( "called Rpc_ProcessSayExtended" + text );
}

void Rpc_ProcessSay( Critter player, string text, bool fromDialog, uint talkerId, bool isNpc )
{
    player.Wait( 1000 );
    if( !player.CanSendSay )
    {
        player.Wait( 10000 );         // Защита от взлома? если оно работает
        Log( "Player said restricted text " + player.Id );
    }
    if( text.length() > MAX_SAY_TEXT_LENGTH )
    {
        player.Wait( 10000 );
        Log( "Too long text from player " + player.Id + ": " + text.length() );
    }

    ReplicationTerminal::OnPlayerSaidText( player, text, fromDialog, talkerId, isNpc );

    // __EventPlayerSaidText.Raise( player, text, fromDialog );

}

#endif

#ifdef __CLIENT

void ForceDialogResult( uint talkerId, bool isNpc, int result, bool refresh )
{
    // Перегенерация диалога
    if( refresh )
        CustomCall( "DialogAnswer " + isNpc + " " + talkerId + " " + ANSWER_BEGIN );
    CustomCall( "DialogAnswer " + isNpc + " " + talkerId + " " + result );
}

void AddDialogStr( uint msg, string lexems, bool append )
{
    auto screen = Gui::GetActiveScreen();
    if( screen.Index == CLIENT_SCREEN_DIALOG )
    {
        auto dialog = cast< GuiScreens::Dialog::Dialog >( screen );
        if( dialog != null )
        {
            string text = GetMsgStr( TEXTMSG_DLG, msg );

            auto   panel = screen.FindPanel( "SpeechPanel" );
            auto   textbox = panel.FindText( "SpeechText" );
            text =  append ? dialog.Text + "##" + text : text + "##" + dialog.Text;
            text = FormatTags( text, lexems );

            int tw = 0, th = 0, lines = 0;
            GetTextInfo( text, textbox.Width, 1000, textbox.TextFont, textbox.TextFlags, tw, th, lines );
            textbox.SetSize( textbox.Parent.Width, Math::Max( th, textbox.Parent.Height ) );
            textbox.SetText( text );
        }
    }
}

void ShowSayExtended( int msgIdHeader, int p1, int p2 )
{
    dictionary params = { { "MsgHeaderId", msgIdHeader } };
    ShowScreen( CLIENT_SCREEN_SAY_EXTENDED, params );
}

#endif
// Dialgbox

#ifdef __CLIENT
void ShowDialogBox( int dialogID, string text, string[] buttonsTexts )
{
    dictionary params =
    {
        { "DialogID", dialogID },
        { "Text", text },
        { "ButtonTexts", buttonsTexts }
    };
    ShowScreen( CLIENT_SCREEN_DIALOGBOX, params );
}

void ShowDialogBoxIllBrahmin( int )
{
    string text = "Вы на самом деле готовы проверить, чем отравился брамин, используя резиновые перчатки и вантус?";
    string[] buttonsTexts = { "Да, с богом!", "НИ ЗА ЧТО!!!" };
    ShowDialogBox( TlaExtended::DialogboxNcrIllBrahmin, text, buttonsTexts );
}

void ShowDialogBoxPurgatoryInvite( int )
{
    string text = "Внимание. Начинается поединок. Вы готовы принять участие?";
    string[] buttonsTexts = { "Да", "Нет, отказываюсь" };
    ShowDialogBox( TlaExtended::DialogboxPurgatoryInvite, text, buttonsTexts );
}

#endif
#ifdef __SERVER


void ShowDialogBox( Critter player, int dialogID )
{
    switch( dialogID )
    {
    case TlaExtended::DialogboxNcrIllBrahmin:
        player.Rpc.ShowDialogBoxIllBrahmin( 0 );
        break;
    case TlaExtended::DialogboxPurgatoryInvite:
        player.Rpc.ShowDialogBoxPurgatoryInvite( 0 );
        break;

    }
}

// //import void answer_CureBrahmin0( Critter player, uint answerI, string answerS ) from "NcrCommon";
// //import void answer_BattleInvite0( Critter player, uint answerI, string answerS ) from "Purgatory";

void Rpc_AnswerDialogBox( Critter  player, int dialogID, int answerIndex, int )

{
    switch( dialogID )
    {
    case TlaExtended::DialogboxNcrIllBrahmin:
        NcrCommon::answer_CureBrahmin( player, answerIndex, "" );
        Log( "run NcrCommon::answer_CureBrahmin" );
        break;
    case TlaExtended::DialogboxPurgatoryInvite:
        Purgatory::answer_BattleInvite( player, answerIndex, "" );
        Log( "run Purgatory::answer_BattleInvite" );
        break;
    }
}


#endif
