// FOS Server Client

///@ RemoteCall Server StartDialog(uint npcId)
///@ RemoteCall Server UseSkillOnItem(uint itemId, CritterProperty skill)

#ifdef __CLIENT

void ModuleInit()
{
    auto dropMenu = FixedDropMenu::FixedDropMenu(MOUSE_BUTTON_LEFT, CursorType::Default, 500, 40, "art/intrface/", "IACCUXX1");

    dropMenu.AddButton(20, CanDialog, Dialog, "TALKN.frm", "TALKH.frm");
    dropMenu.AddButton(30, CanUse, Use, "USEGETN.frm", "USEGETH.frm");
    dropMenu.AddButton(40, CanLook, Look, "LOOKN.frm", "LOOKH.frm");
    dropMenu.AddButton(50, CanDrop, Drop, "DROPN.frm", "DROPH.frm");
    dropMenu.AddButton(55, CanRotate, Rotate, "ROTATEN.frm", "ROTATEH.frm");
    dropMenu.AddButton(60, CanUnload, DoUnload, "UNLOADN.FRM", "UNLOADH.FRM");
    dropMenu.AddButton(70, CanUseSkill, DoUseSkill, "SKILLN.FRM", "SKILLH.FRM");
    dropMenu.AddButton(100, CanCloseMenu, CloseMenu, "CANCELN.frm", "CANCELH.frm");

    // INVENH/N - инвентарь кнопка PUSHH/PUSHN - толчок; ROTATEH/ROTATEN - поворот.USEGETH/N - рука использования/LOOKH|LOOKN - просмотр подробный

    Gui::SetDropMenu(dropMenu);
}

bool CanUseSkill(Critter cr, Item item)
{
    return valid(cr) || valid(item);
}

void DoUseSkill(Critter cr, Item item)
{
    uint itemId = 0;
    uint critterId = 0;
    uint isInventory = 0;

    if (valid(item)) {
        itemId = item.Id;
        if (item.Accessory == ItemOwnership::CritterInventory)
            isInventory = 1;
    }
    else {
        if (valid(cr))
            critterId = cr.Id;
    }
    ShowScreen(CLIENT_SCREEN_SKILLBOX, dictionary = {{"TargetCritterId", critterId}, {"TargetItemId", itemId}, {"IsInventory", isInventory}});
}

bool CanDialog(Critter cr, Item item)
{
    // ToDo - диалог с предметами
    return cr != null && IsChosenAlive() && cr.IsNpc() && cr.IsLife() && cr.DialogId != 0 && !cr.IsNoTalk;
}

void Dialog(Critter cr, Item item)
{
    // ServerRpc.StartDialog( cr.Id );
    ChosenActions::SetChosenActions(array<uint> = {TlaExtended::ChosenTalkNpc, cr.Id, 0, 0, 0, 0, 0});
}

bool IsChosenAlive()
{
    Critter chosen = GetChosen();
    return chosen != null && chosen.IsLife();
}

// Close menu
bool CanCloseMenu(Critter cr, Item item)
{
    return valid(cr) || valid(item);
}

void CloseMenu(Critter cr, Item item)
{
    //
}

// Look
bool CanLook(Critter cr, Item item)
{
    return valid(cr) || valid(item);
}

void Look(Critter cr, Item item)
{
    if (valid(item))
        Message(ClientMain::item_description(item, ItemLookTypes::Default));
    else if (valid(cr))
        Message(ClientMain::critter_description(cr, CritterLookTypes::LookFull));
}

bool CanUse(Critter cr, Item item)
{
    // Loot critter
    if (cr != null && IsChosenAlive() && !cr.IsChosen() && cr.IsDead() && !cr.IsNoLoot)
        return true;
    return item != null && IsChosenAlive() && item.Accessory == ItemOwnership::MapHex && !item.IsWall &&
           (item.IsCanUse || item.IsCanUseOnSmth || item.IsCanPickUp);
}

void Use(Critter cr, Item item)
{
    // if(item.Accessory != ItemOwnership::MapHex )
    //    return;
    if (valid(item) && item.Accessory == ItemOwnership::MapHex) {
        // ServerRpc.UseSkillOnItem( item.Id, SKILL_PICK_ON_GROUND );
        ChosenActions::SetChosenActions(array<uint> = {TlaExtended::ChosenPickItem, item.ProtoId, item.HexX, item.HexY, item.Id, 0, 0});
    }
}

bool CanDrop(Critter cr, Item item)
{
    return item != null && IsChosenAlive() && IsChosenItem(item);
}

bool IsChosenItem(Item item)
{
    return item.Accessory == ItemOwnership::CritterInventory && item.CritId == GetChosen().Id;
}

void Drop(Critter cr, Item item)
{
    if (item.Stackable && item.Count > 1)
        ShowScreen(CLIENT_SCREEN_SPLIT, dictionary = {{"TargetItemId", item.Id}, {"ItemsCollection", ITEMS_CHOSEN_ALL}});
    else
        ChosenActions::SetChosenActions(array<uint> = {TlaExtended::ChosenMoveItem, item.Id, item.Count, SLOT_GROUND, 0, 0, 0});
}

bool CanRotate(Critter cr, Item item)
{
    return cr != null && CurMap != null && cr.IsChosen() && cr.IsLife();
}

void Rotate(Critter cr, Item item)
{
    ChosenActions::SetChosenActions(array<uint> = {TlaExtended::ChosenDir, 0, 0, 0, 0, 0, 0});
}

bool CanUnload(Critter cr, Item item)
{
    return item != null && item.Type == ItemType::Weapon && IsChosenAlive() && IsChosenItem(item) && item.AmmoCount > 0;
}

void DoUnload(Critter cr, Item item)
{
    ChosenActions::SetChosenActions(array<uint> = {TlaExtended::ChosenUseItem, item.Id, 0, TARGET_SELF_ITEM, uint(-1), USE_RELOAD, 0});
}

#endif

#ifdef __SERVER

void StartDialog(Critter client, uint npcId)
{
    Critter npc = GetCritter(npcId);
    if (valid(client) && client.IsLife() && valid(npc) && npc.IsLife() && npc.IsNpc() && !npc.IsNoTalk) {
        RunDialog(client, npc, false);
    }
}

void UseSkillOnItem(Critter cr, uint itemId, const CritterProperty skill)
{
    Item item = GetItem(itemId);
    if (valid(cr) && valid(item)) {
        if (item.Type == ItemType::Container || item.Type == ItemType::Door) {
            Lockers::UseSkillOnLocker(cr, item, SKILL_PICK_ON_GROUND);
        }
    }
}
#endif
