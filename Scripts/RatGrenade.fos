// FOS Server Sort 2
// Author: rifleman17
// Метательные крысы

#pragma property Critter PrivateServer hash RatGrenadeProtoId
#pragma property Critter PrivateServer uint RatGrenadeOwnerId

#pragma property Item PrivateServer uint RatGrenadeInvokeId

#define STR_AWAKE_GLOBAL    ( 30 ) // Одна из ваших оглушенных крыс пришла в себя и удрала из рюкзака! Черт. Чем это так пахнет, и что это за жидкость?
#define STR_AWAKE_MAP       ( 31 ) // Одна оглушенная крыса, по всей видимости очнулась, и выскочила из рюкзака. Прикончите эту тварь немедленно.
#define STR_VENOMED         ( 32 ) // Вы вкололи супертоксин оглушенной крысе. Теперь с каждым укусом она может отравить жертву.
// #define DL                     # (s) ( Log( "RATS: " + s ) )
#define DL                  # ( s )


void _RatGrenadeInit( Item item, bool firstTime )
{
    DL( "item init" );
    if( firstTime )
    {
        // Есть шанс, что крыса очнется через пять реальных минут
        if( Random( 1, 4 ) < 2 )
        {
            DL( "Awaking rat after 5 real minutes" );
            item.RatGrenadeInvokeId = DeferredCall( MINUTE_TICKS( Random( 4, 5 ) ), AwakeRat, item.Id );
            DL( "Awaking rat after 5 real minutes. EventId = " + item.RatGrenadeInvokeId );

        }
    }
    __EventCritterAttack.SubscribeToWeapon( item, _RatGrenadeAttack );
    __EventItemFinish.SubscribeToItem( item, _RatGrenadeFinish );
    __EventCritterUseItem.SubscribeToOnItem( item, _RatGrenadeUseOnMe ); //Не работает использование предмета на предмет
}

bool _RatGrenadeUseOnMe( Critter cr, Item usedItem, Critter onCritter, Item item, const Item onScenery, uint param  )
{
    hash pid = item.ProtoId;
    if( valid( usedItem ) && pid == Content::Item::rat_grenade && usedItem.ProtoId == Content::Item::supertoxine )
    {
        // Только при использовании в инвентаре, не на земле
        Item[] items = {};
        Item foundedItem;
        if( Obsolete::GetItems( cr, -1, items ) > 0 )
        {
            for( uint i = 0, l = items.length(); i < l; i++ )
            {
                foundedItem = items[ i ];
                if( valid( foundedItem ) && foundedItem.Id == item.Id )
                {
                    DeleteItem( foundedItem );
                    cr.AddItem( Content::Item::rat_grenade_venom, 1 );
                    cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_VENOMED );
                    return true;
                }
            }
        }
    }
    return false;
}

void AwakeRat( uint value )
{
    DL( "Rat awaken" );
    Item item = GetItem( value );
    if( valid( item ) )
    {
        item.RatGrenadeInvokeId = 0;
        if( item.CritId > 0 )
        {
            Critter cr = GetCritter( item.CritId );
            if( valid( cr ) )
            {
                Map map = cr.GetMap();
                if( valid( map ) )
                {
                    cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_AWAKE_MAP );
                    uint16 x = cr.HexX;
                    uint16 y = cr.HexY;
                    if( Caravan::GetFreeHex( map, 2, x, y ) )
                    {
                        uint8    dir = GetDirection( x, y, cr.HexX, cr.HexY );
                        int[]    ratVars = { CritterProperty::RatGrenadeProtoId, item.ProtoId, CritterProperty::RatGrenadeOwnerId, item.CritId };
                        Critter rat = map.AddNpc( Content::Critter::RegularRat, x, y, dir, TlaExtended::GetCritPropsDict(ratVars));
        rat.SetScript ( _RatInit );
                        if( valid( rat ) )
                            NpcPlanes::AddAttackPlane( rat, 0, cr );
                    }
                }
                else
                {
                    cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_AWAKE_GLOBAL );
                }
                DeleteItem( item );
            }
        }
    }
}

bool _RatGrenadeAttack( Critter cr, Critter target, Item item, uint8 weaponMode, const Item ammo )
{
    DL( "Rat attack" );
    if( !target.IsNoPvp )
    {
        uint[] values = { cr.Id, target.Id, item.Id, 1 };
        SavedDeferredCall( 1, RatAttack, values );
    }
    if( target.BodyType == BodyTypes::Floater )
    {
        switch( cr.ModLourenceFloater )
        {
        case 1:
            cr.ModLourenceFloater = 2;
            break;
        case 3:
            cr.ModLourenceFloater = 4;
            break;
        }
    }
    return false;
}

void RatAttack( uint[] values )
{
    Critter target = GetCritter( values[ 1 ] );
    Item    item = GetItem( values[ 2 ] );
    if( valid( item ) && valid( target ) )
    {
        uint16 hX = target.HexX;
        uint16 hY = target.HexY;
        if( item.MapId > 0 )
        {
            Map map = item.GetMapPosition( hX, hY );
            if( valid( map ) )
            {
                if( Caravan::GetFreeHex( map, 2, hX, hY ) )
                {
                    uint8    dir = GetDirection( hX, hY, target.HexX, target.HexY );
                    int[]    ratVars = { CritterProperty::RatGrenadeProtoId, item.ProtoId, CritterProperty::RatGrenadeOwnerId, item.CritId };
                    Critter rat = map.AddNpc( Content::Critter::RegularRat, hX, hY, dir, TlaExtended::GetCritPropsDict(ratVars));
					rat.SetScript ( _RatInit );
                    if( valid( rat ) )
                    {
                        NpcPlanes::AddAttackPlane( rat, 0, target );
                        DeleteItem( item );
                    }
                }
            }
        }
        else
        {
            if( values[ 3 ] < 2 )
            {
                DL( "Rat in inventory" );
                values[ 3 ] = 2;
                SavedDeferredCall( 2, RatAttack, values );
            }
        }
    }
}

void _RatGrenadeFinish( Item item )
{
    DL( "Rat grenade finish" );
	if( item.RatGrenadeInvokeId != 0 )
		CancelDeferredCall( item.RatGrenadeInvokeId );
}

// Скрипт крысы, вылезающей из гранаты, если она проснулась
void _RatInit( Critter cr, bool firstTime )
{
    Mob::_MobInit( cr, firstTime );
    cr.TeamId = Teams::Mob0;
    cr.ReplicationTime = -1;
    __EventCritterDead.SubscribeToCritter( cr, _RatDead );
    DL( "v7 " + cr.RatGrenadeProtoId );
    if( cr.RatGrenadeProtoId == Content::Item::rat_grenade_venom )
        cr.Toxic = 120;
    else if( cr.RatGrenadeProtoId == Content::Item::rat_grenade_tnt )
        cr.AddTimeEvent( cte_ExplodeRat, REAL_SECOND( Random( 5, 10 ) ), 0 );

    cr.AddTimeEvent( cte_DeleteRat, REAL_MINUTE( Random( 5, 10 ) ), 0 );
}

uint cte_ExplodeRat( Critter cr, int identifier, uint& rate )
{
    DL( "Exploded" );
    Map map = cr.GetMap();
    if( valid( map ) )
        Explode::Explode( cr.GetMap(), cr.HexX, cr.HexY, null, Content::Item::active_dynamite, cr.RatGrenadeOwnerId, Random( 0, 50 ), Random( 0, 1 ) );
    else
        DeleteNpc( cr );
    return 0;
}

void _RatDead( Critter cr, Critter killer )
{
    DL( "Rat dead" );
    cr.AddTimeEvent( cte_DeleteRat, REAL_MINUTE( 5 ), 0 );
}

uint cte_DeleteRat( Critter cr, int identifier, uint& rate )
{
    DL( "Delete Rat" );
    if( cr.IsNpc() )
        DeleteNpc( cr );
    return 0;
}
