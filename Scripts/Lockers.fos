// FOS Common
// Author: cvet
// Doors and keys stuff.

// Lockers and doors
#pragma property Item Protected         uint    LockerId
#pragma property Item PrivateServer     uint16  LockerComplexity
#pragma property Item Public            bool    Locker_Locked
#pragma property Item Public            bool    Locker_Jammed
#pragma property Item Public            bool    Locker_Broken
#pragma property Item Public            bool    Locker_NoOpen
#pragma property Item Public            bool    Locker_IsElectro
#pragma property Item Public            bool    Door_NoBlockMove
#pragma property Item Public            bool    Door_NoBlockShoot
#pragma property Item Public            bool    Door_NoBlockLight
#pragma property Item Public            uint    Container_Volume
#pragma property Item Public            bool    Container_Changeble
#pragma property Item Public            bool    Container_CannotPickUp

// MultihexDoors не используется нигде.
#pragma property Item PrivateServer bool Door_IsMultyHex
#pragma property Item PrivateServer uint8[] Door_MultyHexLine1
#pragma property Item PrivateServer uint8[] Door_MultyHexLine2
#pragma property Item PrivateServer uint[] Door_BlockerIds

#ifdef __SERVER

bool UseItemOnLocker( Critter cr, Item locker, Item item ) // Export
{
    return true;
}

bool UseSkillOnLocker( Critter cr, Item locker, CritterProperty skill ) // Export
{
    Map map = cr.GetMap();
    if( not valid( map ) )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrUseNothing );
        return true;
    }

    if( skill == SKILL_PICK_ON_GROUND )
    {
        if( locker.Type == ItemType::Door )
        {
            // NoOpen
            if( locker.Locker_NoOpen )
            {
                cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrUseNothing );
                return true;
            }

            // Critter on hex
            if( locker.Opened && map.GetCritter( locker.HexX, locker.HexY ) !is null )
            {
                cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrUseNothing );
                return true;
            }

            // Check key
            if( !locker.Opened && locker.LockerId != 0 &&
                !locker.Locker_Broken && !IsKeyAviable( cr, locker.LockerId ) )
            {
                cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrItemLockerNeedKey );
                return true;
            }

            // Change state
            SwitchLocker( locker, !locker.Opened );
        }
        else if( locker.Type == ItemType::Container )
        {
            // NoOpen
            if( locker.Locker_NoOpen )
            {
                cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrUseNothing );
                return true;
            }

            // Check key
            if( !locker.Opened && locker.LockerId != 0 &&
                !locker.Locker_Broken && !IsKeyAviable( cr, locker.LockerId ) )
            {
                cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrItemLockerNeedKey );
                return true;
            }

            // Is changeble
            if( locker.Container_Changeble )
            {
                // Change state
                if( locker.Opened )
                    SwitchLocker( locker, !locker.Opened );
                else
                {
                    SwitchLocker( locker, !locker.Opened );
                    ShowContainer( cr, null, locker, locker.GroundLevel ? TransferTypes::HexContDown : TransferTypes::HexContUp );
                }
            }
            // No changeble
            else
            {
                ShowContainer( cr, null, locker, locker.GroundLevel ? TransferTypes::HexContDown : TransferTypes::HexContUp );
            }
        }
    }
    else if( skill == CritterProperty::SkillSteal )
    {
        if( locker.Type == ItemType::Container && locker.Opened )
            ShowContainer( cr, null, locker, locker.GroundLevel ? TransferTypes::HexContDown : TransferTypes::HexContUp );
        else
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrUseNothing );
    }
    else if( skill == CritterProperty::SkillLockpick )
    {
        // NoOpen
        if( locker.Locker_NoOpen )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrUseNothing );
            return true;
        }
        if( IS_TIMEOUT( cr.TimeoutSkLockpick ) )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrSkillWeariness );
            return true;
        }

        if( locker.LockerId == 0 || locker.Opened )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrUseNothing );
            return true;
        }
        int  base = cr.SkillLockpick - locker.LockerComplexity;
		Item itemLockpick = cr.GetItemBySlot( SLOT_HAND1 );
		if( valid( itemLockpick ) )
		{
			hash activePid = itemLockpick.ProtoId;
			if( activePid == Content::Item::lockpicks )
			{
				base += 25;
				if( Random( 0, 30 ) == 0 )
					cr.DeleteItem( Content::Item::lockpicks, 1 );
			}
			else if( activePid == Content::Item::exp_lockpick_set )
			{
				base += 50;
				if( Random( 0, 30 ) == 0 )
					cr.DeleteItem( Content::Item::exp_lockpick_set, 1 );
			}
			// Todo: Content::Item::electronic_lockpicks, Content::Item::elec_lockpick_mkii
		}
        base = CLAMP( base, 0, 95 );
		int value = Random( 1, 100 );
        if( base >= value )
        {
            SwitchLocker( locker, true );
            if( locker.Type == ItemType::Container )
                ShowContainer( cr, null, locker, locker.GroundLevel ? TransferTypes::HexContDown : TransferTypes::HexContUp );
            cr.Experience += 50;
            Scores::AddScore( cr, EScores::Cracker, 1 );
        }
        else
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrSkillLockpickFail );
        }

        cr.TimeoutSkLockpick = LOCKPICK_TIMEOUT( cr );
    }
    else if( skill == SKILL_TAKE_ALL_CONT )
    {
        return false;
    }
    else
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, MsgStr::StrUseNothing );
    }
    return true;
}

bool IsKeyAviable( Critter cr, uint lockerId ) // Export
{
    if( lockerId == 0 )
        return true;
    if( _CritFingersDoorId( cr.Id ) == lockerId || _CritEyesDoorId( cr.Id ) == lockerId )
        return true;
    Item[] keys = {};
	Obsolete::GetItemsByType( cr,  ItemType::Key, keys  );
    for( uint i = 0, j = keys.length(); i < j; i++ )
        if( keys[ i ].LockerId == lockerId )
            return true;
    return false;
}

uint GetKeyId( Critter cr, uint lockerId ) // Export
{
    if( lockerId == 0 || _CritFingersDoorId( cr.Id ) == lockerId || _CritEyesDoorId( cr.Id ) == lockerId )
        return 0;
    Item[] keys = {};
    for( uint i = 0, j = Obsolete::GetItemsByType( cr,  ItemType::Key, keys  ); i < j; i++ )
        if( keys[ i ].LockerId == lockerId )
            return keys[ i ].Id;
    return 0;
}

bool SwitchLocker( Item locker, bool toOpen ) // Export
{
    locker.Opened = toOpen;
    if( locker.Type == ItemType::Door )
    {
        locker.IsShootThru = toOpen;
        locker.IsLightThru = toOpen;
        locker.IsNoBlock = toOpen;
	}
    return toOpen;
}


void ShowContainer( Critter cr, Critter crFrom, Item container, TransferTypes typeShow )
{
/*	// Заглушка, требует реализации (просмотр контейнера или трупа)
	    // Show open animation for all who view container
    Critter[] players = crTo.GetCritters( true, FIND_ALL | FIND_ONLY_PLAYERS );
    if( crTo.IsPlayer() )
        players.insertFirst( crTo );
    for( uint i = 0; i < players.length(); i++ )
        players[ i ].Rpc.ShowOpenCloseAnimation( container.Id );
*/
    // Start container operation
    Item[] items = container.GetItems( 0 );
    if( cr.IsPlayer() )
    {
        cr.TransferType = ( container.GroundLevel ? TransferTypes::HexContDown : TransferTypes::HexContUp );
        cr.TransferContainerId = container.Id;
        cr.SendItems( items );
    }
    else
    {
        MoveItems( items, cr );
    }
}


#endif