// FOS Client

enum Collection
{
    ChosenAll,
    Inventory,
    Loot,
    BarterOffer,
    BarterTraderOffer,
}

Item@[] ReceivedItems = {};
Item@[] BarterOfferItems = {};
Item@[] BarterTraderOfferItems = {};
Item@[] RemovedItems = {};

void ModuleInit()
{
    __EventReceiveItems.Subscribe( OnReceiveItems );
}

void OnReceiveItems( Item[] items, int param )
{
    ReceivedItems.clear();
    BarterOfferItems.clear();
    BarterTraderOfferItems.clear();
    RemovedItems.clear();

    if( items !is null )
        ReceivedItems = items;

    Gui::EngineCallback_ItemChanged( false );

    if( param != 0 )
        return;

    Critter@ chosen = GetChosen();
    if( chosen is null )
        return;

    TransferTypes transfer = chosen.TransferType;
    if( transfer != TransferTypes::Close )
    {
        if( transfer == TransferTypes::CritBarter )
        {
            ShowScreen( CLIENT_SCREEN_BARTER, dictionary = { { "CritterId", chosen.TransferContainerId } } );
        }
        else
        {
            uint crId = 0;
            uint itemId = 0;
            if( transfer == TransferTypes::CritLoot || transfer == TransferTypes::CritSteal || transfer == TransferTypes::FarCrit )
                crId = chosen.TransferContainerId;
            else if( transfer == TransferTypes::HexContUp || transfer == TransferTypes::HexContDown || transfer == TransferTypes::SelfCont || transfer == TransferTypes::FarCont )
                itemId = chosen.TransferContainerId;

            ShowScreen( CLIENT_SCREEN_PICKUP, dictionary = { { "TargetCritterId", crId }, { "TargetItemId", itemId } } );
        }
    }
}

/*EXPORT*/ Item[]  GetCollection( Collection collection )
{
    Item[] items = {};
    Critter chosen = GetChosen();

    if( collection == Collection::ChosenAll && chosen !is null )
        items = chosen.GetItems();
    else if( collection == Collection::Inventory && chosen !is null )
        items = chosen.GetItemsBySlot( SLOT_INV );
    else if( collection == Collection::Loot )
        items = ReceivedItems;
    else if( collection == Collection::BarterOffer )
        items = BarterOfferItems;
    else if( collection == Collection::BarterTraderOffer )
        items = BarterTraderOfferItems;

    if( collection != Collection::BarterOffer && collection != Collection::BarterTraderOffer )
        ExcludeItems( items, collection != Collection::Loot ? BarterOfferItems : BarterTraderOfferItems );
    ExcludeItems( items, RemovedItems );

    return items;
}

/*EXPORT*/ void RemoveItem( Collection collection, Item& item, uint count )
{
    Assert( count > 0 );
    Assert( count <= item.Count );

    RemovedItems.insertLast( item.Clone( count ) );

    Gui::EngineCallback_ItemChanged( false );
}

/*EXPORT*/ void BarterItem( bool offer, Item& item, uint count )
{
    // if( offer )
}

void ExcludeItems( Item[]& items, Item[]& excludeItems )
{
    for( uint i = 0; i < excludeItems.length(); i++ )
    {
        Item excludeItem = excludeItems[ i ];
        for( uint j = 0; j < items.length(); j++ )
        {
            Item item = items[ j ];
            if( excludeItem.Id == item.Id )
            {
                if( excludeItem.Count >= item.Count )
                    items.removeAt( j );
                else
                    @items[ j ] = item.Clone( item.Count - excludeItem.Count );
                break;
            }
        }
    }
}

Collection GetCollectionFromType( int collectionType )
{
	Collection collection = Collection::ChosenAll;
	
	switch(collectionType)
	{
		case ITEMS_CHOSEN_ALL:
			collection = Collection::ChosenAll;
			break;
		case ITEMS_INVENTORY:
			collection = Collection::Inventory;
			break;
		case ITEMS_PICKUP:
			collection = Collection::Loot;
			break;
		case ITEMS_BARTER_OFFER:
			collection = Collection::BarterOffer;
			break;
		case ITEMS_BARTER_OPPONENT_OFFER:
			collection = Collection::BarterTraderOffer;
			break;
	}
	return collection;
}

Item[]  RefreshItemsCollection( int collectionType )
{
	Collection collection = GetCollectionFromType( collectionType );
	
	return GetCollection(collection);
}


Item GetCollectionItem( uint itemId, int collectionType )
{
    Item[] items = RefreshItemsCollection( collectionType );
    for( uint i = 0; i < items.length(); i++ )
        if( items[ i ].Id == itemId )
            return items[ i ];

    return GetItem( itemId );
}
