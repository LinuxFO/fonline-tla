// FOS Server Sort 2
// Author: rifleman17
// Скрипты для квестовой цепочки на поддержку Линетт. ГУ.

#pragma property Critter Protected     uint8 VCLynettArest   Group = Quests, Quest = 8843, Max = 5
#pragma property Critter Protected     uint8 VCLynettForgery Group = Quests, Quest = 8845, Max = 6
#pragma property Critter PrivateServer uint  VCLynettPrisonerId

// Наемный убийца, преследующий игрока, если тот отказался поддержать Линетт.
#define STR_KILLER_DEAD                ( 7100 ) // Вот сука черномазая, говорила – легкая мишень…
#define STR_KILLER_KILL                ( 7101 ) // Ха, как эта черная сука и обещала – раз плюнуть…

void _KillerInit( Critter cr, bool firstTime )
{
    PatternSniper::_SniperInit( cr, firstTime );
    if( firstTime )
    {
        cr.AddItem( Content::Item::sniper_rifle, 1 );
        cr.AddItem( Content::Item::combat_armor, 1 );
        cr.AddItem( Content::Item::super_stimpak, Random( 1, 2 ) );
        cr.AddItem( Content::Item::_223_fmj, Random( 30, 50 ) );
    }
    cr.DialogId = Content::Dialog::vc_killer;
    cr.ReplicationTime = -1;
    cr.TeamId = Teams::Slaver;   // Чтобы не было конфликта с наемниками, если они вдруг есть у игрока в команде
    PatternSniper::SetSniperStats( cr, 0 );
    __EventCritterDead.SubscribeToCritter( cr, _KillerDead );
    __EventCritterSomeCritterDead.SubscribeToCritter( cr, _KillerSmthDead );
}

void _KillerDead( Critter cr, Critter killer )
{
    PatternSniper::_SniperDead( cr, killer );
    Map map = cr.GetMap();
    if( valid( map ) )
        map.SetTextMsg( cr.HexX, cr.HexY, COLOR_BLUE, TEXTMSG_TEXT, STR_KILLER_DEAD );
}

void _KillerSmthDead( Critter cr, Critter fromCr, Critter killer )
{
    if( valid( killer ) && killer.Id == cr.Id && fromCr.VCLynettRefuse > 0 )
        cr.SayMsg( SAY_NORM, TEXTMSG_TEXT, STR_KILLER_KILL );
}

// Арест
// Для нпц, которые могут быть подвергнуты аресту, необходимо установить спец роль в маппере, а также
// внести номер диалога в массив prisonerDialogs. Соответствующие реплики добавить в диалог вручную
#define ROLE_PRISONER                  ( 1701 )
#define FORCE_DIALOG_FOUND_PRISONER    ( 23 )            // Найден заключенный, можно давать квест
#define FORCE_DIALOG_NOT_FOUND         ( 46 )            // Не найден заключенный, нельзя давать квест
#define HEX_FIRST                      ( HASH( "164" ) )
#define HEX_LAST                       ( HASH( "167" ) ) // Игрок должен находиться внутри многоугольника, ограниченного этими гексами
#define HEX_PRISON                     ( HASH( "168" ) ) // Место заключения
#define STR_ARESTHIM                   ( 2 )             // Пакуйте товарища!
#define STR_PRISONER_SHOUT             ( 1 )             // Вы не имеете права!Я буду жаловаться!Это произвол!Ты! Ты поплатишься за это!Я выйду отсюда через полчаса, вы все заплатите!

hash[] prisonerDialogs = { Content::Dialog::vc_kohl, Content::Dialog::vc_randal, Content::Dialog::vc_ed };

Critter GetPrisoner( Location loc, hash dialog )
{
    Critter[] critters = {};
    Map     map;
    Critter cr;
    for( uint i = 0, l = loc.GetMapCount(); i < l; i++ )
    {
        map = loc.GetMapByIndex( i );
        if( valid( map ) )
        {
            for( uint j = 0, k = map.GetNpcCount( ROLE_PRISONER, FIND_LIFE | FIND_ONLY_NPC ); j < k; j++ )
            {
                cr = map.GetNpc( ROLE_PRISONER, FIND_LIFE | FIND_ONLY_NPC, j );
                if( valid( cr ) && cr.DialogId == dialog && !Merc::IsMerc( cr ) )
                    return cr;                     // Если нпц является чьим-то мерком уже, его засадить в тюрьму не получится
            }
        }
    }
    return null;
}

uint r_TrySelectPrisoner( Critter player, Critter npc )
{
    Map map = player.GetMap();
    if( !valid( map ) )
        return FORCE_DIALOG_NOT_FOUND;
    Location loc = map.GetLocation();
    if( !valid( loc ) )
        return FORCE_DIALOG_NOT_FOUND;
    player.VCLynettPrisonerId = 0;
    Critter cr;
    int     tries = 10;
    while( tries > 0 and !valid( cr ) && prisonerDialogs.length() > 0 )
    {
        cr = GetPrisoner( loc, prisonerDialogs[ Random( 0, prisonerDialogs.length() - 1 ) ] );
        tries--;
    }
    if( valid( cr ) )
    {
        player.VCLynettPrisonerId = cr.Id;
        return FORCE_DIALOG_FOUND_PRISONER;
    }
    return FORCE_DIALOG_NOT_FOUND;
}

// lex name - имя искомого заключенного
void dlg_PrisonerName( Critter player, Critter npc, string lexems )
{
    if( !IS_DIALOG_GENERATED( lexems ) )
        return;
    lexems = "$nameИзбранный";
    if( player.VCLynettPrisonerId == 0 )
        return;
    Critter prisoner = GetCritter( player.VCLynettPrisonerId );
    if( !valid( prisoner ) )
        return;
    lexems = "$name@msg DLG " + STR_NPC_NAME_DLG( prisoner.DialogId ) + "@";
    __EventCritterTalk.SubscribeToCritter( prisoner, _PrisonerTalk );
}

bool _PrisonerTalk( Critter cr, Critter player, bool attach, uint talkCount )
{
    auto npcStory = player.NpcStory.clone();
    bool f = npcStory.get( cr.Id, false );
    // для контроля запуска нужного диалога используется переменная npc_story
    // поскольку нпц в любом случае нужен для скриптов в диалоге, а если не проверять запуск второго диалога, он тоже будет отменен
    if( attach )
    {
        if( player.VCLynettPrisonerId == cr.Id )
        {
            if( !f )
            {
                npcStory[ cr.Id ] = true;
                player.NpcStory = npcStory;
            }
            else
            {
                return true;                 // Второй вызов диалога, уже нужного
            }

            // player.Say(SAY_NETMSG, "DEBUG: подмена диалога...");
            RunDialog( player, cr, Content::Dialog::vc_telman, false );
            cr.MercCancelOnGlobal = true;
            return false;
        }
    }
    else
    {
        if( f )
        {
            npcStory[ cr.Id ] = false;
            player.NpcStory = npcStory;
        }
    }
    return true;
}

// Переключение статуса квеста происходит при наступании НПЦ на спецтриггер, если игрок тоже находится в здании
void t_Arest( Critter cr, const Item trigger, bool entered, uint8 dir )
{
    if( cr.IsNpc() && Merc::IsMerc( cr ) && !entered )
    {
        Critter player = Merc::GetMaster( cr );
        if( !valid( player ) )
            return;
        if( cr.Id == player.VCLynettPrisonerId && player.VCLynettArest == 3 && Entire::IsCritterInDeadZone( player, cr.GetMap(), 0, HEX_FIRST, HEX_LAST ) )
        {
            player.Wait( 0 );
            NpcPlanes::DropPlanes( cr );
            cr.Wait( 0 );
            player.SayMsg( SAY_NORM, TEXTMSG_DLG, DLGSTR( Content::Dialog::vc_telman, STR_ARESTHIM ) );
            Effects::FlushScreen( player, false, 2000 );
            player.VCLynettArest = 4;
            Merc::CancelMerc( cr );
            Obsolete::CritterTransitToMapEntire( cr, cr.GetMap().Id, HEX_PRISON );
            uint[] values = { cr.Id };
            DeferredCall( 1000, PrisonerTalk, values );
        }
    }
}

void PrisonerTalk( uint[] values )
{
    Critter cr = GetCritter( values[ 0 ] );
    if( valid( cr ) )
        cr.SayMsg( SAY_NORM, TEXTMSG_DLG, DLGSTR( Content::Dialog::vc_telman, STR_PRISONER_SHOUT ) );
}

// Подлог
#define ENTIRE_SPAWN_GUARD     ( HASH( "170" ) ) // гекс на котором генерятся гвардейцы
#define ENTIRE_MOVETO          ( HASH( "171" ) ) // Гекс, к которому перемещаются гвардейцы в момент обыска
#define HEX_FORG_FIRST         ( HASH( "172" ) ) // Комната МакКлюра
#define HEX_FORG_LAST          ( HASH( "175" ) )
#define ROLE_MACLUR            ( 35 )            // роль - Макклюр
#define ROLE_WITNESS           ( 1702 )          // роль - свидетель
#define MIN_SNEAK              ( 50 )            // минимальный сник, при котором макклюр не заметит игрока
#define STR_CATCH_LOW_SNEAK    ( 5920 )
#define CTE_DELETE             ( 176 )           // ид события на удаление гвардейца
#define STR_NO_WITNESS         ( 5921 )          // Мало просто забрать подложные документы, нужно сделать это при свидетелях...
#define STR_PLAYER             ( 5922 )          // Свидетели, подтвердите – найдены документы – письменный договор МакКлюра с Бишопом из Нью-Рено.
#define STR_GUARDS             ( 5923 )          // Так точно!Подтверждаем!
#define STR_MCCLURE            ( 5924 )          // Бред!


void r_AddDocs( Critter player, Critter npc )
{
    Item item = player.AddItem( Content::Item::fake_letter, 1 );
    if( valid( item ) )
        item.SetScript( _LynDocsInit );
}

// При выкладывании предмета в ящик проверяется, находится ли персонаж в снике, если нет и рядом стоит МакКлюр, подлог не удается
void _LynDocsInit( Item item, bool firstTime )
{
    __EventCritterUseSkill.SubscribeToOnItem( item, _LynDocsPutCont );
    if( firstTime )
        Item::SetDeleteItem( item, 24 * 3 );     // Предмет существует только трое игровых суток
}

bool _LynDocsPutCont( Critter cr, CritterProperty skill, Critter onCritter, Item item, const Item onScenery )
{
    Map     map = cr.GetMap();
    Critter npc = map.GetNpc( ROLE_MACLUR, FIND_LIFE_AND_KO | FIND_ONLY_NPC, 0 );

    if( !valid( map ) || map.ProtoId != Content::Map::vcity || cr.IsNpc() )
        return false;
    if( skill == SKILL_PUT_CONT )
    {
        if( ( cr.VCLynettForgery == 1 || cr.VCLynettForgery == 3 ) && Entire::IsCritterInDeadZone( cr, map, 0, HEX_FORG_FIRST, HEX_FORG_LAST ) )
        {
            if( cr.IsHide && cr.SkillSneak > 50 )
            {
                cr.Experience += 2000;
                cr.VCLynettForgery = 2;
                return false;                 // Навык достаточен, персонаж в снике
            }
            if( valid( npc ) && npc.IsLife() && Entire::IsCritterInDeadZone( npc, map, 0, HEX_FORG_FIRST, HEX_FORG_LAST ) )
            {
                npc.SayMsg( SAY_SHOUT, TEXTMSG_TEXT, STR_CATCH_LOW_SNEAK, "$pname" + Obsolete::GetPlayerName( cr.Id ) );
                cr.VCLynettForgery = 3;
                return true;
            }
            else
            {
                cr.Experience += 2000;
                cr.VCLynettForgery = 2;
                return false;                 // Макклюра нет на месте
            }
        }
    }
    if( skill == SKILL_TAKE_CONT  || skill == SKILL_TAKE_ALL_CONT )
    {
        if( cr.VCLynettForgery == 4 )
        {
            uint[] values = { cr.Id };
            uint guards = map.GetNpcCount( ROLE_WITNESS, FIND_LIFE | FIND_ONLY_NPC );
            for( uint i = 0; i < guards; i++ )
            {
                Critter guard = map.GetNpc( ROLE_WITNESS, FIND_LIFE | FIND_ONLY_NPC, i );
                if( valid( guard ) && Entire::IsCritterInDeadZone( guard, map, 0, HEX_FORG_FIRST, HEX_FORG_LAST ) )
                    values.insertLast( guard.Id );
            }
            if( values.length() > 1 )
            {
                if( valid( npc ) || npc.IsLife() )
                    values.insertFirst( npc.Id );
                SavedDeferredCall( 3000, Answer, values );
                cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_PLAYER );
            }
            else
            {
                cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, STR_NO_WITNESS );
                return true;
            }
        }
    }
    return false;
}

void Answer( uint[] values )
{
    if( values.length() > 2 )
    {
        Critter mcClure = GetCritter( values[ 0 ] );
        for( uint i = 2, l = values.length(); i < l; i++ )
        {
            Critter guard = GetCritter( values[ i ] );
            if( valid( guard ) )
                guard.SayMsg( SAY_NORM, TEXTMSG_TEXT, STR_GUARDS );
        }
        if( valid( mcClure ) )
            mcClure.SayMsg( SAY_NORM, TEXTMSG_TEXT, STR_MCCLURE );
        Critter player = GetCritter( values[ 1 ] );
        if( valid( player ) && player.VCLynettForgery == 4 )
        {
            player.VCLynettForgery = 5;
            player.Experience += 2500;
        }
    }
}
// Появление гвардейцев на входе к Макклюру. Гвардейцы будут ждать игрока не более суток, потом будут удалены.
void r_AddGuards( Critter cr, Critter npc )
{
    Map map = cr.GetMap();
    if( !valid( map ) )
        return;
    Critter guard;
    Entire::Entire[] entires = {};
    if( Obsolete::ParseEntires( map, entires, ENTIRE_SPAWN_GUARD ) == 0 )
        return;
    int[] props =
    {
        CritterProperty::DialogId, Content::Dialog::vc_guard_witness,
        CritterProperty::AiId,     Fallout2AIPackets::VaultGuard,
        CritterProperty::BagId,    Bags::VaultCityGuard,
        CritterProperty::TeamId,   Teams::Guard,
        CritterProperty::NpcRole,  ROLE_WITNESS,
        CritterProperty::Level,    20
    };
    for( uint i = 0, l = entires.length(); i < l; i++ )
    {
        guard = map.AddNpc( Content::Critter::VCGuardsman, entires[ i ].HexX, entires[ i ].HexY, 3, TlaExtended::GetCritPropsDict( props ) );
        if( valid( guard ) )
            guard.AddTimeEvent( cte_DeleteGuard, 60 * 60 * 24, CTE_DELETE );
    }
}

uint cte_DeleteGuard( Critter cr, int identifier, uint& stage )
{
    DeleteNpc( cr );
    return 0;
}

// Смена домашней позиции у гвардейцев
void r_MoveInto( Critter cr, Critter npc )
{
    Map     map = cr.GetMap();
    Critter guard;
    if( !valid( map ) )
        return;
    uint guards = map.GetNpcCount( ROLE_WITNESS, FIND_LIFE | FIND_ONLY_NPC );
    Entire::Entire[] entires = {};
    Obsolete::ParseEntires( map, entires, ENTIRE_MOVETO );
    for( uint i = 0, l = entires.length(); i < guards && i < l; i++ )
    {
        guard = map.GetNpc( ROLE_WITNESS, FIND_LIFE | FIND_ONLY_NPC, i );
        if( valid( guard ) )
        {
            guard.HomeMapId = map.Id;
            guard.HomeHexX = entires[ i ].HexX;
            guard.HomeHexY = entires[ i ].HexY;
            guard.HomeDir = 0;
        }
    }
}
