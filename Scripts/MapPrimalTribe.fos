// FOS Server Sort 2
// Author: Tab10id, Тринитротолуол

#pragma property Critter Protected     uint8  TribSulikRaid       Group = Quests, Quest = 4606, Max = 10
#pragma property Critter PrivateServer uint   TribRaiderKillCount
#pragma property Critter PrivateServer uint8  NCRElizeSlavers     Max = 10
#pragma property Critter PrivateServer uint16 MapPrimalTribeRaiderHx
#pragma property Critter PrivateServer uint16 MapPrimalTribeRaiderHy

#pragma property Global PrivateServer bool TribRaid
#pragma property Global PrivateServer uint[] PrimalTribeQuestPlayers

#define TIME_FOR_START                   ( 15 * 60 * 60 )
#define ROLE_TRIB_MEN                    ( 10 )
#define ROLE_TRIB_WOMEN                  ( 11 )
#define ROLE_TRIB_RAIDER                 ( 12 )
#define QUEST_STAT_NONE                  ( 0 )
#define QUEST_STAT_TAKEN                 ( 1 )
#define QUEST_STAT_FULL_SUCC             ( 2 )
#define QUEST_STAT_FAIL_RUNAWAY          ( 3 )
#define QUEST_STAT_FAIL_KILL             ( 4 )
#define QUEST_STAT_FAIL_NO_HELP          ( 5 )
#define QUEST_STAT_NOT_FULL_SUCC         ( 6 )
#define QUEST_STAT_END                   ( 7 )
#define QUEST_STAT_FAIL_NOT_START        ( 8 )
#define QUEST_STAT_FAIL_TRIBE_IS_DEAD    ( 9 )
#define QUEST_STAT_ATTACK_RUNS           ( 10 )

#define MAXDIST                          ( 15 )
#define RUN_PERIOD                       ( REAL_MINUTE( 6 + Random( 0, 7 ) ) )

#define RAIDERS_LEVEL                    ( 4 )
#define ENT_GROUP_START                  ( 10 )
#define ENT_GROUP_FINISH                 ( 12 )

#define STR_TALK_TO_SULIK                ( 2600 )

#define TIME_TO_CHANGE_TARGET            ( REAL_MINUTE( 13 + Random( 0, 7 ) ) )

bool AttackRuns = false;
uint[] QuestPlayers = {};
uint MapIdent = 0;
bool NotCome = true;
bool TribeDead = false;
uint StartAttackInvokeId = 0;

void _PrimalTribeInit( Map map, bool firstTime )
{
    initQuest( map );
//	initNaturResp(map);
}

void initNaturResp( Map map )
{
    DeferredCall( 0, NaturResp, map.Id );
}

void NaturResp( uint value )
{
    Map map = GetMap( value );
// 272 120 82
// 272 108 81
// 271 127 87
// 271 107 83
// 117 118 84
    DeferredCall( GAME_HOUR_TO_TICK( 12 ), NaturResp, map.Id );
}

void initQuest( Map map )
{
    MapIdent = map.Id;
//	Log("map.Id: "+map.Id+" MapIdent: "+MapIdent);
    uint menCount = 0;
    __EventMapCritterIn.SubscribeToMap( map, _PlayerInMap );
    __EventMapFinish.SubscribeToMap( map, _SaveAD );

    Critter[] citizens = {};
    GetCritters( map, citizens, ROLE_TRIB_MEN, FIND_ALL | FIND_ONLY_NPC );
    menCount = citizens.length();
    GetAD();
    GetCritters( map, citizens, ROLE_TRIB_WOMEN, FIND_ALL | FIND_ONLY_NPC );
    if( map.GetNpcCount( ROLE_TRIB_RAIDER, FIND_LIFE_AND_KO | FIND_ONLY_NPC ) > 0 )
    {
        AttackRuns = true;
    }
//	Log("initQuest "+menCount);
    for( uint i = 0; i < citizens.length(); i++ )
    {
        __EventCritterDead.SubscribeToCritter( citizens[ i ], _CDead );
        __EventCritterTalk.SubscribeToCritter( citizens[ i ], _OnDial );
        if( i < menCount )
        {
            __EventCritterAttacked.SubscribeToCritter( citizens[ i ], _MOnAttack );
        }
        else
        {
            __EventCritterAttacked.SubscribeToCritter( citizens[ i ], _WOnAttack );
        }
    }
}

void _SaveAD( Map map )
{
    Globals.PrimalTribeQuestPlayers = QuestPlayers;
}

void GetAD()
{
    QuestPlayers = Globals.PrimalTribeQuestPlayers.clone();
}

void r_StartQuest( Critter master, Critter npc )
{
    master.TribSulikRaid = QUEST_STAT_TAKEN;
    Globals.TribRaid = true;
    master.TribRaiderKillCount = 0;
    NotCome = true;
    QuestPlayers.insertLast( master.Id );
    StartAttackInvokeId = SavedDeferredCall( GAME_SECOND_TO_TICK( TIME_FOR_START ), StartAttack );
}

void r_PushQuestPl( Critter master, Critter npc )
{
    QuestPlayers.insertLast( master.Id );
}

void r_GetExp( Critter master, Critter npc )
{
    master.Experience += ( master.TribRaiderKillCount + 1 ) * 100;
    master.Karma += ( master.TribRaiderKillCount + 1 ) * 10;
    master.TribRaiderKillCount = 0;
    master.TribSulikRaid = QUEST_STAT_END;
}

bool d_AttackRuns( Critter master, Critter npc )
{
    if( AttackRuns )
    {
        return true;
    }
    else
    {
        return false;
    }
}

bool d_QuestSucc( Critter master, Critter npc )
{
    uint qs = master.TribSulikRaid;
    return qs == QUEST_STAT_FULL_SUCC || qs == QUEST_STAT_NOT_FULL_SUCC || qs == QUEST_STAT_END;
}

void StartAttack()
{
    StartAttackInvokeId = 0;
    uint entGroup = Random( ENT_GROUP_START, ENT_GROUP_FINISH );
    SpawnRaiders( MapIdent, entGroup, 0, RAIDERS_LEVEL );
}

void ChangeTarget( Critter crit )
{
    Map map = crit.GetMap();
    Critter[] raiders = {};
    GetCritters( map, raiders, ROLE_TRIB_RAIDER, FIND_LIFE_AND_KO | FIND_ONLY_NPC );
    uint count = map.GetNpcCount( ROLE_TRIB_RAIDER, FIND_LIFE_AND_KO | FIND_ONLY_NPC );
    uint m;
    if( count == 0 )
    {
        AttackRuns = false;
    }
    else
    {
        // EnemyStack::ClearEnemyStack( crit );
        _NpcEraseAllPlanesAttack( crit );
        m = Random( 0, count - 1 );
        NpcPlanes::AddAttackPlane( crit, AI_PLANE_ATTACK_PRIORITY, raiders[ m ] );
    }
}

void DeleteRaider( uint value )
{
    Critter raider = GetCritter( value );
    if( valid( raider ) )
        DeleteNpc( raider );
}

void _CDead( Critter crit, Critter killer )
{
    if( !valid( killer ) )
        return;
}

void CChangeTarget( uint value )
{
    Critter crit = GetCritter( value );
    if( !valid( crit ) )
        return;
    if( crit.IsDead() )
        return;

    if( AttackRuns )
    {
        ChangeTarget( crit );
        SavedDeferredCall( GAME_SECOND_TO_TICK( TIME_TO_CHANGE_TARGET ), CChangeTarget, value );
    }
}

void _RaiderDead( Critter crit, Critter killer )
{
    uint count = crit.GetMap().GetNpcCount( ROLE_TRIB_RAIDER, FIND_LIFE_AND_KO | FIND_ONLY_NPC );
    uint CountAll = crit.GetMap().GetNpcCount( ROLE_TRIB_RAIDER, FIND_ALL | FIND_ONLY_NPC );

    if( valid( killer ) )
    {
        if( killer.IsNpc() && killer.NpcRole != ROLE_TRIB_RAIDER )
            ChangeTarget( killer );

        if( killer.IsPlayer() )
        {
            uint8 questStat = killer.TribSulikRaid;
            if( questStat == QUEST_STAT_NONE || questStat == QUEST_STAT_FAIL_RUNAWAY ||
                questStat == QUEST_STAT_FAIL_KILL || questStat == QUEST_STAT_FAIL_NO_HELP ||
                questStat == QUEST_STAT_FAIL_NOT_START || questStat == QUEST_STAT_FAIL_TRIBE_IS_DEAD ||
                questStat == QUEST_STAT_ATTACK_RUNS || questStat == QUEST_STAT_NOT_FULL_SUCC )
            {
                if( killer.TribRaiderKillCount == CountAll - 1 )
                    killer.TribSulikRaid = QUEST_STAT_FULL_SUCC;
                else
                {
                    if( killer.TribRaiderKillCount == 0 )
                        killer.TribSulikRaid = QUEST_STAT_NOT_FULL_SUCC;
                    killer.TribRaiderKillCount += 1;
                }
            }
        }
    }

    if( count == 0 )
    {
        Globals.TribRaid = false;
        SendQuestStat();
    }

    SavedDeferredCall( GAME_SECOND_TO_TICK( 60 * Random( 20, 60 ) ), DeleteRaider, crit.Id );
}

void _PlayerDead( Critter player, Critter killer )
{
    uint8 questStat = player.TribSulikRaid;
    if( questStat != QUEST_STAT_FULL_SUCC && questStat != QUEST_STAT_NOT_FULL_SUCC )
        player.TribSulikRaid = QUEST_STAT_FAIL_KILL;
    __EventCritterDead.UnsubscribeFromCritter( player, _PlayerDead );
}

bool _MOnAttack( Critter crit, Critter attacker )
{
//	if(!AttackRuns)
//	{
//		AttackRuns=true;
//	}
    if( attacker.NpcRole == ROLE_TRIB_RAIDER )
    {
        return true;
    }
    else
    {
        return false;
    }
}

bool _WOnAttack( Critter crit, Critter attacker )
{
//	if(!AttackRuns)
//	{
//		AttackRuns=true;
//	}
    if( attacker.NpcRole == ROLE_TRIB_RAIDER )
    {
        RunAwayCritter( crit );
        return true;
    }
    else
    {
        return false;
    }
}

uint GetCritters( Map map, Critter[]  arr, int npcRole, int findType )
{
    uint findCount = 0;
    uint count = map.GetNpcCount( npcRole, findType );
    for( uint i = 0; i < count; i++ )
    {
        Critter cr = map.GetNpc( npcRole, findType, i );
        if( not valid( cr ) )
            continue;
        findCount++;
        arr.insertLast( cr );
    }
    return findCount;
}

Critter SpawnRaider( Map map, uint8 entGroup, uint8 entNum, hash npcPid, uint8 dir, uint dialog, uint bagId, uint level )
{
    uint16 x = 0, y = 0;
    if( not Entire::MapGetEntireCoords( map,  entGroup, entNum, x, y  ) )
    {
        Log( "\n<Trib: Rangers Attack> Error: GetEntireCoords " + entGroup + ":" + entNum );
        return null;
    }

    int[] props =
    {
        CritterProperty::DialogId, dialog, CritterProperty::BagId, bagId, CritterProperty::TeamId, Teams::Bandit,
        CritterProperty::MapPrimalTribeRaiderHx, x, CritterProperty::MapPrimalTribeRaiderHy, y, CritterProperty::NpcRole, ROLE_TRIB_RAIDER,
        CritterProperty::ReplicationTime, -1, CritterProperty::IsNoSupply, 1, CritterProperty::IsNoHome, 1,
        CritterProperty::Level, level
    };

    Critter raider = map.AddNpc( npcPid, x, y, dir, TlaExtended::GetCritPropsDict(props));
    if( not valid( raider ) )
    {
        Log( "\n<Trib: Rangers Attack> critter not valid " );
        return null;
    }

    DeferredCall( 0, RaiderChangeTarget, raider.Id );
    __EventCritterDead.SubscribeToCritter( raider, _RaiderDead );
    return raider;
}

void RaiderChangeTarget( uint value )
{
    Critter raider = GetCritter( value );
    if( not valid( raider ) )
        return;
    if( raider.IsDead() )
        return;

    Map map = raider.GetMap();
    if( not valid( map ) )
        return;

    uint citizenCount = map.GetNpcCount( ROLE_TRIB_MEN, FIND_LIFE_AND_KO | FIND_ONLY_NPC );
    #ifdef __DEBUG__
    Log( "Citizens Men: " + citizenCount );
    #endif

    citizenCount += map.GetNpcCount( ROLE_TRIB_WOMEN, FIND_LIFE_AND_KO | FIND_ONLY_NPC );
    #ifdef __DEBUG__
    Log( "Citizens All: " + citizenCount );
    #endif
    if( citizenCount == 0 )
    {
        NpcPlanes::AddWalkPlane( raider, AI_PLANE_WALK_PRIORITY, raider.MapPrimalTribeRaiderHx, raider.MapPrimalTribeRaiderHy, Random( 0, 5 ), true, Random( 0, 1 ) );
        NpcPlanes::AddMiscPlane( raider, AI_PLANE_MISC_PRIORITY, 0, MapPrimalTribe::plane_DelRaider );
        Globals.TribRaid = false;
        TribeDead = true;
        SendQuestStat();
    }
    else
    {
        uint mCount = map.GetNpcCount( ROLE_TRIB_MEN, FIND_LIFE_AND_KO | FIND_ONLY_NPC );
        uint wCount = map.GetNpcCount( ROLE_TRIB_WOMEN, FIND_LIFE_AND_KO | FIND_ONLY_NPC );
        EnemyStack::ClearEnemyStack( raider );
        _NpcEraseAllPlanesAttack( raider );
        Critter[] players = {};
        Obsolete::GetCritters( map,  0, FIND_LIFE_AND_KO | FIND_ONLY_PLAYERS, players  );
        Critter target;
        if( ( Random( 0, 1 ) == 0 ) or ( players.length() == 0 ) )
        {
            if( ( Random( 0, 1 ) == 0 ) or ( wCount == 0 ) )
            {
                target = map.GetNpc( ROLE_TRIB_MEN, FIND_LIFE_AND_KO | FIND_ONLY_NPC, Random( 0, mCount - 1 ) );
            }
            else
            {
                target = map.GetNpc( ROLE_TRIB_WOMEN, FIND_LIFE_AND_KO | FIND_ONLY_NPC, Random( 0, wCount - 1 ) );
            }
        }
        else
        {
            target = players[ Random( 0, players.length() - 1 ) ];
        }
        if( valid( target ) )
            NpcPlanes::AddAttackPlane( raider, AI_PLANE_ATTACK_PRIORITY, target );

        DeferredCall( GAME_SECOND_TO_TICK( TIME_TO_CHANGE_TARGET ), RaiderChangeTarget, value );
    }
}

void plane_DelRaider( Critter raider )
{
    if( raider.NpcRole != ROLE_TRIB_RAIDER )
        return;
    DeleteNpc( raider );
}

void SpawnRaiders( uint mapId, uint entGroup, uint dialogId, uint mobLevel )
{
    hash npcPid;
    Map map = GetMap( mapId );
    uint count = 0;
    if( not valid( map ) )
    {
        Log( "\n<Trib: Rangers Attack> map not valid" );
        return;
    }
    uint bagId;
    Critter[] raiders = {};
    uint entCount = Entire::MapCountEntire( map, entGroup );
    GetCritters( map, raiders, ROLE_TRIB_RAIDER, FIND_ALL | FIND_ONLY_NPC );
    count = raiders.length();
    if( count > 0 )
        for( uint i = 0; i < raiders.length(); i++ )
            DeleteNpc( raiders[ i ] );

    for( uint i = 0; i < entCount; i++ )
    {
        npcPid = Random( Content::Critter::RaiderMale, Content::Critter::RaiderFemale );
        if( npcPid == Content::Critter::RaiderMale )
            bagId = Random( Bags::RDRCRaidersRaiderMale, Bags::RDRCRaidersRaiderMale2 );
        else
            bagId = Random( Bags::RDRCRaidersRaiderFemale, Bags::RDRCRaidersRaiderFemale2 );
        Critter raider = SpawnRaider( map, entGroup, i, npcPid, Random( 0, 5 ), dialogId, bagId, mobLevel );
        if( not valid( raider ) )
            continue;
    }
    if( !AttackRuns )
    {
        AttackRuns = true;
        for( uint i = 0; i < QuestPlayers.length(); i++ )
        {
            Critter crit = GetCritter( QuestPlayers[ i ] );
            if( crit.TribSulikRaid == QUEST_STAT_TAKEN )
                crit.TribSulikRaid = QUEST_STAT_ATTACK_RUNS;
        }
    }
    Critter[] citizensM = {};
    Critter[] citizensW = {};
    GetCritters( map, citizensM, ROLE_TRIB_MEN, FIND_LIFE_AND_KO | FIND_ONLY_NPC );
    GetCritters( map, citizensW, ROLE_TRIB_WOMEN, FIND_LIFE_AND_KO | FIND_ONLY_NPC );

    for( uint i = 0; i < citizensM.length(); i++ )
        SavedDeferredCall( 0, CChangeTarget, citizensM[ i ].Id );

    for( uint i = 0; i < citizensW.length(); i++ )
    {
        DeferredCall( GAME_SECOND_TO_TICK( RUN_PERIOD ), RunRandom, citizensW[ i ].Id );
        citizensW[ i ].IsNoHome = true;
        __EventNpcPlaneEnd.SubscribeToCritter( citizensW[ i ], _WPlaneEnd );
    }
}

void SendQuestStat()
{
    Critter cr;
    Map     map;
    uint     mapId = 0;

    for( uint i = 0; i < QuestPlayers.length(); i++ )
    {
        cr = GetCritter( QuestPlayers[ i ] );
        if( not valid( cr ) )
            continue;

        if( cr.TribRaiderKillCount == 0 && cr.TribSulikRaid != QUEST_STAT_FAIL_KILL )
        {
            map = cr.GetMap();
            if( valid( map ) )
                mapId = map.Id;

            if( mapId != MapIdent )
            {
                if( cr.NCRElizeSlavers == 0 )
                    cr.TribSulikRaid = QUEST_STAT_FAIL_RUNAWAY;
                else
                {
                    if( NotCome )
                        cr.TribSulikRaid = QUEST_STAT_FAIL_NOT_START;
                    else
                        cr.TribSulikRaid = QUEST_STAT_FAIL_RUNAWAY;
                }
            }
            else
            {
                if( TribeDead )
                    cr.TribSulikRaid = QUEST_STAT_FAIL_TRIBE_IS_DEAD;
                else
                    cr.TribSulikRaid = QUEST_STAT_FAIL_NO_HELP;
            }
        }
    }
    QuestPlayers.clear();
}

void _PlayerInMap( Map map, Critter cr )
{
    if( cr.IsNpc() )
        return;

    if( cr.TribSulikRaid == QUEST_STAT_TAKEN )
    {
        if( !AttackRuns )
        {
            if( StartAttackInvokeId != 0 )
            {
                CancelDeferredCall( StartAttackInvokeId );
                StartAttackInvokeId = 0;
            }
            StartAttack();
        }
        __EventCritterDead.SubscribeToCritter( cr, _PlayerDead );
        NotCome = false;
    }
}

void RunAwayCritter( Critter crit )
{
    uint16 x, y, homeX = 0, homeY = 0, homeM = 0, homeD = 0;
    uint8  dir;
    do
    {
        x = crit.HexX + Random( -8, 8 );
    }
    while( ( x < homeX + MAXDIST ) or ( x > homeX - MAXDIST ) );
    do
    {
        y = crit.HexY + Random( -8, 8 );
    }
    while( ( y < homeY + MAXDIST ) or ( y > homeY - MAXDIST ) );
    dir = GetDirection( crit.HexX, crit.HexY, x, y );
    NpcPlanes::AddWalkPlane( crit, AI_PLANE_WALK_PRIORITY, x, y, dir, true, 0 );
}

void RunRandom( uint value )
{
    Critter crit = GetCritter( value );
    if( !valid( crit ) )
        return;

    Map map = crit.GetMap();
    if( !valid( map ) )
        return;

    uint count = map.GetNpcCount( ROLE_TRIB_RAIDER, FIND_LIFE_AND_KO | FIND_ONLY_NPC );
    if( count == 0 )
    {
        if( Globals.TribRaid )
        {
            SendQuestStat();
            Globals.TribRaid = false;
        }
        crit.IsNoHome = false;
        __EventNpcPlaneEnd.UnsubscribeFromCritter( crit, _WPlaneEnd );
    }
    else
    {
        RunAwayCritter( crit );
    }
}

bool _WPlaneEnd( Critter crit, int planeId, int reason, Critter someCr, Item someItem )
{
	NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(crit, planeId);

    DeferredCall( GAME_SECOND_TO_TICK( RUN_PERIOD ), RunRandom, crit.Id );
    return true;
}


bool _OnDial( Critter cr, Critter player, bool attach, uint talkCount )
{
    if( cr.DialogId != Content::Dialog::trib_sulik )
    {
        if( player.TribSulikRaid == QUEST_STAT_FULL_SUCC || player.TribSulikRaid == QUEST_STAT_NOT_FULL_SUCC )
        {
            cr.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_TEXT, STR_TALK_TO_SULIK );
            return false;
        }
        else
            return true;
    }
    else
        return true;
}

void CritterInit( Critter crit, bool firstTime )
{
    if( !AttackRuns )
        return;

    if( crit.Gender == Gender::Male )
    {
        SavedDeferredCall( 0, CChangeTarget, crit.Id );
    }
    else
    {
        DeferredCall( GAME_SECOND_TO_TICK( RUN_PERIOD ), RunRandom, crit.Id );
        crit.IsNoHome = true;
        __EventNpcPlaneEnd.SubscribeToCritter( crit, _WPlaneEnd );
    }
}
