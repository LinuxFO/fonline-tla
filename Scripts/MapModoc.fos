// FOS Server Sort 2

// Authors: cvet, rifleman17

///@ Property Critter Protected uint8 ModJoeGiantWasp Group = Quests Quest = 3307 Max = 3

#define ENTRANCE_SOUTH    ( 0 )
#define ENTRANCE_NORTH    ( 1 )
#define ENTIRE_SPAWN      ( 17 )
#define MESSAGE_KILL      ( 17 )
#define FARM_X            ( 940 )
#define FARM_Y            ( 213 )

void ModuleInit()
{
    __EventGlobalMapCheckEntranceAllowed.Subscribe( entrance_Modoc );
}

bool entrance_Modoc( Location modoc, Critter[] critters, uint8 entrance )
{
    if( modoc.ProtoId == Content::Location::modoc )
    {
        Critter leader = critters[ 0 ];
        if( entrance == ENTRANCE_NORTH )
            return leader.SkillOutdoorsman >= 50;
    }
    return true;
}

// Квест "Вредители на ферме"
// Мэр Модока просит игрока убить одну гигантскую осу, поселившуюся на одной из ферм Модока
void _FarmInit( Map map, bool firstTime )
{
    if( firstTime )
    {
        uint16 hx = 0;
        uint16 hy = 0;
        if( Entire::GetEntireFreeHex( map, ENTIRE_SPAWN, hx, hy ) )
        {
            Critter npc = map.AddNpc( Content::Critter::Wasp, hx, hy, Random( 0, 5 ), null );
            npc.SetScript( _WaspInit );
        }
    }
    __EventMapCritterIn.SubscribeToMap( map, _FarmInCritter );
}

void _FarmInCritter( Map map, Critter cr )
{
    SendMessage::SendMessage( cr,  MESSAGE_KILL, cr.Id, MESSAGE_TO_ALL_ON_MAP  );
}

void _WaspInit( Critter wasp, bool firstTime )
{
    __EventCritterDead.SubscribeToCritter( wasp, _WaspDead );
    __EventCritterMessage.SubscribeToCritter( wasp, _WaspMessage );
    wasp.ReplicationTime = -1;
}

void _WaspDead( Critter cr, Critter killer )
{
    Map map = cr.GetMap();
    if( !valid( map ) )
        return;
    Critter[] players = {};
    if( Obsolete::GetCritters( map,  0, FIND_ALL | FIND_ONLY_PLAYERS, players  ) > 0 )
        for( uint i = 0, l = players.length(); i < l; i++ )
            if( players[ i ].ModJoeGiantWasp == 1 )
                players[ i ].ModJoeGiantWasp = 2;

    Location loc = map.GetLocation();
    if( valid( loc ) )
        loc.AutoGarbage = true;
}

void _WaspMessage( Critter cr, Critter fromCr, int message, int value )
{
    if( message == MESSAGE_KILL )
        EnemyStack::AddEnemyToStack( cr,  fromCr.Id  );
}

void r_ShowMap( Critter player, Critter npc )
{
    Location loc = CreateLocation( Content::Location::modoc_farm, FARM_X, FARM_Y, null );
    if( valid( loc ) )
    {
        loc.Hidden = true;
        loc.AutoGarbage = false;
    }
    Location::SetKnownLoc( player, true, loc.Id );
    uint[] values = { loc.Id, player.Id };
    SavedDeferredCall( DAY_TICKS( 2 ), ResetWaspLoc, values );
}

void ResetWaspLoc( uint[] values )
{
    Location loc = GetLocation( values[ 0 ] );
    if( valid( loc ) )
        loc.AutoGarbage = true;
    Critter cr = GetCritter( values[ 1 ] );
    if( valid( cr ) && cr.ModJoeGiantWasp == 1 )
        cr.ModJoeGiantWasp = 0;
}


// Квест "Морозко"
void dlg_CountBottles( Critter player, Critter npc, string lexems )
{
    if( IS_DIALOG_END( lexems ) or IS_DIALOG_SAY_MODE( lexems ) )
        return;
    lexems = "$count" + _CritCountItem( player, Content::Item::bottle_ammiak );
}

void r_AllBottles( Critter player, Critter npc )
{
    uint bottles = _CritCountItem( player, Content::Item::bottle_ammiak );
    _CritDeleteItem( player, Content::Item::bottle_ammiak, bottles );
    player.Experience += bottles * 400;
    _CritAddItem( player, Content::Item::bottle_caps, bottles * 400 );
}
