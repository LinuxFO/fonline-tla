// FOS Server Sort 2
// Author: heX 
// Групповой квест: Охота на ванаминго!
// Выдает Марион(шериф) в Реддинге
// ver 1.0
/*
   Групповой квест: Охота на ванаминго!
   Выдает Марион(шериф) в Реддинге.
   На карте появляется локация с пещерой ванаминго.

   Ограничения (покачто сняты):
   5..10 человек.
   сумма уровней группы не меньше 50.
   выдается раз в две недели.

   Фичи (покачто не реализованны):
   если сильно отрицательная карма то
   Марион может выдать квест одному игроку,
   причем будет убеждать его что там всего пара ванаминго и ничего опастного.

   БАГИ:
   Неправильное название яйца. нужно юзать mob_egg.fodlg
   Алиен вываливается за стенку. (вверху по центру) OK?
   Затыкание проходов.
   Переключение автомата квеста в обратные состояния.
   рандомное начало атаки если долго не атакуют.
   убрать вождение по кругу.
   учитывать лечения стимами.
   больше опыта и денег
   повесить скрипт в maps.txt и map_init тут
 */

#pragma property Critter Protected     uint8 ReddMarionWan Group = Quests, Quest = 5387, Max = 7
#pragma property Critter PrivateServer uint  ReddQWinamingoKills
#pragma property Critter PrivateServer uint  ReddQWinamingoHealing
#pragma property Global PrivateServer uint ReddMarionWanLocation
#pragma property Global PrivateServer uint ReddMarionWanTimeout

// #define debag

#ifdef debag
# define MIN_PLAYERS     ( 1 )
#endif
#ifndef debag
# define MIN_PLAYERS     ( 5 )
#endif
#define MAX_PLAYERS      ( 10 )

// макс тварей
#define MAX_CRIT         ( 32 )

// позиция
#define REDD_POS_X       ( 13 * __GlobalMapZoneLength - __GlobalMapZoneLength / 2 )
#define REDD_POS_Y       ( 10 * __GlobalMapZoneLength - __GlobalMapZoneLength / 2 )


// <--- r17
#define NPC_ROLE_COW     ( 13 )     // брамины
#define NPC_ROLE_EGG     ( 5 )      // яйца ванаминго
#define NPC_ROLE_WAN1    ( 1 )      // первые три ванаминго на карте
// ---> r17

// надо часть этих данных хранить в базе - на случай перезагрузки.
uint[] GlobalGroupsIds = {};
uint GlobalMapId;
uint GlobalWanMax;
int  GlobalWanCount;
int  GlobalWanSpawn;
int  GlobalHumanCount;
int  GlobalWanCountLow;

void SetQuestState( Critter player, int Status )
{
    player.ReddMarionWan = Status;
}

int GetQuestState( Critter player )
{
    return player.ReddMarionWan;
}

void DeleteWanMap()
{
    DL( "Delete Wanamingo Location started" );

    // поиск локации
    if( Globals.ReddMarionWanLocation != 0 )
    {
        Location loc = GetLocation( Globals.ReddMarionWanLocation );
        if( not valid( loc ) )
        {
            Globals.ReddMarionWanLocation = 0;
            DL( "Invalid Wanamingo location" );
        }
        else
        {
            // ищем игроков из списка, которые все еще могут находиться на локации
            for( uint i = 0; i < GlobalGroupsIds.length(); i++ )
            {
                Critter player = GetCritter( GlobalGroupsIds[ i ] );
                if( !valid( player ) )
                    continue;
                Map player_map = player.GetMap();
                if( valid( player_map ) )
                {
                    Location playerLoc = player_map.GetLocation();
                    if( !valid( playerLoc ) )
                        continue;
                    if( playerLoc.ProtoId == loc.ProtoId )
                    {
                        // найден игрок в локации "пещера ванаминго"
                        // переносим игрока на глобальную карту
                        player.Say( SAY_NETMSG, "Вы услышали далекий шум, который нарастал и приближался. Задрожали стены пещеры, и с потолка посыпались камни. Только чудом вам удалось выбраться из пещеры Ванаминго." );
                        player.TransitToGlobal();
                    }
                }
                // забываем где оно
                if( Location::IsKnownLoc( player, true, loc.Id ) )
                {
                    Location::UnsetKnownLoc( player, true, loc.Id );
                    DL( "Player id " + player.Id + "Location::UnsetKnownLoc" );
                }
            }
            // удаление локации
            DeleteLocation( loc.Id );
            Globals.ReddMarionWanLocation = 0;
        }
    }

    // однозначная очистка и инициализация переменных
    GlobalGroupsIds.clear();
    GlobalMapId = 0;
    GlobalWanMax = 0;
    GlobalWanCount = 0;
    GlobalWanSpawn = 0;
    GlobalHumanCount = 0;
    GlobalWanCountLow = 0;
    Globals.ReddMarionWanTimeout = 0;
    DL( "Delete Wanamingo Location Succesfull" );
    // ~settime 20 2246 11 08 00 00
}

// --------->r17
// собрать нпц по номеру роли
uint GetCrittersByRole( Map map, uint x, uint y, uint radius, int role, Critter[]  critters ) // lib
{
    Critter[] cTmp = {};
    uint count = Obsolete::GetCrittersHex ( map,  x, y, radius, FIND_LIFE | FIND_ONLY_NPC, cTmp  );
    for( uint i = 0; i < count; i++ )
        if( cTmp[ i ].NpcRole == uint(role) )
            critters.insertLast( cTmp[ i ] );
    return critters.length();
}

Location _GetNewWanLoc( Critter[] grp )
{

    int x, y;
    x = -1;
    y = 1;
    Location loc = CreateLocation(
        Content::Location::wanamingo_cavern,
        REDD_POS_X + x * __GlobalMapZoneLength + Random( -( __GlobalMapZoneLength / 2 ), ( __GlobalMapZoneLength / 2 ) ),
        REDD_POS_Y + y * __GlobalMapZoneLength + Random( -( __GlobalMapZoneLength / 2 ), ( __GlobalMapZoneLength / 2 ) ),
        grp );
		
    if( !valid( loc ) )
        return null;

    loc.Hidden = true;
    loc.AutoGarbage = false;  // чтобы сборщик не убил локацию до того, как там не побывали игроки
    loc.Radius = 8;

    return loc;
}

void r_GotoHunter( Critter player, Critter npc, int val )
{
    if( !_TimeOutIsFree() )
    {
        // по идее сюда игрок никогда не должен попасть
        DL( "Wanamingo quest: TIMEOUT is not free " );
        return;
    }

    // удаляем старую карту если она есть
    DeleteWanMap();

    Critter[] groups = {};
    groups.insertLast( player );
    Critter[] realGrp = {};
    GlobalmapGroupExtended::GetFollowGroup(player, FIND_ALL, realGrp );
    for( uint i = 0, l = realGrp.length(); i < l; i++ )
    {
        if( GetQuestState( realGrp[ i ] ) == 0 )
        {
            groups.insertLast( realGrp[ i ] );
        }
    }

    // инициализирует квест!
    for( uint i = 0; i < groups.length(); i++ )
    {
        if( GetQuestState( groups[ i ] ) == 0 )
        {
            SetQuestState( groups[ i ], 1 );        // квест взят
        }
    }

    // //////////////////////////////////
    // создали позицию
    Globals.ReddMarionWanTimeout = __FullSecond + ( 60 * 60 * 24 );
    Location loc = _GetNewWanLoc( groups );
    if( not valid( loc ) )
        return;

    GlobalMapId = loc.Id;
    // записали в глобальную игровую переменную
    Globals.ReddMarionWanLocation = GlobalMapId;

    Map map = loc.GetMapByIndex( 0 );
    map.SetScript ( _WanMapInit );

    DeferredCall( GAME_SECOND_TO_TICK( Globals.ReddMarionWanTimeout ), TimeExpired );

    uint16 x = 0, y = 0;
    int    c;

    Entire::MapGetEntireCoords( map,  1, 0, x, y  );

    Critter[] critters = {};

    c = GetCrittersByRole( map, x, y, 20, NPC_ROLE_COW, critters ); // убитые брамины на карте

    for( uint i = 0; i < critters.length(); i++ )
    {
        CritterState::ToDead( critters[ i ], Anim2Actions::DeadBloodySingle, null  );
        critters[ i ].ReplicationTime = 60 * 24 * 365;
    }
    critters.clear();
    c = GetCrittersByRole( map, x, y, 20, NPC_ROLE_EGG, critters );

    for( uint i = 0; i < critters.length(); i++ )
        critters[ i ].DialogId = Content::Dialog::mob_egg_wan;
    critters.clear();

    c = GetCrittersByRole( map, x, y, 20, 1, critters );

    GlobalWanCountLow = c;

    for( uint i = 0; i < critters.length(); i++ )
        __EventCritterDead.SubscribeToCritter( critters[ i ], wan_dead_low );

    int wan;
    wan = groups.length() * 5;
    wan = CLAMP( wan, 16, 64 );

    // глобалы
    GlobalWanCount = wan;
    GlobalWanMax = wan;
    GlobalWanSpawn = wan;
    GlobalHumanCount = 0;
    GlobalGroupsIds.resize( groups.length() );
    for( uint i = 0, j = groups.length(); i < j; i++ )
        GlobalGroupsIds[ i ] = groups[ i ].Id;

    DL( "Quest started successful. Location added" );
}

// r 17 - инициализация карты с ванаминго
void _WanMapInit( Map map, bool firstTime )
{
    DL( "Begin Wan Map init" );
    // это было в map_activate_mob_script.fos
    Mob::ActivateMobScript( map );

    __EventMapCritterIn.SubscribeToMap( map, map_incoming_r17 );
    __EventMapCritterOutEx.SubscribeToMap( map, map_leave_r17 );
    // __EventMapFinish.SubscribeToMap( map, map_deleting_r17 ); удаление можно не обрабатывать, иначе при рестарте сервера карта не сохранится

    DL( "Wan Map init success" );
}

// на зачистку шахты даются только одни сутки
void TimeExpired()
{
    DeleteWanMap();
}

// /////////////////////////////////////////////////////
// механику на карте не трогал r17
// спавнить ванаминго
Critter SpawnWan( Map map, uint8 EntSpawn, uint8 level )
{
    uint16 x = 0, y = 0;
    if( not Entire::MapGetEntireCoords( map,  EntSpawn, 0, x, y  ) )
    {
        Log( "ERROR GetEntireCoords " + EntSpawn );
        return null;
    }

    int[] props =
    {
        CritterProperty::DialogId, Content::Dialog::mob_wanamingo, CritterProperty::BagId, Bags::Empty,
        CritterProperty::TeamId, Teams::Mob0, CritterProperty::ReplicationTime, -1, CritterProperty::Level, level
    };
    Critter cr = map.AddNpc( Content::Critter::ToughAlien, x, y, Random( 0, 5 ), TlaExtended::GetCritPropsDict(props));
        cr.SetScript( Mob::_MobInit );
    if( valid( cr ) )
    {
        // прерывания
        __EventCritterDead.SubscribeToCritter( cr, wan_dead );
    }
    if( not valid( cr ) )
    {
        Log( "Critter creation error" );
        return null;
    }
    return cr;
}

// спавнить ванаминго из нор
bool SpawnWan2()
{
    // uint8 ent=Random(1,5);
    if( Globals.ReddMarionWanLocation == 0 )
        return false;

    Location loc = GetLocation( Globals.ReddMarionWanLocation );
    if( not valid( loc ) )
        return false;

    Map map = loc.GetMapByIndex( 0 );
    if( not valid( map ) )
        return false;

    for( int i = 1; i <= 5; i++ )
    {
        Critter globalCr = GetCritter( GlobalGroupsIds[ Random( 0, GlobalGroupsIds.length() - 1 ) ] );
        if( not valid( globalCr ) )
            continue;
        Critter cr = SpawnWan( map, i + 10, CLAMP( globalCr.Level, 10, 20 ) );
        if( not valid( cr ) )
            continue;
        uint16 x = 0, y = 0;
        bool   r = Entire::MapGetEntireCoords( map,  i + 20, 0, x, y  );
        if( not r )
            continue;
        cr.HomeMapId = map.Id;
        cr.HomeHexX = x;
        cr.HomeHexY = y;
        cr.HomeDir = Random( 0, 5 );

        NpcPlanes::AddWalkPlane( cr, AI_PLANE_ATTACK_PRIORITY + 20, x, y, Random( 0, 5 ), false, 0 );
        NpcPlanes::AddAttackPlane( cr, AI_PLANE_ATTACK_PRIORITY + 10, globalCr );
        GlobalWanSpawn--;
        // BREAK!!!
        // все игроки враги
        for( uint i2 = 0; i2 < GlobalGroupsIds.length(); i2++ )
            EnemyStack::AddEnemyToStack( cr,  GlobalGroupsIds[ i2 ]  );
    }
    return true;
}

// Time event
void Spawn()
{
    if( not SpawnWan2() )
        return;
    if( GlobalWanSpawn <= 0 )
        return;
    else
        DeferredCall( GAME_MINUTE_TO_TICK( 5 ), Spawn );
}

// Алерт
void Alert()
{
    for( uint i = 0; i < GlobalGroupsIds.length(); i++ )
    {
        Critter cr = GetCritter( GlobalGroupsIds[ i ] );
        if( valid( cr ) )
            cr.Say( SAY_NETMSG, "Вы слышите шорох..." );
    }
}

// Алерт
void Alert2()
{
    for( uint i = 0; i < GlobalGroupsIds.length(); i++ )
    {
        Critter cr = GetCritter( GlobalGroupsIds[ i ] );
        if( valid( cr ) )
            cr.Say( SAY_NETMSG, "Кажется у вас проблемы!" );
    }
}

// начать спавн ванаминго!
void BeginSpawn()
{
    DeferredCall( GAME_MINUTE_TO_TICK( 3 ), Spawn );
    DeferredCall( GAME_MINUTE_TO_TICK( 1 ), Alert );
    DeferredCall( GAME_MINUTE_TO_TICK( 5 ), Alert2 );
}

#ifdef debag
// ~runscript redd_q_wanamingo spawn 0 0 0
void spawn( Critter player, int param0, int param1, int param2 )
{
    BeginSpawn();
}
#endif

// выдача опыта в зависимости от счетчиков
int GetExpa( Critter player )
{
    int kls = player.ReddQWinamingoKills;   // килсы
    int aid = player.ReddQWinamingoHealing; // хиляние
    if( kls == 0 and aid == 0 )
        return 0;                           // фиг вам халявщики, а не опыт!
    int expa = 500;
    if( kls >= 10 or aid >= 2 )
        expa += 1500;
    return expa;
}

// квест выполнен! поздравляем игрока!
void QuestCompleteNotify( Critter player )
{
    if( GetQuestState( player ) == 2 )  // пришол и
    {
        SetQuestState( player, 3 );     // победил!
        #ifdef debag
        player.Say( SAY_NETMSG, "Квест выполнен!" );
        player.Say( SAY_NETMSG, "Убито ванаминго: " + player.ReddQWinamingoKills );
        player.Say( SAY_NETMSG, "Лечений: " + player.ReddQWinamingoHealing );
        #endif
        player.Experience += GetExpa( player ); // УРА!!!
    }
    else if( GetQuestState( player ) == 1 )     // не заходил на локацию
        SetQuestState( player, 5 );
    else                                        // не пришол
        SetQuestState( player, 0 );             // сбрасываем нафиг
}

// ///////////////////////////////////////////////
// обработчики прерываний

// игрок уходит с карты
void map_leave( Map map, Critter player )
{
    DL( "Map leave begin" );  // r17
    if( player.IsPlayer() )
    {
        GlobalHumanCount--;
        DL( "GlobalHuman " + GlobalHumanCount ); // r17
        if( GlobalHumanCount == 0 )              // если больше нет никого
            DeleteWanMap();

        remove_events( player );
        DL( "Player events has been removed" );

        if( not player.IsDead() )          // если еще жив
        {
            if( GlobalWanCount > 0 )       // если гекко еще остались
            {
                if( GetQuestState( player ) == 2 )
                {
                    SetQuestState( player, 6 );                 // сбежал
                }
            }
        }
        player.ReddQWinamingoKills = 0;
        player.ReddQWinamingoHealing = 0;
    }
    DL( "Map leave end" );          // r17
}
// r17
void map_leave_r17( Map map, Critter player )
{
    if( player.IsPlayer() )
    {
        // игрок покидает локацию, но другие игроки могли там остаться
        // отменяем запоминание локации для игрока
        // удалять локацию не нужно, она сама удалится при срабатывании эвента или при окончании таймаута
        // в принципе, имеет смысл включить автосбор локации мусорщиком при первом выходе игрока с локации, но нужно убедиться, что не будет проблем при последующих попытках удаления по расписанию
        GlobalHumanCount--;

        Location loc = map.GetLocation();

        if( !valid( loc ) )
        {
            DL( "Wan Loc can't find error" );
            return;
        }
        if( Location::IsKnownLoc( player, true, loc.Id ) )
        {
            Location::UnsetKnownLoc( player, true, loc.Id );
            DL( "Player id " + player.Id + " Location::UnsetKnownLoc succsess " );
        }

        remove_events( player );
        if( !player.IsDead() )          // если еще жив
        {
            if( GlobalWanCount > 0 )    // если гекко еще остались
            {
                if( GetQuestState( player ) == 2 )
                {
                    SetQuestState( player, 6 );                 // сбежал
                }
            }
        }

    }

    DL( "Player has left wan map. Player ID " + player.Id );
    // на карте никого не осталось, можно сразу удалять
    if( _MapHasPlayers( map ) )
    {
        DeleteWanMap();
    }
}
void map_incoming_r17( Map map, Critter player )
{

    Location loc = map.GetLocation();
    if( valid( loc ) )
    {
        // все таки добавил автосборщик, иначе где-то залипало и карта не удалялась
        loc.AutoGarbage = true;
    }

    if( player.IsPlayer() )
    {
        SetQuestState( player, 2 );     // пришли
        GlobalHumanCount++;

        remove_events( player );

        __EventCritterUseSkill.SubscribeToCritter( player, player_doctor );
        __EventCritterDead.SubscribeToCritter( player, player_dead_r_17 );
    }
}

// игрок умер во время квеста
void player_dead_r_17( Critter player, Critter killer )
{
    SetQuestState( player, 4 );                         // умер
    if( player.ReddQWinamingoKills * 2 > GlobalWanMax ) // убил больше половины
    {
        player.Experience += 5000;
    }
    else
    {
        player.Experience += 500;
    }
    remove_events( player );
}
bool _MapHasPlayers( Map map )
{
    for( uint i = 0; i < GlobalGroupsIds.length(); i++ )
    {
        Critter cr = GetCritter( GlobalGroupsIds[ i ] );
        if( valid( cr ) )
        {
            if( valid( map.GetCritter( cr.Id ) ) )
            {
                return true;
            }
        }
    }
    return false;
}
// удаление карты
void map_deleting_r17( Map map, bool deleted )
{
    DL( "Map finish started" );
    Location loc = map.GetLocation();
    for( uint i = 0; i < GlobalGroupsIds.length(); i++ )
    {
        Critter cr = GetCritter( GlobalGroupsIds[ i ] );
        if( cr !is null )
            Location::UnsetKnownLoc( cr, true, loc.Id );
    }

    // чтобы без проблем можно было взять новый квест
    Globals.ReddMarionWanLocation = 0;
    DL( "Map finish ended" );
}


// игрок пришол на карту
void map_incoming( Map map, Critter player )
{
    if( player.IsPlayer() )
    {
        if( GlobalHumanCount > 0 )          // есть ктото уже есть то
        {
            Location loc = GetLocation( map.Id );
            // if (loc.GeckCount>0) loc.GeckCount--;
        }

        SetQuestState( player, 2 );       // пришли
        GlobalHumanCount++;
        player.ReddQWinamingoKills = 0;   // килсы
        player.ReddQWinamingoHealing = 0; // хиляние
        __EventCritterUseSkill.SubscribeToCritter( player, player_doctor );
        __EventCritterDead.SubscribeToCritter( player, player_dead );
    }
}

// удаляем прерывания у игрока
void remove_events( Critter player )
{
	
	__EventCritterUseSkill.UnsubscribeFromCritter( player, player_doctor );
    __EventCritterDead.UnsubscribeFromCritter( player, player_dead_r_17 );
    player.ReddQWinamingoKills = 0;   // килсы
    player.ReddQWinamingoHealing = 0; // хиляние
}

// игрок умер во время квеста
void player_dead( Critter player, Critter killer )
{
    remove_events( player );
    SetQuestState( player, 4 );                         // умер
    if( player.ReddQWinamingoKills > GlobalWanMax / 2 ) // убил больше половины
    {
        player.Experience += 5000;
    }
    else
    {
        player.Experience += 500;
    }
    player.ReddQWinamingoKills = 0;   // килсы
    player.ReddQWinamingoHealing = 0; // хиляние
}

// AHTUNG - карта сворачиваеться нафиг
void map_deleting( Map map, bool deleted )
{
    Location loc = map.GetLocation();
    for( uint i = 0; i < GlobalGroupsIds.length(); i++ )
    {
        Critter cr = GetCritter( GlobalGroupsIds[ i ] );
        if( cr !is null )
            Location::UnsetKnownLoc( cr, true, loc.Id );
    }

    Globals.ReddMarionWanLocation = 0;
}

bool player_doctor( Critter crit, CritterProperty skill, Critter onCritter, Item onItem, const Item onScenery )
{
    // цепочка if
    if( skill == CritterProperty::SkillFirstAid && valid( onCritter ) && onCritter.IsPlayer() &&
        crit.Id != onCritter.Id && !IS_TIMEOUT( crit.TimeoutSkFirstAid ) )
    {
        crit.ReddQWinamingoHealing += 1;
    }
    // и всетаки он вылечил его (ну или пытался, что тоже важно)
    return false;                                              // вызываем глобальный обработчик
}

// смерть трех ванаминго которые стоят в начале
void wan_dead_low( Critter crit, Critter killer )
{
    GlobalWanCountLow--;
    // Log("Dead detect "+GlobalWanCountLow);
    if( GlobalWanCountLow <= 0 )
        BeginSpawn();
}

void wan_dead( Critter crit, Critter killer )
{
    if( killer.IsPlayer() )
        killer.ReddQWinamingoKills += 1;

    GlobalWanCount--;
    // если гекко кончились
    if( GlobalWanCount == 0 )
    {
        // квест выполнен!
        // нужно уведомить участников
        for( uint i = 0; i < GlobalGroupsIds.length(); i++ )
        {
            Critter cr = GetCritter( GlobalGroupsIds[ i ] );
            if( valid( cr ) )
                QuestCompleteNotify( cr );
        }
        if( Globals.ReddMarionWanLocation != 0 )
        {
            Location loc = GetLocation( Globals.ReddMarionWanLocation );
            loc.AutoGarbage = true;            // разрешаем сбор карты мусорщиком (на всякий случай)
            Globals.ReddMarionWanLocation = 0; // снимаем метку
        }
    }
}
/*-----Вспомогательные функции(r17)------>-->-->*/
// проверка, что таймаут не закончен
// true  - таймаут завершен, либо не назначался раньше
// false - таймер тикает, нельзя ничего делать
bool _TimeOutIsFree()
{
    if( Globals.ReddMarionWanTimeout == 0 )
        return true;      // с таймаутом все нормально, он сброшен

    if( __FullSecond >= Globals.ReddMarionWanTimeout )
    {
        DL( "Время на квест истекло" );
        return true;
    }

    return false;

}
// проверка - квест выполняется или нет
bool _QuestAlreadyRun()
{
    return GlobalMapId != 0;
}
/*---------------Диалоги (r17) ---------->-->-->*/
// проверка доступности квеста
bool d_CheckQAccess( Critter player, Critter npc )
{
    // квест доступен, если никто его не выполняет в данный момент
    // проверка, суток должно было хватить, чтобы игроки прошли эту шахту
    // квест не выполняется, можно брать
    if( !_QuestAlreadyRun() )
        return true;
    // квест выполняется, проверяем таймаут квеста
    return ( _TimeOutIsFree() );

}


/*-<--<--<--------Диалоги (r17) -----------------*/
