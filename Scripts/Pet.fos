// FOS Server

// Author: rifleman17
/*
   Небоевые спутники, хранятся в предмете, например клетке
   при выходе игрока на глобал, удаляются

   если теряет из видимости хозяина, бежит за ним
   если атакован, удаляются

   можно использовать на предметах в инвентаре, или на статических, на картах
   тогда пет будет провожать игрока до глобала, потом удаляться

 */

//#include "Tla"

#pragma property Critter PrivateServer uint PetOwnerId
#pragma property Critter PrivateServer uint PetLifeTime

#pragma property Item PrivateServer uint PetId
#pragma property Item PrivateServer hash PetProto

#define OwnerLostDist    ( 8 )      // Расстояние в гексах до хозяина, после превышения которого пет бежит за ним

#define ROLE_PET         ( 765567 ) // Внимание, эту роль нужно заблокировать

// #define DL                     # (s) ( Log( "Pet: " + s ) )
#define DL               # ( s )

/* Pet */

void _PetInit( Critter cr, bool firstTime )
{
    cr.IsInvulnerable = true;
    cr.IsNoSteal = true;
    cr.IsNoEnemyStack = true;
    cr.IsNoLooseLimbs = true;
    cr.IsNoHome = Random( 0, 2 ) != 0;
    cr.IsNoHeal = true;
    cr.IsNoUnarmed = true;
    cr.IsNoTalk = true;
    cr.NpcRole = ROLE_PET;

    __EventCritterHideDist1.SubscribeToCritter( cr, _PetHideCritter );
    __EventNpcPlaneBegin.SubscribeToCritter( cr, _PetPlanBegin );
    __EventNpcPlaneEnd.SubscribeToCritter( cr, _PetPlanEnd );
    __EventCritterUseItem.SubscribeToOnCritter( cr, _PetUseItemOnMe );
    __EventCritterAttacked.SubscribeToCritter( cr, _PetAttacked );
    __EventCritterIdle.SubscribeToCritter( cr, _PetIdle );

    cr.ShowCritterDist1 = OwnerLostDist;
}

void _PetIdle( Critter cr )
{
    if( cr.IsLife() && FollowMaster( cr, cr.PetOwnerId ) )
    {
        if( Random( 1, 5 ) > 4 && NpcPlanes::IsNoPlanes( cr ) )
        {
            MoveRandom::CritterMoveRandom( cr );
        }
        return;
    }
    else
    {
        if( cr.PetLifeTime + REAL_SECOND( 10 ) < __FullSecond )
        {
            DL( "Deleting" );
            DeleteNpc( cr );
        }
    }
}

bool _PetAttacked( Critter cr, Critter attacker )
{
    // При атаке пета он удаляется, чтобы всегда можно было освободить любой проход, если его занял пет
    DeleteNpc( cr );
    return true;
}

bool _PetUseItemOnMe( Critter whoUse, Item item, Critter cr, Item onItem, const Item onScenery, uint param )
{
    return UseItem( cr, whoUse, item );
}

bool _PetPlanBegin( Critter cr, int planeId, int reason, Critter someCr, Item someItem )
{
	NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(cr, planeId);

    if( plane.Type == AI_PLANE_ATTACK )
    {
        return false;
    }
    return true;
}

bool _PetPlanEnd( Critter cr, int planeId, int reason, Critter someCr, Item someItem )
{
	NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(cr, planeId);

    return true;
}

void _PetHideCritter( Critter cr, Critter hideCrit )
{
    if( hideCrit.Id == cr.PetOwnerId )
    {
        if( !FollowMaster( cr, cr.PetOwnerId ) )
            DeleteNpc( cr );
    }
}

#define MAX_DISTANCE     ( 40 ) // При превышении этого значения пет удаляется
////import bool GetFreeHex0( Map map, uint radius, uint16 hx, uint16 hy ) from "Caravan";

bool FollowMaster( Critter pet, uint idMaster )
{
    Critter cr = GetCritter( idMaster );
    if( valid( cr ) )
    {
        Map mapCr = cr.GetMap();
        Map mapPet = pet.GetMap();
        if( valid( mapCr ) && valid( mapPet ) && mapCr.Id == mapPet.Id )
        {
            uint dist = GetCrittersDistantion( cr, pet );
            if( dist <= OwnerLostDist )
            {
                return true;
            }
            if( dist > OwnerLostDist && dist < MAX_DISTANCE )
            {
                uint16 x = cr.HexX;
                uint16 y = cr.HexY;
                if( Caravan::GetFreeHex( mapCr, 2, x, y ) )
                {
                    NpcPlanes::AddWalkPlane( pet, 0, x, y, Random( 0, 5 ), true, 0 );
                    return true;
                }
            }
        }
    }

    return false;
}


// Обработку использования предметов нужно добавлять сюда
bool UseItem( Critter cr, Critter whoUse, Item item )
{
    return false;     // реакция по умолчанию
}
/* Box */

void _BoxInit( Item item, bool firstTime )
{
    if( item.PetId > 0 )
    {
        Critter pet = GetCritter( item.PetId );
        if( valid( pet ) )
            DeleteNpc( pet );
    }
    __EventCritterUseItem.SubscribeToItem( item, _BoxUse );
}

bool _BoxUse( Critter cr, Item item, Critter onCritter, Item onItem, const Item onScenery, uint param )
{
    if( !valid( onCritter ) && !valid( onItem ) &&  !valid( onScenery ) )
    {
        Critter pet;
        if( item.PetId > 0 )
        {
            pet = GetCritter( item.PetId );
            item.PetId = 0;
            if( valid( pet ) )
            {
                DeleteNpc( pet );
                return true;
            }
        }
        Map map = cr.GetMap();
        if( valid( map ) && item.PetProto != 0 )
        {
            uint16 x = cr.HexX;
            uint16 y = cr.HexY;
            if( Caravan::GetFreeHex( map, 2, x, y ) )
            {
                int[] props = { CritterProperty::NpcRole, ROLE_PET /*, CritterProperty::Var2, cr.Id, CritterProperty::Var1, __FullSecond */ };
                pet = map.AddNpc( item.PetProto, x, y, GetDirection( x, y, cr.HexX, cr.HexY ), TlaExtended::GetCritPropsDict(props));
				pet.SetScript ( _PetInit );
                if( valid( pet ) )
                {
                    item.PetId = pet.Id;
                    pet.PetOwnerId = cr.Id;
                    return true;
                }
            }
        }
    }
    return false;
}

void AddPetBox( Critter cr, int boxPid, int petPid, int )
{
    Item box = cr.AddItem( boxPid, 1 );
    if( valid( box ) )
    {
        box.PetProto = petPid;
        box.IsCanUse = true;
        box.SetScript ( _BoxInit );
    }
}
