// FOS Server
// Author: cvet

#pragma property Critter PrivateServer uint DenPoormanItemId

const      uint[] EatPid =
{
    Content::Item::mutated_fruit, Content::Item::iguana_on_a_stick, Content::Item::meat_on_a_stick, Content::Item::beer,
    Content::Item::box_of_noodles, Content::Item::frozen_dinner, Content::Item::meat_jerky, Content::Item::cheezy_poofs, Content::Item::cookie,
    Content::Item::smitty_meal, Content::Item::meat
};
const uint EatPidCount = 11;

void _PoormanInit( Critter poorman, bool firstTime )
{
    __EventCritterShowItemOnMap.SubscribeToCritter( poorman, _PoormanShowItemOnMap );
    __EventCritterHideItemOnMap.SubscribeToCritter( poorman, _PoormanHideItemOnMap );
    poorman.DenPoormanItemId = 0; // Тут будет хранится Id итема, который мы хотим съесть.
}


void _PoormanShowItemOnMap( Critter poorman, Item item, bool added, Critter dropper )
{
    // Можем ли мы сейчас подойти.
    if( poorman.DenPoormanItemId != 0 )
        return;
    if( not NpcPlanes::IsNoPlanes( poorman ) )
        return;

    // Смотрим, съедобен ли итем.
    for( uint i = 0; i < EatPidCount; i++ )
    {
        if( item.ProtoId != EatPid[ i ] )
            continue;

        poorman.Say( SAY_NORM_ON_HEAD, "Ням-ням, вкусняшка." );
        NpcPlanes::AddPickPlane( poorman, 0, item, 0, true );
        poorman.DenPoormanItemId = item.Id;
    }
}


void _PoormanHideItemOnMap( Critter poorman, Item item, bool deleted, Critter picker )
{
    // Проверим, может кто-то поднял нашу еду.
    if( poorman.DenPoormanItemId != item.Id )
        return;

    poorman.DenPoormanItemId = 0;

    if( not valid( picker ) )
        return;

    // Ругаем поднявшего.
    if( picker.Id != poorman.Id )
    {
        _NpcEraseAllPlanesPick( poorman );
        poorman.Wait( 3000 );
        poorman.Say( SAY_NORM_ON_HEAD, "Подлец." );
    }
    // Это мы сами подняли, едим.
    else
    {
        poorman.DeleteItem( item.ProtoId, item.Count );
        poorman.Say( SAY_NORM_ON_HEAD, "Ммм, вкусно!" );
        poorman.Wait( 3000 );
    }
}
