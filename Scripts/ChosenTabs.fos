// FOS Client Sort 2

// Author: cvet
// Server and client stuff for radio

Sprite::Sprite TabPic = Sprite::Sprite ();
int[]  Position = { 5, 5 };
int    StepX = 0;
int    StepY = 5;
bool   LevelUp;
int    CurTab;

void InitChosenTabs() // Export
{
    TabPic.Load( "art/intrface/chosen_tab.png" );
    if( StepX != 0 )
        StepX += TabPic.Width;
    if( StepY != 0 )
        StepY += TabPic.Height;
    LevelUp = false;
    CurTab = 0;
}

void SetChosenTabLevelUp( bool enable ) // Export
{
    LevelUp = enable;
}

void DrawChosenTabs() // Export
{
    if( Gui::GetActiveMainScreen().Index != CLIENT_MAIN_SCREEN_GAME )
        return;

    Critter chosen = GetChosen();
    if( not valid( chosen ) )
        return;

    if( LevelUp && ( Gui::GetActiveMainScreen().Index != CLIENT_MAIN_SCREEN_GAME ||
                     Gui::GetActiveScreen().Index == CLIENT_SCREEN_CHARACTER ||
                     Gui::GetActiveScreen().Index == CLIENT_SCREEN_PERK ) )
        LevelUp = false;

    CurTab = 0;

    if( chosen.IsHide )
        DrawTab( GetMsgStr( TEXTMSG_GAME, MsgStr::StrHidemodeTitle ), COLOR_DGREEN );

    if( LevelUp )
        DrawTab( GetMsgStr( TEXTMSG_GAME, MsgStr::StrLevelupTitle ), COLOR_DGREEN );

    if( chosen.IsOverweight )
        DrawTab( GetMsgStr( TEXTMSG_GAME, MsgStr::StrOverweightTitle ), COLOR_DRED );

    if( chosen.IsPoisoned )
        DrawTab( GetMsgStr( TEXTMSG_GAME, MsgStr::StrPoisonedTitle ), COLOR_DRED );

    if( chosen.IsRadiated )
        DrawTab( GetMsgStr( TEXTMSG_GAME, MsgStr::StrRadiatedTitle ), COLOR_DRED );

    if( chosen.IsInjured )
        DrawTab( GetMsgStr( TEXTMSG_GAME, MsgStr::StrInjuredTitle ), COLOR_DRED );

    if( chosen.IsAddicted )
        DrawTab( GetMsgStr( TEXTMSG_GAME, MsgStr::StrAddictedTitle ), COLOR_DRED );

    if( IS_TIMEOUT( chosen.TimeoutTransfer ) )
        DrawTab( GetMsgStr( TEXTMSG_GAME, MsgStr::StrTimeoutTitle ), ( chosen.TimeoutTransfer - __FullSecond ) / 1000, COLOR_DRED );
}

void DrawTab( string text, uint color )
{
    TabPic.Draw( Position[ 0 ] + CurTab * StepX, Position[ 1 ] + CurTab * StepY );
    DrawText( text, Position[ 0 ] + CurTab * StepX, Position[ 1 ] + CurTab * StepY, TabPic.Width, TabPic.Height, color, FONT_FALLOUT, FT_CENTERXY );
    CurTab++;
}

void DrawTab( string text, int value, uint color )
{
    text = ReplaceText( text, "VALUE", value );
    TabPic.Draw( Position[ 0 ] + CurTab * StepX, Position[ 1 ] + CurTab * StepY );
    DrawText( text, Position[ 0 ] + CurTab * StepX, Position[ 1 ] + CurTab * StepY, TabPic.Width, TabPic.Height, color, FONT_FALLOUT, FT_CENTERXY );
    CurTab++;
}
