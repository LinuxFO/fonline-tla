// FOS Server
// Author: heX
// Скрипты охраны в Городе Убежище
// охранники просят убрать оружие.
// охранники реагируют на употребление алкоголя и наркотиков.

// WARN:
// я тут рискую и делаю наследование...
// (а наследование еще не совсем стабильно работает в AngScr)
// но вроде все работает нормально.

// наследуем класс библиотеки
class CGuardsManagerForVault : GuardLib::CGuardsManager
{
    CGuardsManagerForVault()
    {
        super();
        Dialog = Content::Dialog::vc_guard;
    }
}

// класс с алгоритмом
CGuardsManagerForVault Grd = CGuardsManagerForVault();

bool GuardItemTest( Item item ) // export
{
    return Grd.GuardItemTest( item );
}


// constructor [ heX ]

// Инициализация нпц. происходит при вводе нпц в игру
void _GuardInit( Critter npc, bool firstTime )
{
    // вешаем обработчики событий
    __EventCritterShow.SubscribeToCritter( npc, _GuardOnAddCritter );
    __EventCritterHide.SubscribeToCritter( npc, _GuardOnRemoveCritter );
    // __EventCritterIdle.SubscribeToCritter( npc, _GuardIdle );
    __EventNpcPlaneEnd.SubscribeToCritter( npc, _GuardEndPlane );
    __EventCritterMessage.SubscribeToCritter( npc, _GuardOnMessage );
    __EventCritterSomeCritterMoveItem.SubscribeToCritter( npc, _GuardOnMoveItem );
    __EventCritterSomeCritterUseItem.SubscribeToCritter( npc, _GuardOnUseItem );
    __EventCritterSomeCritterStealing.SubscribeToCritter( npc, _GuardStealing );
    __EventCritterSomeCritterAttack.SubscribeToCritter( npc, _GuardOnSmthAttack );
    __EventCritterSomeCritterDropItem.SubscribeToCritter( npc, _GuardOnDropItem ); // r17

    // Создаем событие наблюдения
    if( not firstTime && npc.GetTimeEvents( Tla::CteObserving, null, null, null ) == 0 )
        npc.AddTimeEvent( cte_Observing, OBSERV_PERIOD, Tla::CteObserving );
}

uint cte_Observing( Critter npc, int identifier, uint& stage )
{
    return Grd.EventObserving( npc );
}

void _GuardOnAddCritter( Critter crit, Critter showCrit )
{
    Grd.EventOnAddCritter( crit, showCrit );
}

void _GuardOnRemoveCritter( Critter crit, Critter hideCrit )
{
    Grd.EventOnRemoveCritter( crit, hideCrit );
}

bool _GuardEndPlane( Critter npc, int planeId, int reason, Critter someCr, Item someItem )
{
	NpcPlanes::NpcPlane plane = NpcPlanes::GetCritterPlane(npc, planeId);

    Grd.EventEndPlane( npc );
    return true;
}

void _GuardOnMoveItem( Critter crit, Critter fromCrit, const Item item, uint8 fromSlot )
{
    Grd.EventOnMoveItem( crit, fromCrit, GetItem( item.Id ), fromSlot );
}

void _GuardOnMessage( Critter crit, Critter fromCrit, int message, int value )
{
    Grd.EventOnMessage( crit, fromCrit, message, value );
}

void _GuardOnUseItem( Critter crit, Critter fromCrit, Item item, Critter onCritter, Item onItem, const Item onScenery, uint param  )
{
    Grd.EventOnUseItem( crit, fromCrit, item, onCritter, onItem, null );
}

void _GuardOnDropItem( Critter crit, Critter fromCrit, Item item ) // r17
{
    Grd.EventOnDropItem( crit, fromCrit, item );
}

void _GuardOnSmthAttack( Critter crit, Critter fromCrit, Critter target , Item weapon, uint8 weaponMode, const Item ammo)
{
    Grd.EventOnSmthAttack( crit, fromCrit, target );
}

void _GuardStealing( Critter crit, Critter thief, Critter fromCrit, Item item, uint count )
{
    Grd.EventStealing( crit, fromCrit, thief, false, item, count );
}
