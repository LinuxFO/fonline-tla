// FOS Server Sort 2
// Autor: Cracker
// Talking head special encounter scripts

#pragma property Critter PrivateServer uint SETalkingHeadStringNum

#define STR_FIRST           ( 70002 )
#define STR_LAST            ( 70027 )
#define STR_STEALING_WTF    ( 70029 )

void _HeadInit( Item head, bool firstTime )
{
    __EventCritterUseSkill.SubscribeToOnItem( head, _Head );
}

bool _Head( Critter cr, CritterProperty skill, Critter onCritter, Item head, const Item onScenery )
{
    if( skill == SKILL_PICK_ON_GROUND )
    {
        cr.SETalkingHeadStringNum = STR_FIRST;
        DeferredCall( 0, StartDialog, cr.Id );
    }
    if( skill == CritterProperty::SkillSteal )
    {
        if( cr.SkillSteal + cr.LuckBase * 5 >= Random( 200, 351 ) )
        {
            cr.AddItem( Content::Item::monument_chunck, 3 );
        }
        else
        {
            CritterState::ToDead( cr, Anim2Actions::DeadFront, null  );
            Map map = cr.GetMap();
            map.SetTextMsg( 85, 94, COLOR_RED, TEXTMSG_TEXT, STR_STEALING_WTF );
        }
    }
    return true;
}

void StartDialog( uint value )
{
    Critter cr = GetCritter( value );
    Map     map = cr.GetMap();
    if( cr.SETalkingHeadStringNum <= STR_LAST )
    {
        if( cr.SETalkingHeadStringNum == 70006 || cr.SETalkingHeadStringNum == 70011 || cr.SETalkingHeadStringNum == 70013 || cr.SETalkingHeadStringNum == 70015 || cr.SETalkingHeadStringNum == 70017 || cr.SETalkingHeadStringNum == 70019 || cr.SETalkingHeadStringNum == 70025 )
        {
            cr.SayMsg( SAY_NORM_ON_HEAD, TEXTMSG_TEXT, cr.SETalkingHeadStringNum );
        }
        else
        {
            if( cr.SETalkingHeadStringNum == 70023 )
                cr.AddItem( Content::Item::monument_chunck, 1 );
            map.SetTextMsg( 85, 94, ( COLOR_RGB( 0xF8, 0xF9, 0x93 ) ), TEXTMSG_TEXT, cr.SETalkingHeadStringNum );
        }
        cr.SETalkingHeadStringNum += 1;
        DeferredCall( GAME_SECOND_TO_TICK( 2 * 60 ), StartDialog, cr.Id );
        cr.Wait( __FullSecond + 3 * 60 );
    }
    else
    {
        cr.Wait( 1 );
    }
}

void Test( Critter cr, int p0, int p1, int p2 )
{
    Location loc = CreateLocation( Content::Location::vault_dwellers_head, cr.WorldX, cr.WorldY, null );
    Map      map = loc.GetMapByIndex( 0 );
    Obsolete::CritterTransitToMapEntire( cr, map.Id, HASHI( 0 ) );
}

// ~run se_talking_head Test 1 1 1
